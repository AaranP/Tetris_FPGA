680x0 MACRO ASSEMBLER   Version 5.00   (c) 1992-2005 Peter J. Fondse

Date: 22 Apr 2024      Time: 15:30:30          Source: C:\TETRIS_FINAL_AP_V1\PROGRAMS\DEBUGMONITORCODE\TETRIS_SPEECH.SRC

                       1          section   code
                       2   ; for initial stack use $08040000 if your system uses SRAM for main memory (top of 256kbyte SRAM space)
                       3   ; When your system is converted to use DRAM for main memory set this constant to $0C000000 (top of 64MByte DRAM space
                       4   
          0804 0000    5   StackPointerVal     equ $08040000      when using sram
                       6   ;StackPointerVal     equ $0C000000      when using dram
                       7   
                       8   ; define RamVectorTable as $0803000 if your system uses SRAM for main memory
                       9   ; When your system is converted to use DRAM for main memory define RamVectorTable constant as $0B000000 (top of 64MByte DRAM space)
                      10   
          0803 0000   11   RamVectorTable      equ $08030000      when using sram
                      12   ;RamVectorTable      equ $0B000000      when using dram
                      13   
                      14   
                      15   
                      16   ; CSTART.ASM  -  C startup-code for Debug Monitor
00000000              17                   align
                      18   
00000000              19                   org $00000000          ;start of rom based vector table, 68k hard wired to expect this at $0
                      20   
00000000  0804 0000   21   InitialSP       dc.l StackPointerVal   ;initial supervisor state stack pointer(stack decrements first before being used)
00000004  0000 0400   22   InitialPC       dc.l start             ;address of 1st instruction of program after a reset
00000008  0000 0796   23   BusError        dc.l E_BErro           ;bus error - stop program
0000000C  0000 07A8   24   AddressError    dc.l E_AErro           ;address error - stop program
00000010  0000 07BA   25   IllegalInstr    dc.l E_IInst           ;illegal instruction - stop program
00000014  0000 07CC   26   DividebyZero    dc.l E_DZero           ;divide by zero error - stop program
00000018  0000 07DE   27   Check           dc.l E_Check           ;Check instruction - stop program
0000001C  0000 07F0   28   TrapV           dc.l E_Trapv           ;Trapv instruction - stop program
00000020  0000 0802   29   Privilege       dc.l E_Priv            ;privilige violation - stop program
00000024  0000 0814   30   Trace           dc.l E_Trace           ;stop on trace
00000028  0000 0826   31   Line1010emul    dc.l E_1010            ;1010 instructions stop
0000002C  0000 0838   32   Line1111emul    dc.l E_1111            ;1111 instructions stop
00000030  0000 084A   33   Unassigned1     dc.l E_Unnas1           ;unassigned vector
00000034  0000 084A   34   Unassigned2     dc.l E_Unnas2           ;unassigned vector
00000038  0000 084A   35   Unassigned3     dc.l E_Unnas3           ;unassigned vector
0000003C  0000 084A   36   Uninit_IRQ      dc.l E_UnitI           ;uninitialised interrupt
00000040  0000 084A   37   Unassigned4     dc.l E_Unnas4           ;unassigned vector
00000044  0000 084A   38   Unassigned5     dc.l E_Unnas5           ;unassigned vector
00000048  0000 084A   39   Unassigned6     dc.l E_Unnas6           ;unassigned vector
0000004C  0000 084A   40   Unassigned7     dc.l E_Unnas7           ;unassigned vector
00000050  0000 084A   41   Unassigned8     dc.l E_Unnas8           ;unassigned vector
00000054  0000 084A   42   Unassigned9     dc.l E_Unnas9           ;unassigned vector
00000058  0000 084A   43   Unassigned10    dc.l E_Unnas10           ;unassigned vector
0000005C  0000 084A   44   Unassigned11    dc.l E_Unnas11           ;unassigned vector
00000060  0000 084A   45   SpuriousIRQ     dc.l E_Spuri           ;stop on spurious irq
                      46   *
                      47   *
00000064  0000 042E   48   Level1IRQ       dc.l Level1RamISR
00000068  0000 0440   49   Level2IRQ       dc.l Level2RamISR
0000006C  0000 0452   50   Level3IRQ       dc.l Level3RamISR
00000070  0000 0464   51   Level4IRQ       dc.l Level4RamISR
00000074  0000 0476   52   Level5IRQ       dc.l Level5RamISR
00000078  0000 0580   53   Level6IRQ       dc.l Level6RamISR
0000007C  0000 0592   54   Level7IRQ       dc.l Level7RamISR
                      55   *
                      56   *
00000080  0000 05A4   57   Trap0           dc.l Trap0RamISR        ; User installed trap handler
00000084  0000 05B6   58   Trap1           dc.l Trap1RamISR        ; User installed trap handler
00000088  0000 05C8   59   Trap2           dc.l Trap2RamISR        ; User installed trap handler
0000008C  0000 05DA   60   Trap3           dc.l Trap3RamISR        ; User installed trap handler
00000090  0000 05EC   61   Trap4           dc.l Trap4RamISR        ; User installed trap handler
00000094  0000 05FE   62   Trap5           dc.l Trap5RamISR        ; User installed trap handler
00000098  0000 0610   63   Trap6           dc.l Trap6RamISR        ; User installed trap handler
0000009C  0000 0622   64   Trap7           dc.l Trap7RamISR        ; User installed trap handler
000000A0  0000 0634   65   Trap8           dc.l Trap8RamISR        ; User installed trap handler
000000A4  0000 0646   66   Trap9           dc.l Trap9RamISR        ; User installed trap handler
000000A8  0000 0658   67   Trap10          dc.l Trap10RamISR       ; User installed trap handler
000000AC  0000 066A   68   Trap11          dc.l Trap11RamISR       ; User installed trap handler
000000B0  0000 067C   69   Trap12          dc.l Trap12RamISR       ; User installed trap handler
000000B4  0000 068E   70   Trap13          dc.l Trap13RamISR       ; User installed trap handler
000000B8  0000 06A0   71   Trap14          dc.l Trap14RamISR       ; User installed trap handler
000000BC  0000 0790   72   Trap15          dc.l Trap15RamISR       ; User installed trap handler
                      73   
                      74   *
                      75   * Other vectors 64-255 are users vectors for autovectored IO device (not implemented in TG68)
                      76   *
                      77   
00000400              78                   org       $00000400
                      79   
00000400  46FC 2700   80   start:          move.w     #$2700,SR             ;set interrupts to disable until later
                      81   
                      82   *************************************************************************************
                      83   ** add some 68000 instruction to read and write to memory, IO etc. This doesn't do anything
                      84   ** important, it just creates read and write bus cycles to specific addresses which
                      85   ** help with debugging hardware in Quartus simulations
                      86   **************************************************************************************
                      87   
                      88                   ; some important initialisation do not modify
00000404  23FC FFFF   89                   move.l    #-1,__ungetbuf  ; unget-buffer for keyboard input
00000408  FFFF 0803 
0000040C  00C0      
0000040E  23FC 0000   90                   move.l    #0,__allocp     ; pointer to allocated memory for malloc-function
00000412  0000 0803 
00000416  00C4      
00000418  23FC 0803   91                   move.l    #heap,__heap    ; pointer to free memory
0000041C  0770 0803 
00000420  00C4      
00000422  46FC 2000   92                   move.w    #$2000,SR       ; enable interrupts
                      93   
00000426  4EB9 0000   94   mainloop        jsr       _main
0000042A  20BC      
0000042C  60F8        95                   bra       mainloop
                      96   
                      97   *********************************************************************************************************
                      98   * Code to call Ram Based Interrupt handler and other exeception handler code
                      99   *********************************************************************************************************
0000042E  48E7 FFFE  100   Level1RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000432  2079 0803  101                   move.l    VL1IRQ,a0               get ram based address into a0
00000436  0064      
00000438  4E90       102                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000043A  4CDF 7FFF  103                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000043E  4E73       104                   rte
00000440  48E7 FFFE  105   Level2RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000444  2079 0803  106                   move.l    VL2IRQ,a0               get ram based address into a0
00000448  0068      
0000044A  4E90       107                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000044C  4CDF 7FFF  108                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000450  4E73       109                   rte
00000452  48E7 FFFE  110   Level3RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000456  2079 0803  111                   move.l    VL3IRQ,a0               get ram based address into a0
0000045A  006C      
0000045C  4E90       112                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000045E  4CDF 7FFF  113                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000462  4E73       114                   rte
00000464  48E7 FFFE  115   Level4RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000468  2079 0803  116                   move.l    VL4IRQ,a0               get ram based address into a0
0000046C  0070      
0000046E  4E90       117                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
00000470  4CDF 7FFF  118                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000474  4E73       119                   rte
                     120   
                     121   * Trace trap Handler
                     122   
                     123   Level5RamISR
                     124   *
                     125   **         Copy 68000 registers from debug monitor Variables,
                     126   *
                     127   *
00000476  23FC 0000  128                   move.l    #1,_Trace              switch on Trace Mode
0000047A  0001 0803 
0000047E  00D8      
00000480  13FC 0000  129                   move.b    #$0,$0040000A          turn off a trace exception so we don't when generate a trace when disassembling instruction in the register dump (disassembling causes access to use program)
00000484  0040 000A 
00000488  33DF 0803  130                   move.w    (sp)+,_SR              get at the users status register pointed to by stack pointer and copy
0000048C  012C      
0000048E  23DF 0803  131                   move.l    (sp)+,_PC              get at the users program counter and copy
00000492  0120      
                     132   *
00000494  23CF 0803  133                   move.l    SP,_SSP                copy system stack pointer to debug monitor variable
00000498  0124      
0000049A  23C0 0803  134                   move.l    d0,_d0
0000049E  00E4      
000004A0  23C1 0803  135                   move.l    d1,_d1
000004A4  00E8      
000004A6  23C2 0803  136                   move.l    d2,_d2
000004AA  00EC      
000004AC  23C3 0803  137                   move.l    d3,_d3
000004B0  00F0      
000004B2  23C4 0803  138                   move.l    d4,_d4
000004B6  00F4      
000004B8  23C5 0803  139                   move.l    d5,_d5
000004BC  00F8      
000004BE  23C6 0803  140                   move.l    d6,_d6
000004C2  00FC      
000004C4  23C7 0803  141                   move.l    d7,_d7
000004C8  0100      
                     142   *
000004CA  23C8 0803  143                   move.l    a0,_a0
000004CE  0104      
000004D0  23C9 0803  144                   move.l    a1,_a1
000004D4  0108      
000004D6  23CA 0803  145                   move.l    a2,_a2
000004DA  010C      
000004DC  23CB 0803  146                   move.l    a3,_a3
000004E0  0110      
000004E2  23CC 0803  147                   move.l    a4,_a4
000004E6  0114      
000004E8  23CD 0803  148                   move.l    a5,_a5
000004EC  0118      
000004EE  23CE 0803  149                   move.l    a6,_a6
000004F2  011C      
000004F4  4E68       150                   move.l    usp,a0
000004F6  23C8 0803  151                   move.l    a0,_USP
000004FA  0128      
                     152   *
000004FC  2079 0803  153                   move.l    VL5IRQ,a0              get ram based address into a0, trace exception for next instruction will be generated in Menu SPACE command
00000500  0074      
00000502  4E90       154                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     155   
                     156   ** After trace, reload 68000 registers with new values before continuing
                     157   
00000504  2039 0803  158                   move.l   _d0,d0
00000508  00E4      
0000050A  2239 0803  159                   move.l   _d1,d1
0000050E  00E8      
00000510  2439 0803  160                   move.l   _d2,d2
00000514  00EC      
00000516  2639 0803  161                   move.l   _d3,d3
0000051A  00F0      
0000051C  2839 0803  162                   move.l   _d4,d4
00000520  00F4      
00000522  2A39 0803  163                   move.l   _d5,d5
00000526  00F8      
00000528  2C39 0803  164                   move.l   _d6,d6
0000052C  00FC      
0000052E  2E39 0803  165                   move.l   _d7,d7
00000532  0100      
                     166   
00000534  2079 0803  167                   move.l   _USP,a0
00000538  0128      
0000053A  4E60       168                   move.l   a0,USP                     load user stack pointer
0000053C  2079 0803  169                   move.l   _a0,a0
00000540  0104      
00000542  2279 0803  170                   move.l   _a1,a1
00000546  0108      
00000548  2479 0803  171                   move.l   _a2,a2
0000054C  010C      
0000054E  2679 0803  172                   move.l   _a3,a3
00000552  0110      
00000554  2879 0803  173                   move.l   _a4,a4
00000558  0114      
0000055A  2A79 0803  174                   move.l   _a5,a5
0000055E  0118      
00000560  2C79 0803  175                   move.l   _a6,a6
00000564  011C      
                     176   
00000566  2E79 0803  177                   move.l   _SSP,sp
0000056A  0124      
0000056C  2F39 0803  178                   move.l   _PC,-(sp)
00000570  0120      
00000572  3F39 0803  179                   move.w   _SR,-(sp)
00000576  012C      
00000578  11F8 0074  180                   move.b    $00000074,$0	          read trace exception vector after accessing disassembly to reset the trace request causes by disassembling program above
0000057C  0000      
0000057E  4E73       181                   rte
                     182   
                     183   * address trap handler
                     184   
00000580  48E7 FFFE  185   Level6RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000584  2079 0803  186                   move.l    VL6IRQ,a0               get ram based address into a0
00000588  0078      
0000058A  4E90       187                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000058C  4CDF 7FFF  188                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000590  4E73       189                   rte
                     190   
00000592  48E7 FFFE  191   Level7RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000596  2079 0803  192                   move.l    VL7IRQ,a0               get ram based address into a0
0000059A  007C      
0000059C  4E90       193                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000059E  4CDF 7FFF  194                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005A2  4E73       195                   rte
                     196   
                     197   
                     198   ********************************************************************************************************
                     199   * Ram based Trap handler and other exeception handler code
                     200   *********************************************************************************************************
                     201   
000005A4  48E7 FFFE  202   Trap0RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005A8  2079 0803  203                   move.l    VTrap0,a0                get ram based address into a0
000005AC  0080      
000005AE  4E90       204                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000005B0  4CDF 7FFF  205                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005B4  4E73       206                   rte
                     207   
000005B6  48E7 FFFE  208   Trap1RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005BA  2079 0803  209                   move.l    VTrap1,a0                get ram based address into a0
000005BE  0084      
000005C0  4E90       210                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000005C2  4CDF 7FFF  211                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005C6  4E73       212                   rte
                     213   
000005C8  48E7 FFFE  214   Trap2RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005CC  2079 0803  215                   move.l    VTrap2,a0                get ram based address into a0
000005D0  0088      
000005D2  4E90       216                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000005D4  4CDF 7FFF  217                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005D8  4E73       218                   rte
                     219   
000005DA  48E7 FFFE  220   Trap3RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005DE  2079 0803  221                   move.l    VTrap3,a0                get ram based address into a0
000005E2  008C      
000005E4  4E90       222                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000005E6  4CDF 7FFF  223                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005EA  4E73       224                   rte
                     225   
000005EC  48E7 FFFE  226   Trap4RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005F0  2079 0803  227                   move.l    VTrap4,a0                get ram based address into a0
000005F4  0090      
000005F6  4E90       228                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000005F8  4CDF 7FFF  229                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005FC  4E73       230                   rte
                     231   
000005FE  48E7 FFFE  232   Trap5RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000602  2079 0803  233                   move.l    VTrap5,a0                get ram based address into a0
00000606  0094      
00000608  4E90       234                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000060A  4CDF 7FFF  235                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000060E  4E73       236                   rte
                     237   
00000610  48E7 FFFE  238   Trap6RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000614  2079 0803  239                   move.l    VTrap6,a0                get ram based address into a0
00000618  0098      
0000061A  4E90       240                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000061C  4CDF 7FFF  241                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000620  4E73       242                   rte
                     243   
00000622  48E7 FFFE  244   Trap7RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000626  2079 0803  245                   move.l    VTrap7,a0                get ram based address into a0
0000062A  009C      
0000062C  4E90       246                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000062E  4CDF 7FFF  247                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000632  4E73       248                   rte
                     249   
00000634  48E7 FFFE  250   Trap8RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000638  2079 0803  251                   move.l    VTrap8,a0                get ram based address into a0
0000063C  00A0      
0000063E  4E90       252                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000640  4CDF 7FFF  253                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000644  4E73       254                   rte
                     255   
00000646  48E7 FFFE  256   Trap9RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000064A  2079 0803  257                   move.l    VTrap9,a0                get ram based address into a0
0000064E  00A4      
00000650  4E90       258                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000652  4CDF 7FFF  259                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000656  4E73       260                   rte
                     261   
00000658  48E7 FFFE  262   Trap10RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000065C  2079 0803  263                   move.l    VTrap10,a0                get ram based address into a0
00000660  00A8      
00000662  4E90       264                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000664  4CDF 7FFF  265                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000668  4E73       266                   rte
                     267   
0000066A  48E7 FFFE  268   Trap11RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000066E  2079 0803  269                   move.l    VTrap11,a0                get ram based address into a0
00000672  00AC      
00000674  4E90       270                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000676  4CDF 7FFF  271                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000067A  4E73       272                   rte
                     273   
0000067C  48E7 FFFE  274   Trap12RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000680  2079 0803  275                   move.l    VTrap12,a0                get ram based address into a0
00000684  00B0      
00000686  4E90       276                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000688  4CDF 7FFF  277                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000068C  4E73       278                   rte
                     279   
0000068E  48E7 FFFE  280   Trap13RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000692  2079 0803  281                   move.l    VTrap13,a0                get ram based address into a0
00000696  00B4      
00000698  4E90       282                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000069A  4CDF 7FFF  283                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000069E  4E73       284                   rte
                     285   
                     286   Trap14RamISR    ;Break Point Handler
                     287   *
                     288   **         Copy 68000 registers from debug monitor Variables
                     289   *
000006A0  23FC 0000  290                   move.l    #1,_Trace      switch on Trace Mode
000006A4  0001 0803 
000006A8  00D8      
000006AA  33DF 0803  291                   move.w    (sp)+,_SR       get at the users status register pointed to by stack pointer and copy
000006AE  012C      
000006B0  23DF 0803  292                   move.l    (sp)+,_PC      get at the users program counter and copy
000006B4  0120      
                     293   *
000006B6  23C0 0803  294                   move.l    d0,_d0
000006BA  00E4      
000006BC  23C1 0803  295                   move.l    d1,_d1
000006C0  00E8      
000006C2  23C2 0803  296                   move.l    d2,_d2
000006C6  00EC      
000006C8  23C3 0803  297                   move.l    d3,_d3
000006CC  00F0      
000006CE  23C4 0803  298                   move.l    d4,_d4
000006D2  00F4      
000006D4  23C5 0803  299                   move.l    d5,_d5
000006D8  00F8      
000006DA  23C6 0803  300                   move.l    d6,_d6
000006DE  00FC      
000006E0  23C7 0803  301                   move.l    d7,_d7
000006E4  0100      
                     302   *
000006E6  23C8 0803  303                   move.l    a0,_a0
000006EA  0104      
000006EC  23C9 0803  304                   move.l    a1,_a1
000006F0  0108      
000006F2  23CA 0803  305                   move.l    a2,_a2
000006F6  010C      
000006F8  23CB 0803  306                   move.l    a3,_a3
000006FC  0110      
000006FE  23CC 0803  307                   move.l    a4,_a4
00000702  0114      
00000704  23CD 0803  308                   move.l    a5,_a5
00000708  0118      
0000070A  23CE 0803  309                   move.l    a6,_a6
0000070E  011C      
00000710  4E68       310                   move.l    USP,a0
00000712  23C8 0803  311                   move.l    a0,_USP
00000716  0128      
                     312   *
00000718  2079 0803  313                   move.l    VTrap14,a0             get ram based address into a0
0000071C  00B8      
0000071E  4E90       314                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     315   
                     316   ** After breakpoint reload 68000 registers with new values before continuing
                     317   
                     318   *                move.b    #$ff,$0040000A     generate a trace exception for the next instruction
00000720  2039 0803  319                   move.l   _d0,d0
00000724  00E4      
00000726  2239 0803  320                   move.l   _d1,d1
0000072A  00E8      
0000072C  2439 0803  321                   move.l   _d2,d2
00000730  00EC      
00000732  2639 0803  322                   move.l   _d3,d3
00000736  00F0      
00000738  2839 0803  323                   move.l   _d4,d4
0000073C  00F4      
0000073E  2A39 0803  324                   move.l   _d5,d5
00000742  00F8      
00000744  2C39 0803  325                   move.l   _d6,d6
00000748  00FC      
0000074A  2E39 0803  326                   move.l   _d7,d7
0000074E  0100      
                     327   
00000750  2079 0803  328                   move.l   _USP,a0
00000754  0128      
00000756  4E60       329                   move.l   a0,USP        load user stack pointer A7
00000758  2079 0803  330                   move.l   _a0,a0
0000075C  0104      
0000075E  2279 0803  331                   move.l   _a1,a1
00000762  0108      
00000764  2479 0803  332                   move.l   _a2,a2
00000768  010C      
0000076A  2679 0803  333                   move.l   _a3,a3
0000076E  0110      
00000770  2879 0803  334                   move.l   _a4,a4
00000774  0114      
00000776  2A79 0803  335                   move.l   _a5,a5
0000077A  0118      
0000077C  2C79 0803  336                   move.l   _a6,a6
00000780  011C      
                     337   
00000782  2F39 0803  338                   move.l   _PC,-(sp)
00000786  0120      
00000788  3F39 0803  339                   move.w   _SR,-(sp)
0000078C  012C      
0000078E  4E73       340                   rte
                     341   
00000790  4EF9 0000  342   Trap15RamISR    jmp     _CallDebugMonitor
00000794  1DA8      
                     343   *                movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
                     344   *                move.l    VTrap15,a0                get ram based address into a0
                     345   *                jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
                     346   *                movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
                     347   *                rte
                     348   
                     349   *********************************************************************************************************
                     350   *Default exception handler for everything without a specific handler
                     351   *********************************************************************************************************
                     352   
                     353   *
                     354   **              Jump here for each unhandled exception
                     355   **              If you need to, MAKE SURE YOU SAVE ALL IMPORTANT REGISTERS AND RESTORE THEM BEFORE RETURNING (IF APPROPRIATE)
                     356   *
                     357   
00000796  48E7 FFFE  358   E_BErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000079A  2079 0803  359                   move.l    VBusError,a0            get ram based address into a0
0000079E  0008      
000007A0  4E90       360                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000007A2  4CDF 7FFF  361                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000007A6  4E73       362                   rte
000007A8  48E7 FFFE  363   E_AErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000007AC  2079 0803  364                   move.l    VAddressError,a0        get ram based address into a0
000007B0  000C      
000007B2  4E90       365                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000007B4  4CDF 7FFF  366                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000007B8  4E73       367                   rte
000007BA  48E7 FFFE  368   E_IInst         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000007BE  2079 0803  369                   move.l    VIllegalInstr,a0        get ram based address into a0
000007C2  0010      
000007C4  4E90       370                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000007C6  4CDF 7FFF  371                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000007CA  4E73       372                   rte
000007CC  48E7 FFFE  373   E_DZero         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000007D0  2079 0803  374                   move.l    VDividebyZero,a0        get ram based address into a0
000007D4  0014      
000007D6  4E90       375                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000007D8  4CDF 7FFF  376                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000007DC  4E73       377                   rte
000007DE  48E7 FFFE  378   E_Check         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000007E2  2079 0803  379                   move.l    VCheck,a0               get ram based address into a0
000007E6  0018      
000007E8  4E90       380                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000007EA  4CDF 7FFF  381                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000007EE  4E73       382                   rte
000007F0  48E7 FFFE  383   E_Trapv         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000007F4  2079 0803  384                   move.l    VTrapV,a0               get ram based address into a0
000007F8  001C      
000007FA  4E90       385                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000007FC  4CDF 7FFF  386                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000800  4E73       387                   rte
00000802  48E7 FFFE  388   E_Priv          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000806  2079 0803  389                   move.l    VPrivilege,a0           get ram based address into a0
0000080A  0020      
0000080C  4E90       390                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000080E  4CDF 7FFF  391                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000812  4E73       392                   rte
00000814  48E7 FFFE  393   E_Trace         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000818  2079 0803  394                   move.l    VTrace,a0               get ram based address into a0
0000081C  0024      
0000081E  4E90       395                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000820  4CDF 7FFF  396                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000824  4E73       397                   rte
00000826  48E7 FFFE  398   E_1010          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000082A  2079 0803  399                   move.l    VLine1010emul,a0        get ram based address into a0
0000082E  0028      
00000830  4E90       400                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000832  4CDF 7FFF  401                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000836  4E73       402                   rte
00000838  48E7 FFFE  403   E_1111          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000083C  2079 0803  404                   move.l    VLine1111emul,a0        get ram based address into a0
00000840  002C      
00000842  4E90       405                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000844  4CDF 7FFF  406                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000848  4E73       407                   rte
                     408   E_Unnas1
                     409   E_Unnas2
                     410   E_Unnas3
                     411   E_UnitI
                     412   E_Unnas4
                     413   E_Unnas5
                     414   E_Unnas6
                     415   E_Unnas7
                     416   E_Unnas8
                     417   E_Unnas9
                     418   E_Unnas10
                     419   E_Unnas11
                     420   E_Spuri
0000084A  60FE       421   _stop            bra _stop                         stop
                     422   ***************************************************************************************************
                     423   * Go() function in debug monitor
                     424   ***************************************************************************************************
                     425   _go
0000084C  2E79 0803  426                   move.l   _SSP,a7        load system stack pointer (remember we are in supervisor mode when running this so a7 is the System stack pointer)
00000850  0124      
00000852  2F39 0803  427                   move.l   _PC,-(sp)      copy debug monitor PC variable to the stack
00000856  0120      
00000858  3F39 0803  428                   move.w   _SR,-(sp)      copy debug monitor status reg to the stack
0000085C  012C      
                     429   
0000085E  1038 0078  430                   move.b   $00000078,d0  remove any spurious address exception arising after power on
00000862  2039 0803  431                   move.l   _d0,d0
00000866  00E4      
00000868  2239 0803  432                   move.l   _d1,d1
0000086C  00E8      
0000086E  2439 0803  433                   move.l   _d2,d2
00000872  00EC      
00000874  2639 0803  434                   move.l   _d3,d3
00000878  00F0      
0000087A  2839 0803  435                   move.l   _d4,d4
0000087E  00F4      
00000880  2A39 0803  436                   move.l   _d5,d5
00000884  00F8      
00000886  2C39 0803  437                   move.l   _d6,d6
0000088A  00FC      
0000088C  2E39 0803  438                   move.l   _d7,d7
00000890  0100      
                     439   
00000892  2079 0803  440                   move.l   _USP,a0
00000896  0128      
00000898  4E60       441                   move.l   a0,USP        load user stack pointer (remember we are in supervisor mode when running this, so a7 is the System stack pointer)
0000089A  2079 0803  442                   move.l   _a0,a0
0000089E  0104      
000008A0  2279 0803  443                   move.l   _a1,a1
000008A4  0108      
000008A6  2479 0803  444                   move.l   _a2,a2
000008AA  010C      
000008AC  2679 0803  445                   move.l   _a3,a3
000008B0  0110      
000008B2  2879 0803  446                   move.l   _a4,a4
000008B6  0114      
000008B8  2A79 0803  447                   move.l   _a5,a5
000008BC  0118      
000008BE  2C79 0803  448                   move.l   _a6,a6
000008C2  011C      
000008C4  4E73       449                   rte                    load the status reg and PC from the stack and commence running
                     450                                          *used to be rte but this didn't load the status byte
                     451   
                     452   ; C:\TETRIS_FINAL_AP_V1\PROGRAMS\DEBUGMONITORCODE\M68KDEBUG (NO DISASSEMBLER).C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                     453   ; #include "DebugMonitor.h"
                     454   ; #include "say_phoneme.h"
                     455   ; #include "tetris.h"
                     456   ; // use 08030000 for a system running from sram or 0B000000 for system running from dram
                     457   ; #define StartOfExceptionVectorTable 0x08030000
                     458   ; //#define StartOfExceptionVectorTable 0x0B000000
                     459   ; // use 0C000000 for dram or hex 08040000 for sram
                     460   ; #define TopOfStack 0x08040000
                     461   ; //#define TopOfStack 0x0C000000
                     462   ; /********************************************************************************************
                     463   ; **	speech registers
                     464   ; *********************************************************************************************/
                     465   ; #define phoneme_select            *(volatile unsigned char *)(0x00511000)
                     466   ; #define phoneme_busy              *(volatile unsigned char *)(0x00511001)
                     467   ; /* DO NOT INITIALISE GLOBAL VARIABLES - DO IT in MAIN() */
                     468   ; unsigned int i, x, y, z, PortA_Count;
                     469   ; int     Trace, GoFlag, Echo;                       // used in tracing/single stepping
                     470   ; // 68000 register dump and preintialise value (these can be changed by the user program when it is running, e.g. stack pointer, registers etc
                     471   ; unsigned int d0,d1,d2,d3,d4,d5,d6,d7 ;
                     472   ; unsigned int a0,a1,a2,a3,a4,a5,a6 ;
                     473   ; unsigned int PC, SSP, USP ;
                     474   ; unsigned short int SR;
                     475   ; // Breakpoint variables
                     476   ; unsigned int BreakPointAddress[8];                      //array of 8 breakpoint addresses
                     477   ; unsigned short int BreakPointInstruction[8] ;           // to hold the instruction opcode at the breakpoint
                     478   ; unsigned int BreakPointSetOrCleared[8] ;
                     479   ; unsigned int InstructionSize ;
                     480   ; // watchpoint variables
                     481   ; unsigned int WatchPointAddress[8];                      //array of 8 breakpoint addresses
                     482   ; unsigned int WatchPointSetOrCleared[8] ;
                     483   ; char WatchPointString[8][100] ;
                     484   ; char    TempString[100] ;
                     485   ; void InstallExceptionHandler( void (*function_ptr)(), int level)
                     486   ; {
                     487   _InstallExceptionHandler:
000008C6  4E56 FFFC  488          link      A6,#-4
                     489   ; volatile long int *RamVectorAddress = (volatile long int *)(StartOfExceptionVectorTable) ;   // pointer to the Ram based interrupt vector table created in Cstart in debug monitor
000008CA  2D7C 0803  490          move.l    #134414336,-4(A6)
000008CE  0000 FFFC 
                     491   ; RamVectorAddress[level] = (long int *)(function_ptr);
000008D2  206E FFFC  492          move.l    -4(A6),A0
000008D6  202E 000C  493          move.l    12(A6),D0
000008DA  E588       494          lsl.l     #2,D0
000008DC  21AE 0008  495          move.l    8(A6),0(A0,D0.L)
000008E0  0800      
000008E2  4E5E       496          unlk      A6
000008E4  4E75       497          rts
                     498   ; }
                     499   ; /*
                     500   ; void say_phoneme   (char phoneme_code) {
                     501   ; //you need to write this function		
                     502   ; char busy = 0;
                     503   ; char busy_status = 0;
                     504   ; phoneme_select = phoneme_code;
                     505   ; do {
                     506   ; busy_status = phoneme_busy;
                     507   ; busy = phoneme_busy;
                     508   ; } while (busy);
                     509   ; }
                     510   ; */
                     511   ; void say_phoneme(char phoneme_code) {
                     512   _say_phoneme:
000008E6  4E56 FFFC  513          link      A6,#-4
                     514   ; char busy_flag;
                     515   ; phoneme_select = phoneme_code;
000008EA  13EE 000B  516          move.b    11(A6),5312512
000008EE  0051 1000 
                     517   ; do {
                     518   say_phoneme_1:
                     519   ; busy_flag = phoneme_busy;
000008F2  1D79 0051  520          move.b    5312513,-1(A6)
000008F6  1001 FFFF 
000008FA  66F6       521          bne       say_phoneme_1
000008FC  4E5E       522          unlk      A6
000008FE  4E75       523          rts
                     524   ; } while (busy_flag);
                     525   ; }
                     526   ; void say_hello() {
                     527   _say_hello:
                     528   ; talkphonemeHH1();
00000900  4EB9 0000  529          jsr       _talkphonemeHH1
00000904  23B4      
                     530   ; talkphonemeEH();
00000906  4EB9 0000  531          jsr       _talkphonemeEH
0000090A  2348      
                     532   ; talkphonemeLL();
0000090C  4EB9 0000  533          jsr       _talkphonemeLL
00000910  2414      
                     534   ; talkphonemeAX();
00000912  4EB9 0000  535          jsr       _talkphonemeAX
00000916  22DC      
                     536   ; talkphonemeOW();
00000918  4EB9 0000  537          jsr       _talkphonemeOW
0000091C  245C      
                     538   ; endword();
0000091E  4EB9 0000  539          jsr       _endword
00000922  2946      
00000924  4E75       540          rts
                     541   ; }
                     542   ; void say_world() {
                     543   _say_world:
                     544   ; talkphonemeWW();
00000926  4EB9 0000  545          jsr       _talkphonemeWW
0000092A  2510      
                     546   ; talkphonemeER2();
0000092C  4EB9 0000  547          jsr       _talkphonemeER2
00000930  236C      
                     548   ; talkphonemeLL();
00000932  4EB9 0000  549          jsr       _talkphonemeLL
00000936  2414      
                     550   ; talkphonemeDD1();
00000938  4EB9 0000  551          jsr       _talkphonemeDD1
0000093C  2318      
                     552   ; endword();
0000093E  4EB9 0000  553          jsr       _endword
00000942  2946      
00000944  4E75       554          rts
                     555   ; }
                     556   ; /*********************************************************************************************
                     557   ; *Subroutine to initialise the RS232 Port by writing some commands to the internal registers
                     558   ; *********************************************************************************************/
                     559   ; void Init_RS232(void)
                     560   ; {
                     561   _Init_RS232:
                     562   ; RS232_Control = (char)(0x15) ; //  %00010101    divide by 16 clock, set rts low, 8 bits no parity, 1 stop bit transmitter interrupt disabled
00000946  13FC 0015  563          move.b    #21,4194368
0000094A  0040 0040 
                     564   ; RS232_Baud = (char)(0x1) ;      // program baud rate generator 000 = 230k, 001 = 115k, 010 = 57.6k, 011 = 38.4k, 100 = 19.2, all others = 9600
0000094E  13FC 0001  565          move.b    #1,4194372
00000952  0040 0044 
00000956  4E75       566          rts
                     567   ; }
                     568   ; int kbhit(void)
                     569   ; {
                     570   _kbhit:
                     571   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // wait for Rx bit in status register to be '1'
00000958  1039 0040  572          move.b    4194368,D0
0000095C  0040      
0000095E  C03C 0001  573          and.b     #1,D0
00000962  0C00 0001  574          cmp.b     #1,D0
00000966  6604       575          bne.s     kbhit_1
                     576   ; return 1 ;
00000968  7001       577          moveq     #1,D0
0000096A  6002       578          bra.s     kbhit_3
                     579   kbhit_1:
                     580   ; else
                     581   ; return 0 ;
0000096C  4280       582          clr.l     D0
                     583   kbhit_3:
0000096E  4E75       584          rts
                     585   ; }
                     586   ; /*********************************************************************************************************
                     587   ; **  Subroutine to provide a low level output function to 6850 ACIA
                     588   ; **  This routine provides the basic functionality to output a single character to the serial Port
                     589   ; **  to allow the board to communicate with HyperTerminal Program
                     590   ; **
                     591   ; **  NOTE you do not call this function directly, instead you call the normal putchar() function
                     592   ; **  which in turn calls _putch() below). Other functions like puts(), printf() call putchar() so will
                     593   ; **  call _putch() also
                     594   ; *********************************************************************************************************/
                     595   ; int _putch( int c)
                     596   ; {
                     597   __putch:
00000970  4E56 0000  598          link      A6,#0
                     599   ; while(((char)(RS232_Status) & (char)(0x02)) != (char)(0x02))    // wait for Tx bit in status register or 6850 serial comms chip to be '1'
                     600   _putch_1:
00000974  1039 0040  601          move.b    4194368,D0
00000978  0040      
0000097A  C03C 0002  602          and.b     #2,D0
0000097E  0C00 0002  603          cmp.b     #2,D0
00000982  6702       604          beq.s     _putch_3
00000984  60EE       605          bra       _putch_1
                     606   _putch_3:
                     607   ; ;
                     608   ; (char)(RS232_TxData) = ((char)(c) & (char)(0x7f));                      // write to the data register to output the character (mask off bit 8 to keep it 7 bit ASCII)
00000986  202E 0008  609          move.l    8(A6),D0
0000098A  C03C 007F  610          and.b     #127,D0
0000098E  13C0 0040  611          move.b    D0,4194370
00000992  0042      
                     612   ; return c ;                                              // putchar() expects the character to be returned
00000994  202E 0008  613          move.l    8(A6),D0
00000998  4E5E       614          unlk      A6
0000099A  4E75       615          rts
                     616   ; }
                     617   ; /*********************************************************************************************************
                     618   ; **  Subroutine to provide a low level input function to 6850 ACIA
                     619   ; **  This routine provides the basic functionality to input a single character from the serial Port
                     620   ; **  to allow the board to communicate with HyperTerminal Program Keyboard (your PC)
                     621   ; **
                     622   ; **  NOTE you do not call this function directly, instead you call the normal _getch() function
                     623   ; **  which in turn calls _getch() below). Other functions like gets(), scanf() call _getch() so will
                     624   ; **  call _getch() also
                     625   ; *********************************************************************************************************/
                     626   ; int _getch( void )
                     627   ; {
                     628   __getch:
0000099C  2F02       629          move.l    D2,-(A7)
                     630   ; int c ;
                     631   ; while(((char)(RS232_Status) & (char)(0x01)) != (char)(0x01))    // wait for Rx bit in 6850 serial comms chip status register to be '1'
                     632   _getch_1:
0000099E  1039 0040  633          move.b    4194368,D0
000009A2  0040      
000009A4  C03C 0001  634          and.b     #1,D0
000009A8  0C00 0001  635          cmp.b     #1,D0
000009AC  6702       636          beq.s     _getch_3
000009AE  60EE       637          bra       _getch_1
                     638   _getch_3:
                     639   ; ;
                     640   ; c = (RS232_RxData & (char)(0x7f));                   // read received character, mask off top bit and return as 7 bit ASCII character
000009B0  1039 0040  641          move.b    4194370,D0
000009B4  0042      
000009B6  C0BC 0000  642          and.l     #255,D0
000009BA  00FF      
000009BC  C0BC 0000  643          and.l     #127,D0
000009C0  007F      
000009C2  2400       644          move.l    D0,D2
                     645   ; // shall we echo the character? Echo is set to TRUE at reset, but for speed we don't want to echo when downloading code with the 'L' debugger command
                     646   ; if(Echo)
000009C4  4AB9 0803  647          tst.l     _Echo.L
000009C8  00E0      
000009CA  6708       648          beq.s     _getch_4
                     649   ; _putch(c);
000009CC  2F02       650          move.l    D2,-(A7)
000009CE  4EB8 0970  651          jsr       __putch
000009D2  584F       652          addq.w    #4,A7
                     653   _getch_4:
                     654   ; return c ;
000009D4  2002       655          move.l    D2,D0
000009D6  241F       656          move.l    (A7)+,D2
000009D8  4E75       657          rts
                     658   ; }
                     659   ; // flush the input stream for any unread characters
                     660   ; void FlushKeyboard(void)
                     661   ; {
                     662   _FlushKeyboard:
000009DA  4E56 FFFC  663          link      A6,#-4
                     664   ; char c ;
                     665   ; while(1)    {
                     666   FlushKeyboard_1:
                     667   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // if Rx bit in status register is '1'
000009DE  1039 0040  668          move.b    4194368,D0
000009E2  0040      
000009E4  C03C 0001  669          and.b     #1,D0
000009E8  0C00 0001  670          cmp.b     #1,D0
000009EC  6610       671          bne.s     FlushKeyboard_4
                     672   ; c = ((char)(RS232_RxData) & (char)(0x7f)) ;
000009EE  1039 0040  673          move.b    4194370,D0
000009F2  0042      
000009F4  C03C 007F  674          and.b     #127,D0
000009F8  1D40 FFFF  675          move.b    D0,-1(A6)
000009FC  6002       676          bra.s     FlushKeyboard_5
                     677   FlushKeyboard_4:
                     678   ; else
                     679   ; return ;
000009FE  6002       680          bra.s     FlushKeyboard_6
                     681   FlushKeyboard_5:
00000A00  60DC       682          bra       FlushKeyboard_1
                     683   FlushKeyboard_6:
00000A02  4E5E       684          unlk      A6
00000A04  4E75       685          rts
                     686   ; }
                     687   ; }
                     688   ; // converts hex char to 4 bit binary equiv in range 0000-1111 (0-F)
                     689   ; // char assumed to be a valid hex char 0-9, a-f, A-F
                     690   ; char xtod(int c)
                     691   ; {
                     692   _xtod:
00000A06  4E56 0000  693          link      A6,#0
00000A0A  2F02       694          move.l    D2,-(A7)
00000A0C  242E 0008  695          move.l    8(A6),D2
                     696   ; if ((char)(c) <= (char)('9'))
00000A10  0C02 0039  697          cmp.b     #57,D2
00000A14  6E08       698          bgt.s     xtod_1
                     699   ; return c - (char)(0x30);    // 0 - 9 = 0x30 - 0x39 so convert to number by sutracting 0x30
00000A16  1002       700          move.b    D2,D0
00000A18  0400 0030  701          sub.b     #48,D0
00000A1C  6014       702          bra.s     xtod_3
                     703   xtod_1:
                     704   ; else if((char)(c) > (char)('F'))    // assume lower case
00000A1E  0C02 0046  705          cmp.b     #70,D2
00000A22  6F08       706          ble.s     xtod_4
                     707   ; return c - (char)(0x57);    // a-f = 0x61-66 so needs to be converted to 0x0A - 0x0F so subtract 0x57
00000A24  1002       708          move.b    D2,D0
00000A26  0400 0057  709          sub.b     #87,D0
00000A2A  6006       710          bra.s     xtod_3
                     711   xtod_4:
                     712   ; else
                     713   ; return c - (char)(0x37);    // A-F = 0x41-46 so needs to be converted to 0x0A - 0x0F so subtract 0x37
00000A2C  1002       714          move.b    D2,D0
00000A2E  0400 0037  715          sub.b     #55,D0
                     716   xtod_3:
00000A32  241F       717          move.l    (A7)+,D2
00000A34  4E5E       718          unlk      A6
00000A36  4E75       719          rts
                     720   ; }
                     721   ; int Get2HexDigits(char *CheckSumPtr)
                     722   ; {
                     723   _Get2HexDigits:
00000A38  4E56 0000  724          link      A6,#0
00000A3C  2F02       725          move.l    D2,-(A7)
                     726   ; register int i = (xtod(_getch()) << 4) | (xtod(_getch()));
00000A3E  2F00       727          move.l    D0,-(A7)
00000A40  4EB8 099C  728          jsr       __getch
00000A44  2200       729          move.l    D0,D1
00000A46  201F       730          move.l    (A7)+,D0
00000A48  2F01       731          move.l    D1,-(A7)
00000A4A  4EB8 0A06  732          jsr       _xtod
00000A4E  584F       733          addq.w    #4,A7
00000A50  C0BC 0000  734          and.l     #255,D0
00000A54  00FF      
00000A56  E980       735          asl.l     #4,D0
00000A58  2F00       736          move.l    D0,-(A7)
00000A5A  2F01       737          move.l    D1,-(A7)
00000A5C  4EB8 099C  738          jsr       __getch
00000A60  221F       739          move.l    (A7)+,D1
00000A62  2F00       740          move.l    D0,-(A7)
00000A64  4EB8 0A06  741          jsr       _xtod
00000A68  584F       742          addq.w    #4,A7
00000A6A  2200       743          move.l    D0,D1
00000A6C  201F       744          move.l    (A7)+,D0
00000A6E  C2BC 0000  745          and.l     #255,D1
00000A72  00FF      
00000A74  8081       746          or.l      D1,D0
00000A76  2400       747          move.l    D0,D2
                     748   ; if(CheckSumPtr)
00000A78  4AAE 0008  749          tst.l     8(A6)
00000A7C  6706       750          beq.s     Get2HexDigits_1
                     751   ; *CheckSumPtr += i ;
00000A7E  206E 0008  752          move.l    8(A6),A0
00000A82  D510       753          add.b     D2,(A0)
                     754   Get2HexDigits_1:
                     755   ; return i ;
00000A84  2002       756          move.l    D2,D0
00000A86  241F       757          move.l    (A7)+,D2
00000A88  4E5E       758          unlk      A6
00000A8A  4E75       759          rts
                     760   ; }
                     761   ; int Get4HexDigits(char *CheckSumPtr)
                     762   ; {
                     763   _Get4HexDigits:
00000A8C  4E56 0000  764          link      A6,#0
                     765   ; return (Get2HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000A90  2F2E 0008  766          move.l    8(A6),-(A7)
00000A94  4EB8 0A38  767          jsr       _Get2HexDigits
00000A98  584F       768          addq.w    #4,A7
00000A9A  E180       769          asl.l     #8,D0
00000A9C  2F00       770          move.l    D0,-(A7)
00000A9E  2F2E 0008  771          move.l    8(A6),-(A7)
00000AA2  4EB8 0A38  772          jsr       _Get2HexDigits
00000AA6  584F       773          addq.w    #4,A7
00000AA8  2200       774          move.l    D0,D1
00000AAA  201F       775          move.l    (A7)+,D0
00000AAC  8081       776          or.l      D1,D0
00000AAE  4E5E       777          unlk      A6
00000AB0  4E75       778          rts
                     779   ; }
                     780   ; int Get6HexDigits(char *CheckSumPtr)
                     781   ; {
                     782   _Get6HexDigits:
00000AB2  4E56 0000  783          link      A6,#0
                     784   ; return (Get4HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000AB6  2F2E 0008  785          move.l    8(A6),-(A7)
00000ABA  4EB8 0A8C  786          jsr       _Get4HexDigits
00000ABE  584F       787          addq.w    #4,A7
00000AC0  E180       788          asl.l     #8,D0
00000AC2  2F00       789          move.l    D0,-(A7)
00000AC4  2F2E 0008  790          move.l    8(A6),-(A7)
00000AC8  4EB8 0A38  791          jsr       _Get2HexDigits
00000ACC  584F       792          addq.w    #4,A7
00000ACE  2200       793          move.l    D0,D1
00000AD0  201F       794          move.l    (A7)+,D0
00000AD2  8081       795          or.l      D1,D0
00000AD4  4E5E       796          unlk      A6
00000AD6  4E75       797          rts
                     798   ; }
                     799   ; int Get8HexDigits(char *CheckSumPtr)
                     800   ; {
                     801   _Get8HexDigits:
00000AD8  4E56 0000  802          link      A6,#0
                     803   ; return (Get4HexDigits(CheckSumPtr) << 16) | (Get4HexDigits(CheckSumPtr));
00000ADC  2F2E 0008  804          move.l    8(A6),-(A7)
00000AE0  4EB8 0A8C  805          jsr       _Get4HexDigits
00000AE4  584F       806          addq.w    #4,A7
00000AE6  E180       807          asl.l     #8,D0
00000AE8  E180       808          asl.l     #8,D0
00000AEA  2F00       809          move.l    D0,-(A7)
00000AEC  2F2E 0008  810          move.l    8(A6),-(A7)
00000AF0  4EB8 0A8C  811          jsr       _Get4HexDigits
00000AF4  584F       812          addq.w    #4,A7
00000AF6  2200       813          move.l    D0,D1
00000AF8  201F       814          move.l    (A7)+,D0
00000AFA  8081       815          or.l      D1,D0
00000AFC  4E5E       816          unlk      A6
00000AFE  4E75       817          rts
                     818   ; }
                     819   ; void DumpMemory(void)   // simple dump memory fn
                     820   ; {
                     821   _DumpMemory:
00000B00  48E7 3C30  822          movem.l   D2/D3/D4/D5/A2/A3,-(A7)
00000B04  45F9 0000  823          lea       _printf.L,A2
00000B08  3926      
00000B0A  47F9 0000  824          lea       _putch.L,A3
00000B0E  3854      
                     825   ; int i, j ;
                     826   ; unsigned char *RamPtr,c ; // pointer to where the program is download (assumed)
                     827   ; printf("\r\nDump Memory Block: <ESC> to Abort, <SPACE> to Continue") ;
00000B10  4879 0000  828          pea       @m68kde~1_1.L
00000B14  42B2      
00000B16  4E92       829          jsr       (A2)
00000B18  584F       830          addq.w    #4,A7
                     831   ; printf("\r\nEnter Start Address: ") ;
00000B1A  4879 0000  832          pea       @m68kde~1_2.L
00000B1E  42EC      
00000B20  4E92       833          jsr       (A2)
00000B22  584F       834          addq.w    #4,A7
                     835   ; RamPtr = Get8HexDigits(0) ;
00000B24  42A7       836          clr.l     -(A7)
00000B26  4EB8 0AD8  837          jsr       _Get8HexDigits
00000B2A  584F       838          addq.w    #4,A7
00000B2C  2600       839          move.l    D0,D3
                     840   ; while(1)    {
                     841   DumpMemory_1:
                     842   ; for(i = 0; i < 16; i ++)    {
00000B2E  4285       843          clr.l     D5
                     844   DumpMemory_4:
00000B30  0C85 0000  845          cmp.l     #16,D5
00000B34  0010      
00000B36  6C00 0096  846          bge       DumpMemory_6
                     847   ; printf("\r\n%08x ", RamPtr) ;
00000B3A  2F03       848          move.l    D3,-(A7)
00000B3C  4879 0000  849          pea       @m68kde~1_3.L
00000B40  4304      
00000B42  4E92       850          jsr       (A2)
00000B44  504F       851          addq.w    #8,A7
                     852   ; for(j=0; j < 16; j ++)  {
00000B46  4282       853          clr.l     D2
                     854   DumpMemory_7:
00000B48  0C82 0000  855          cmp.l     #16,D2
00000B4C  0010      
00000B4E  6C24       856          bge.s     DumpMemory_9
                     857   ; printf("%02X",RamPtr[j]) ;
00000B50  2043       858          move.l    D3,A0
00000B52  1230 2800  859          move.b    0(A0,D2.L),D1
00000B56  C2BC 0000  860          and.l     #255,D1
00000B5A  00FF      
00000B5C  2F01       861          move.l    D1,-(A7)
00000B5E  4879 0000  862          pea       @m68kde~1_4.L
00000B62  430C      
00000B64  4E92       863          jsr       (A2)
00000B66  504F       864          addq.w    #8,A7
                     865   ; putchar(' ') ;
00000B68  4878 0020  866          pea       32
00000B6C  4E93       867          jsr       (A3)
00000B6E  584F       868          addq.w    #4,A7
00000B70  5282       869          addq.l    #1,D2
00000B72  60D4       870          bra       DumpMemory_7
                     871   DumpMemory_9:
                     872   ; }
                     873   ; // now display the data as ASCII at the end
                     874   ; printf("  ") ;
00000B74  4879 0000  875          pea       @m68kde~1_5.L
00000B78  4312      
00000B7A  4E92       876          jsr       (A2)
00000B7C  584F       877          addq.w    #4,A7
                     878   ; for(j = 0; j < 16; j++) {
00000B7E  4282       879          clr.l     D2
                     880   DumpMemory_10:
00000B80  0C82 0000  881          cmp.l     #16,D2
00000B84  0010      
00000B86  6C00 003A  882          bge       DumpMemory_12
                     883   ; c = ((char)(RamPtr[j]) & 0x7f) ;
00000B8A  2043       884          move.l    D3,A0
00000B8C  1030 2800  885          move.b    0(A0,D2.L),D0
00000B90  C03C 007F  886          and.b     #127,D0
00000B94  1800       887          move.b    D0,D4
                     888   ; if((c > (char)(0x7f)) || (c < ' '))
00000B96  0C04 007F  889          cmp.b     #127,D4
00000B9A  6206       890          bhi.s     DumpMemory_15
00000B9C  0C04 0020  891          cmp.b     #32,D4
00000BA0  640A       892          bhs.s     DumpMemory_13
                     893   DumpMemory_15:
                     894   ; putchar('.') ;
00000BA2  4878 002E  895          pea       46
00000BA6  4E93       896          jsr       (A3)
00000BA8  584F       897          addq.w    #4,A7
00000BAA  6012       898          bra.s     DumpMemory_14
                     899   DumpMemory_13:
                     900   ; else
                     901   ; putchar(RamPtr[j]) ;
00000BAC  2043       902          move.l    D3,A0
00000BAE  1230 2800  903          move.b    0(A0,D2.L),D1
00000BB2  C2BC 0000  904          and.l     #255,D1
00000BB6  00FF      
00000BB8  2F01       905          move.l    D1,-(A7)
00000BBA  4E93       906          jsr       (A3)
00000BBC  584F       907          addq.w    #4,A7
                     908   DumpMemory_14:
00000BBE  5282       909          addq.l    #1,D2
00000BC0  60BE       910          bra       DumpMemory_10
                     911   DumpMemory_12:
                     912   ; }
                     913   ; RamPtr = RamPtr + 16 ;
00000BC2  0683 0000  914          add.l     #16,D3
00000BC6  0010      
00000BC8  5285       915          addq.l    #1,D5
00000BCA  6000 FF64  916          bra       DumpMemory_4
                     917   DumpMemory_6:
                     918   ; }
                     919   ; printf("\r\n") ;
00000BCE  4879 0000  920          pea       @m68kde~1_6.L
00000BD2  4316      
00000BD4  4E92       921          jsr       (A2)
00000BD6  584F       922          addq.w    #4,A7
                     923   ; c = _getch() ;
00000BD8  4EB8 099C  924          jsr       __getch
00000BDC  1800       925          move.b    D0,D4
                     926   ; if(c == 0x1b)          // break on ESC
00000BDE  0C04 001B  927          cmp.b     #27,D4
00000BE2  6602       928          bne.s     DumpMemory_16
                     929   ; break ;
00000BE4  6004       930          bra.s     DumpMemory_3
                     931   DumpMemory_16:
00000BE6  6000 FF46  932          bra       DumpMemory_1
                     933   DumpMemory_3:
00000BEA  4CDF 0C3C  934          movem.l   (A7)+,D2/D3/D4/D5/A2/A3
00000BEE  4E75       935          rts
                     936   ; }
                     937   ; }
                     938   ; void FillMemory()
                     939   ; {
                     940   _FillMemory:
00000BF0  48E7 3820  941          movem.l   D2/D3/D4/A2,-(A7)
00000BF4  45F9 0000  942          lea       _printf.L,A2
00000BF8  3926      
                     943   ; char *StartRamPtr, *EndRamPtr ;
                     944   ; unsigned char FillData ;
                     945   ; printf("\r\nFill Memory Block") ;
00000BFA  4879 0000  946          pea       @m68kde~1_7.L
00000BFE  431A      
00000C00  4E92       947          jsr       (A2)
00000C02  584F       948          addq.w    #4,A7
                     949   ; printf("\r\nEnter Start Address: ") ;
00000C04  4879 0000  950          pea       @m68kde~1_2.L
00000C08  42EC      
00000C0A  4E92       951          jsr       (A2)
00000C0C  584F       952          addq.w    #4,A7
                     953   ; StartRamPtr = Get8HexDigits(0) ;
00000C0E  42A7       954          clr.l     -(A7)
00000C10  4EB8 0AD8  955          jsr       _Get8HexDigits
00000C14  584F       956          addq.w    #4,A7
00000C16  2400       957          move.l    D0,D2
                     958   ; printf("\r\nEnter End Address: ") ;
00000C18  4879 0000  959          pea       @m68kde~1_8.L
00000C1C  432E      
00000C1E  4E92       960          jsr       (A2)
00000C20  584F       961          addq.w    #4,A7
                     962   ; EndRamPtr = Get8HexDigits(0) ;
00000C22  42A7       963          clr.l     -(A7)
00000C24  4EB8 0AD8  964          jsr       _Get8HexDigits
00000C28  584F       965          addq.w    #4,A7
00000C2A  2800       966          move.l    D0,D4
                     967   ; printf("\r\nEnter Fill Data: ") ;
00000C2C  4879 0000  968          pea       @m68kde~1_9.L
00000C30  4344      
00000C32  4E92       969          jsr       (A2)
00000C34  584F       970          addq.w    #4,A7
                     971   ; FillData = Get2HexDigits(0) ;
00000C36  42A7       972          clr.l     -(A7)
00000C38  4EB8 0A38  973          jsr       _Get2HexDigits
00000C3C  584F       974          addq.w    #4,A7
00000C3E  1600       975          move.b    D0,D3
                     976   ; printf("\r\nFilling Addresses [$%08X - $%08X] with $%02X", StartRamPtr, EndRamPtr, FillData) ;
00000C40  C6BC 0000  977          and.l     #255,D3
00000C44  00FF      
00000C46  2F03       978          move.l    D3,-(A7)
00000C48  2F04       979          move.l    D4,-(A7)
00000C4A  2F02       980          move.l    D2,-(A7)
00000C4C  4879 0000  981          pea       @m68kde~1_10.L
00000C50  4358      
00000C52  4E92       982          jsr       (A2)
00000C54  DEFC 0010  983          add.w     #16,A7
                     984   ; while(StartRamPtr < EndRamPtr)
                     985   FillMemory_1:
00000C58  B484       986          cmp.l     D4,D2
00000C5A  6408       987          bhs.s     FillMemory_3
                     988   ; *StartRamPtr++ = FillData ;
00000C5C  2042       989          move.l    D2,A0
00000C5E  5282       990          addq.l    #1,D2
00000C60  1083       991          move.b    D3,(A0)
00000C62  60F4       992          bra       FillMemory_1
                     993   FillMemory_3:
00000C64  4CDF 041C  994          movem.l   (A7)+,D2/D3/D4/A2
00000C68  4E75       995          rts
                     996   ; }
                     997   ; void Load_SRecordFile()
                     998   ; {
                     999   _Load_SRecordFile:
00000C6A  4E56 FFDC 1000          link      A6,#-36
00000C6E  48E7 3F3C 1001          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00000C72  45EE FFFA 1002          lea       -6(A6),A2
00000C76  47F8 0A38 1003          lea       _Get2HexDigits.L,A3
00000C7A  49F9 0000 1004          lea       _printf.L,A4
00000C7E  3926      
                    1005   ; int i, Address, AddressSize, DataByte, NumDataBytesToRead, LoadFailed, FailedAddress, AddressFail, SRecordCount = 0, ByteTotal = 0 ;
00000C80  42AE FFEE 1006          clr.l     -18(A6)
00000C84  3A7C 0000 1007          move.w    #0,A5
                    1008   ; int result, ByteCount ;
                    1009   ; char c, CheckSum, ReadCheckSum, HeaderType ;
                    1010   ; char *RamPtr ;                          // pointer to Memory where downloaded program will be stored
                    1011   ; LoadFailed = 0 ;                        //assume LOAD operation will pass
00000C88  7E00      1012          moveq     #0,D7
                    1013   ; AddressFail = 0 ;
00000C8A  42AE FFEA 1014          clr.l     -22(A6)
                    1015   ; Echo = 0 ;                              // don't echo S records during download
00000C8E  42B9 0803 1016          clr.l     _Echo.L
00000C92  00E0      
                    1017   ; printf("\r\nUse HyperTerminal to Send Text File (.hex)\r\n") ;
00000C94  4879 0000 1018          pea       @m68kde~1_11.L
00000C98  4388      
00000C9A  4E94      1019          jsr       (A4)
00000C9C  584F      1020          addq.w    #4,A7
                    1021   ; while(1)    {
                    1022   Load_SRecordFile_1:
                    1023   ; CheckSum = 0 ;
00000C9E  4212      1024          clr.b     (A2)
                    1025   ; do {
                    1026   Load_SRecordFile_4:
                    1027   ; c = toupper(_getch()) ;
00000CA0  2F00      1028          move.l    D0,-(A7)
00000CA2  4EB8 099C 1029          jsr       __getch
00000CA6  2200      1030          move.l    D0,D1
00000CA8  201F      1031          move.l    (A7)+,D0
00000CAA  2F01      1032          move.l    D1,-(A7)
00000CAC  4EB9 0000 1033          jsr       _toupper
00000CB0  38FA      
00000CB2  584F      1034          addq.w    #4,A7
00000CB4  1C00      1035          move.b    D0,D6
                    1036   ; if(c == 0x1b )      // if break
00000CB6  0C06 001B 1037          cmp.b     #27,D6
00000CBA  6604      1038          bne.s     Load_SRecordFile_6
                    1039   ; return;
00000CBC  6000 0132 1040          bra       Load_SRecordFile_8
                    1041   Load_SRecordFile_6:
00000CC0  0C06 0053 1042          cmp.b     #83,D6
00000CC4  66DA      1043          bne       Load_SRecordFile_4
                    1044   ; }while(c != (char)('S'));   // wait for S start of header
                    1045   ; HeaderType = _getch() ;
00000CC6  4EB8 099C 1046          jsr       __getch
00000CCA  1600      1047          move.b    D0,D3
                    1048   ; if(HeaderType == (char)('0') || HeaderType == (char)('5'))       // ignore s0, s5 records
00000CCC  0C03 0030 1049          cmp.b     #48,D3
00000CD0  6706      1050          beq.s     Load_SRecordFile_11
00000CD2  0C03 0035 1051          cmp.b     #53,D3
00000CD6  6604      1052          bne.s     Load_SRecordFile_9
                    1053   Load_SRecordFile_11:
                    1054   ; continue ;
00000CD8  6000 00D2 1055          bra       Load_SRecordFile_23
                    1056   Load_SRecordFile_9:
                    1057   ; if(HeaderType >= (char)('7'))
00000CDC  0C03 0037 1058          cmp.b     #55,D3
00000CE0  6D04      1059          blt.s     Load_SRecordFile_12
                    1060   ; break ;                 // end load on s7,s8,s9 records
00000CE2  6000 00CC 1061          bra       Load_SRecordFile_3
                    1062   Load_SRecordFile_12:
                    1063   ; // get the bytecount
                    1064   ; ByteCount = Get2HexDigits(&CheckSum) ;
00000CE6  2F0A      1065          move.l    A2,-(A7)
00000CE8  4E93      1066          jsr       (A3)
00000CEA  584F      1067          addq.w    #4,A7
00000CEC  2D40 FFF6 1068          move.l    D0,-10(A6)
                    1069   ; // get the address, 4 digits for s1, 6 digits for s2, and 8 digits for s3 record
                    1070   ; if(HeaderType == (char)('1')) {
00000CF0  0C03 0031 1071          cmp.b     #49,D3
00000CF4  660E      1072          bne.s     Load_SRecordFile_14
                    1073   ; AddressSize = 2 ;       // 2 byte address
00000CF6  7A02      1074          moveq     #2,D5
                    1075   ; Address = Get4HexDigits(&CheckSum);
00000CF8  2F0A      1076          move.l    A2,-(A7)
00000CFA  4EB8 0A8C 1077          jsr       _Get4HexDigits
00000CFE  584F      1078          addq.w    #4,A7
00000D00  2800      1079          move.l    D0,D4
00000D02  6020      1080          bra.s     Load_SRecordFile_17
                    1081   Load_SRecordFile_14:
                    1082   ; }
                    1083   ; else if (HeaderType == (char)('2')) {
00000D04  0C03 0032 1084          cmp.b     #50,D3
00000D08  660E      1085          bne.s     Load_SRecordFile_16
                    1086   ; AddressSize = 3 ;       // 3 byte address
00000D0A  7A03      1087          moveq     #3,D5
                    1088   ; Address = Get6HexDigits(&CheckSum) ;
00000D0C  2F0A      1089          move.l    A2,-(A7)
00000D0E  4EB8 0AB2 1090          jsr       _Get6HexDigits
00000D12  584F      1091          addq.w    #4,A7
00000D14  2800      1092          move.l    D0,D4
00000D16  600C      1093          bra.s     Load_SRecordFile_17
                    1094   Load_SRecordFile_16:
                    1095   ; }
                    1096   ; else    {
                    1097   ; AddressSize = 4 ;       // 4 byte address
00000D18  7A04      1098          moveq     #4,D5
                    1099   ; Address = Get8HexDigits(&CheckSum) ;
00000D1A  2F0A      1100          move.l    A2,-(A7)
00000D1C  4EB8 0AD8 1101          jsr       _Get8HexDigits
00000D20  584F      1102          addq.w    #4,A7
00000D22  2800      1103          move.l    D0,D4
                    1104   Load_SRecordFile_17:
                    1105   ; }
                    1106   ; RamPtr = (char *)(Address) ;                            // point to download area
00000D24  2D44 FFFC 1107          move.l    D4,-4(A6)
                    1108   ; NumDataBytesToRead = ByteCount - AddressSize - 1 ;
00000D28  202E FFF6 1109          move.l    -10(A6),D0
00000D2C  9085      1110          sub.l     D5,D0
00000D2E  5380      1111          subq.l    #1,D0
00000D30  2D40 FFE2 1112          move.l    D0,-30(A6)
                    1113   ; for(i = 0; i < NumDataBytesToRead; i ++) {     // read in remaining data bytes (ignore address and checksum at the end
00000D34  4282      1114          clr.l     D2
                    1115   Load_SRecordFile_18:
00000D36  B4AE FFE2 1116          cmp.l     -30(A6),D2
00000D3A  6C1E      1117          bge.s     Load_SRecordFile_20
                    1118   ; DataByte = Get2HexDigits(&CheckSum) ;
00000D3C  2F0A      1119          move.l    A2,-(A7)
00000D3E  4E93      1120          jsr       (A3)
00000D40  584F      1121          addq.w    #4,A7
00000D42  2D40 FFDE 1122          move.l    D0,-34(A6)
                    1123   ; *RamPtr++ = DataByte ;                      // store downloaded byte in Ram at specified address
00000D46  202E FFDE 1124          move.l    -34(A6),D0
00000D4A  206E FFFC 1125          move.l    -4(A6),A0
00000D4E  52AE FFFC 1126          addq.l    #1,-4(A6)
00000D52  1080      1127          move.b    D0,(A0)
                    1128   ; ByteTotal++;
00000D54  524D      1129          addq.w    #1,A5
00000D56  5282      1130          addq.l    #1,D2
00000D58  60DC      1131          bra       Load_SRecordFile_18
                    1132   Load_SRecordFile_20:
                    1133   ; }
                    1134   ; // checksum is the 1's complement of the sum of all data pairs following the bytecount, i.e. it includes the address and the data itself
                    1135   ; ReadCheckSum = Get2HexDigits(0) ;
00000D5A  42A7      1136          clr.l     -(A7)
00000D5C  4E93      1137          jsr       (A3)
00000D5E  584F      1138          addq.w    #4,A7
00000D60  1D40 FFFB 1139          move.b    D0,-5(A6)
                    1140   ; if((~CheckSum&0Xff) != (ReadCheckSum&0Xff))   {
00000D64  1012      1141          move.b    (A2),D0
00000D66  4600      1142          not.b     D0
00000D68  4880      1143          ext.w     D0
00000D6A  C07C 00FF 1144          and.w     #255,D0
00000D6E  122E FFFB 1145          move.b    -5(A6),D1
00000D72  4881      1146          ext.w     D1
00000D74  C27C 00FF 1147          and.w     #255,D1
00000D78  B041      1148          cmp.w     D1,D0
00000D7A  6708      1149          beq.s     Load_SRecordFile_21
                    1150   ; LoadFailed = 1 ;
00000D7C  7E01      1151          moveq     #1,D7
                    1152   ; FailedAddress = Address ;
00000D7E  2D44 FFE6 1153          move.l    D4,-26(A6)
                    1154   ; break;
00000D82  602C      1155          bra.s     Load_SRecordFile_3
                    1156   Load_SRecordFile_21:
                    1157   ; }
                    1158   ; SRecordCount++ ;
00000D84  52AE FFEE 1159          addq.l    #1,-18(A6)
                    1160   ; // display feedback on progress
                    1161   ; if(SRecordCount % 25 == 0)
00000D88  2F2E FFEE 1162          move.l    -18(A6),-(A7)
00000D8C  4878 0019 1163          pea       25
00000D90  4EB9 0000 1164          jsr       LDIV
00000D94  3788      
00000D96  202F 0004 1165          move.l    4(A7),D0
00000D9A  504F      1166          addq.w    #8,A7
00000D9C  4A80      1167          tst.l     D0
00000D9E  660C      1168          bne.s     Load_SRecordFile_23
                    1169   ; putchar('.') ;
00000DA0  4878 002E 1170          pea       46
00000DA4  4EB9 0000 1171          jsr       _putch
00000DA8  3854      
00000DAA  584F      1172          addq.w    #4,A7
                    1173   Load_SRecordFile_23:
00000DAC  6000 FEF0 1174          bra       Load_SRecordFile_1
                    1175   Load_SRecordFile_3:
                    1176   ; }
                    1177   ; if(LoadFailed == 1) {
00000DB0  0C87 0000 1178          cmp.l     #1,D7
00000DB4  0001      
00000DB6  6610      1179          bne.s     Load_SRecordFile_25
                    1180   ; printf("\r\nLoad Failed at Address = [$%08X]\r\n", FailedAddress) ;
00000DB8  2F2E FFE6 1181          move.l    -26(A6),-(A7)
00000DBC  4879 0000 1182          pea       @m68kde~1_12.L
00000DC0  43B8      
00000DC2  4E94      1183          jsr       (A4)
00000DC4  504F      1184          addq.w    #8,A7
00000DC6  600C      1185          bra.s     Load_SRecordFile_26
                    1186   Load_SRecordFile_25:
                    1187   ; }
                    1188   ; else
                    1189   ; printf("\r\nSuccess: Downloaded %d bytes\r\n", ByteTotal) ;
00000DC8  2F0D      1190          move.l    A5,-(A7)
00000DCA  4879 0000 1191          pea       @m68kde~1_13.L
00000DCE  43DE      
00000DD0  4E94      1192          jsr       (A4)
00000DD2  504F      1193          addq.w    #8,A7
                    1194   Load_SRecordFile_26:
                    1195   ; // pause at the end to wait for download to finish transmitting at the end of S8 etc
                    1196   ; for(i = 0; i < 400000; i ++)
00000DD4  4282      1197          clr.l     D2
                    1198   Load_SRecordFile_27:
00000DD6  0C82 0006 1199          cmp.l     #400000,D2
00000DDA  1A80      
00000DDC  6C04      1200          bge.s     Load_SRecordFile_29
00000DDE  5282      1201          addq.l    #1,D2
00000DE0  60F4      1202          bra       Load_SRecordFile_27
                    1203   Load_SRecordFile_29:
                    1204   ; ;
                    1205   ; FlushKeyboard() ;
00000DE2  4EB8 09DA 1206          jsr       _FlushKeyboard
                    1207   ; Echo = 1;
00000DE6  23FC 0000 1208          move.l    #1,_Echo.L
00000DEA  0001 0803 
00000DEE  00E0      
                    1209   Load_SRecordFile_8:
00000DF0  4CDF 3CFC 1210          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00000DF4  4E5E      1211          unlk      A6
00000DF6  4E75      1212          rts
                    1213   ; }
                    1214   ; void MemoryChange(void)
                    1215   ; {
                    1216   _MemoryChange:
00000DF8  48E7 3820 1217          movem.l   D2/D3/D4/A2,-(A7)
00000DFC  45F9 0000 1218          lea       _printf.L,A2
00000E00  3926      
                    1219   ; unsigned char *RamPtr,c ; // pointer to memory
                    1220   ; int Data ;
                    1221   ; printf("\r\nExamine and Change Memory") ;
00000E02  4879 0000 1222          pea       @m68kde~1_14.L
00000E06  4400      
00000E08  4E92      1223          jsr       (A2)
00000E0A  584F      1224          addq.w    #4,A7
                    1225   ; printf("\r\n<ESC> to Stop, <SPACE> to Advance, '-' to Go Back, <DATA> to change") ;
00000E0C  4879 0000 1226          pea       @m68kde~1_15.L
00000E10  441C      
00000E12  4E92      1227          jsr       (A2)
00000E14  584F      1228          addq.w    #4,A7
                    1229   ; printf("\r\nEnter Address: ") ;
00000E16  4879 0000 1230          pea       @m68kde~1_16.L
00000E1A  4462      
00000E1C  4E92      1231          jsr       (A2)
00000E1E  584F      1232          addq.w    #4,A7
                    1233   ; RamPtr = Get8HexDigits(0) ;
00000E20  42A7      1234          clr.l     -(A7)
00000E22  4EB8 0AD8 1235          jsr       _Get8HexDigits
00000E26  584F      1236          addq.w    #4,A7
00000E28  2600      1237          move.l    D0,D3
                    1238   ; while(1)    {
                    1239   MemoryChange_1:
                    1240   ; printf("\r\n[%08x] : %02x  ", RamPtr, *RamPtr) ;
00000E2A  2043      1241          move.l    D3,A0
00000E2C  1210      1242          move.b    (A0),D1
00000E2E  C2BC 0000 1243          and.l     #255,D1
00000E32  00FF      
00000E34  2F01      1244          move.l    D1,-(A7)
00000E36  2F03      1245          move.l    D3,-(A7)
00000E38  4879 0000 1246          pea       @m68kde~1_17.L
00000E3C  4474      
00000E3E  4E92      1247          jsr       (A2)
00000E40  DEFC 000C 1248          add.w     #12,A7
                    1249   ; c = tolower(_getch()) ;
00000E44  2F00      1250          move.l    D0,-(A7)
00000E46  4EB8 099C 1251          jsr       __getch
00000E4A  2200      1252          move.l    D0,D1
00000E4C  201F      1253          move.l    (A7)+,D0
00000E4E  2F01      1254          move.l    D1,-(A7)
00000E50  4EB9 0000 1255          jsr       _tolower
00000E54  3884      
00000E56  584F      1256          addq.w    #4,A7
00000E58  1400      1257          move.b    D0,D2
                    1258   ; if(c == (char)(0x1b))
00000E5A  0C02 001B 1259          cmp.b     #27,D2
00000E5E  6604      1260          bne.s     MemoryChange_4
                    1261   ; return ;                                // abort on escape
00000E60  6000 0090 1262          bra       MemoryChange_6
                    1263   MemoryChange_4:
                    1264   ; else if((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f')) {  // are we trying to change data at this location by entering a hex char
00000E64  0C02 0030 1265          cmp.b     #48,D2
00000E68  6506      1266          blo.s     MemoryChange_10
00000E6A  0C02 0039 1267          cmp.b     #57,D2
00000E6E  6310      1268          bls.s     MemoryChange_9
                    1269   MemoryChange_10:
00000E70  0C02 0061 1270          cmp.b     #97,D2
00000E74  6500 006E 1271          blo       MemoryChange_7
00000E78  0C02 0066 1272          cmp.b     #102,D2
00000E7C  6200 0066 1273          bhi       MemoryChange_7
                    1274   MemoryChange_9:
                    1275   ; Data = (xtod(c) << 4) | (xtod(_getch()));
00000E80  C4BC 0000 1276          and.l     #255,D2
00000E84  00FF      
00000E86  2F02      1277          move.l    D2,-(A7)
00000E88  4EB8 0A06 1278          jsr       _xtod
00000E8C  584F      1279          addq.w    #4,A7
00000E8E  C0BC 0000 1280          and.l     #255,D0
00000E92  00FF      
00000E94  E980      1281          asl.l     #4,D0
00000E96  2F00      1282          move.l    D0,-(A7)
00000E98  2F01      1283          move.l    D1,-(A7)
00000E9A  4EB8 099C 1284          jsr       __getch
00000E9E  221F      1285          move.l    (A7)+,D1
00000EA0  2F00      1286          move.l    D0,-(A7)
00000EA2  4EB8 0A06 1287          jsr       _xtod
00000EA6  584F      1288          addq.w    #4,A7
00000EA8  2200      1289          move.l    D0,D1
00000EAA  201F      1290          move.l    (A7)+,D0
00000EAC  C2BC 0000 1291          and.l     #255,D1
00000EB0  00FF      
00000EB2  8081      1292          or.l      D1,D0
00000EB4  2800      1293          move.l    D0,D4
                    1294   ; *RamPtr = (char)(Data) ;
00000EB6  2043      1295          move.l    D3,A0
00000EB8  1084      1296          move.b    D4,(A0)
                    1297   ; if(*RamPtr != Data) {
00000EBA  2043      1298          move.l    D3,A0
00000EBC  1010      1299          move.b    (A0),D0
00000EBE  C0BC 0000 1300          and.l     #255,D0
00000EC2  00FF      
00000EC4  B084      1301          cmp.l     D4,D0
00000EC6  671A      1302          beq.s     MemoryChange_11
                    1303   ; printf("\r\nWarning Change Failed: Wrote [%02x], Read [%02x]", Data, *RamPtr) ;
00000EC8  2043      1304          move.l    D3,A0
00000ECA  1210      1305          move.b    (A0),D1
00000ECC  C2BC 0000 1306          and.l     #255,D1
00000ED0  00FF      
00000ED2  2F01      1307          move.l    D1,-(A7)
00000ED4  2F04      1308          move.l    D4,-(A7)
00000ED6  4879 0000 1309          pea       @m68kde~1_18.L
00000EDA  4486      
00000EDC  4E92      1310          jsr       (A2)
00000EDE  DEFC 000C 1311          add.w     #12,A7
                    1312   MemoryChange_11:
00000EE2  6008      1313          bra.s     MemoryChange_13
                    1314   MemoryChange_7:
                    1315   ; }
                    1316   ; }
                    1317   ; else if(c == (char)('-'))
00000EE4  0C02 002D 1318          cmp.b     #45,D2
00000EE8  6602      1319          bne.s     MemoryChange_13
                    1320   ; RamPtr -= 2 ; ;
00000EEA  5583      1321          subq.l    #2,D3
                    1322   MemoryChange_13:
                    1323   ; RamPtr ++ ;
00000EEC  5283      1324          addq.l    #1,D3
00000EEE  6000 FF3A 1325          bra       MemoryChange_1
                    1326   MemoryChange_6:
00000EF2  4CDF 041C 1327          movem.l   (A7)+,D2/D3/D4/A2
00000EF6  4E75      1328          rts
                    1329   ; }
                    1330   ; }
                    1331   ; //////////////////////////////////////////////////////////////////////////////////////////////////
                    1332   ; // IMPORTANT
                    1333   ; // TG68 does not support the Native Trace mode of the original 68000 so tracing
                    1334   ; // has to be done with an interrupt (IRQ Level 6)
                    1335   ; //
                    1336   ; // To allow the 68000 to execute one more instruction after each pseudo trace (IRQ6)
                    1337   ; // the IRQ is removed in hardware once the TG68 reads the IRQ autovector (i.e. acknowledges the IRQ)
                    1338   ; //
                    1339   ; // on return from the IRQ service handler, the first access to the user memory program space
                    1340   ; // generates a fresh IRQ (in hardware) to generate a new trace, this allows the tg68 to
                    1341   ; // execute one more new instruction (without it the TG68 would trace on the same instruction
                    1342   ; // each time and not after the next one). It also means it doesn't simgle step outside the user
                    1343   ; // program area
                    1344   ; //
                    1345   ; // The bottom line is the Trace handler, which includes the Dump registers below
                    1346   ; // cannot access the user memory to display for example the Instruction Opcode or to disassemble etc
                    1347   ; // as this would lead to a new IRQ being reset and the TG68 would trace on same instruction
                    1348   ; // NOT SURE THIS IS TRUE NOW THAT TRACE HANDLER HAS BEEN MODIVIED TO NOT AUTOMATICALLY GENERATE A TRACE EXCEPTION
                    1349   ; // INSTEAD IT IS DONE IN THE 'N' COMMAND FOR NEXT
                    1350   ; /////////////////////////////////////////////////////////////////////////////////////////////////////
                    1351   ; void DumpRegisters()
                    1352   ; {
                    1353   _DumpRegisters:
00000EF8  48E7 3F3C 1354          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00000EFC  45F9 0000 1355          lea       _putch.L,A2
00000F00  3854      
00000F02  47F9 0000 1356          lea       _printf.L,A3
00000F06  3926      
00000F08  49F9 0803 1357          lea       _SR.L,A4
00000F0C  012C      
00000F0E  4BF9 0803 1358          lea       _WatchPointString.L,A5
00000F12  01C2      
                    1359   ; short i, x, j, k ;
                    1360   ; unsigned char c, *BytePointer;
                    1361   ; // buld up strings for displaying watchpoints
                    1362   ; for(x = 0; x < (short)(8); x++)
00000F14  4242      1363          clr.w     D2
                    1364   DumpRegisters_1:
00000F16  0C42 0008 1365          cmp.w     #8,D2
00000F1A  6C00 01C6 1366          bge       DumpRegisters_3
                    1367   ; {
                    1368   ; if(WatchPointSetOrCleared[x] == 1)
00000F1E  48C2      1369          ext.l     D2
00000F20  2002      1370          move.l    D2,D0
00000F22  E588      1371          lsl.l     #2,D0
00000F24  41F9 0803 1372          lea       _WatchPointSetOrCleared.L,A0
00000F28  01A2      
00000F2A  2030 0800 1373          move.l    0(A0,D0.L),D0
00000F2E  0C80 0000 1374          cmp.l     #1,D0
00000F32  0001      
00000F34  6600 0186 1375          bne       DumpRegisters_4
                    1376   ; {
                    1377   ; sprintf(WatchPointString[x], "$%08X  ", WatchPointAddress[x]) ;
00000F38  48C2      1378          ext.l     D2
00000F3A  2202      1379          move.l    D2,D1
00000F3C  E589      1380          lsl.l     #2,D1
00000F3E  41F9 0803 1381          lea       _WatchPointAddress.L,A0
00000F42  0182      
00000F44  2F30 1800 1382          move.l    0(A0,D1.L),-(A7)
00000F48  4879 0000 1383          pea       @m68kde~1_19.L
00000F4C  44BA      
00000F4E  220D      1384          move.l    A5,D1
00000F50  48C2      1385          ext.l     D2
00000F52  2F00      1386          move.l    D0,-(A7)
00000F54  2002      1387          move.l    D2,D0
00000F56  C1FC 0064 1388          muls      #100,D0
00000F5A  D280      1389          add.l     D0,D1
00000F5C  201F      1390          move.l    (A7)+,D0
00000F5E  2F01      1391          move.l    D1,-(A7)
00000F60  4EB9 0000 1392          jsr       _sprintf
00000F64  38B0      
00000F66  DEFC 000C 1393          add.w     #12,A7
                    1394   ; BytePointer = (char *)(WatchPointAddress[x]) ;
00000F6A  48C2      1395          ext.l     D2
00000F6C  2002      1396          move.l    D2,D0
00000F6E  E588      1397          lsl.l     #2,D0
00000F70  41F9 0803 1398          lea       _WatchPointAddress.L,A0
00000F74  0182      
00000F76  2A30 0800 1399          move.l    0(A0,D0.L),D5
                    1400   ; for(j = 0; j < (short)(16); j+=2)
00000F7A  4243      1401          clr.w     D3
                    1402   DumpRegisters_6:
00000F7C  0C43 0010 1403          cmp.w     #16,D3
00000F80  6C00 0082 1404          bge       DumpRegisters_8
                    1405   ; {
                    1406   ; for(k = 0; k < (short)(2); k++)
00000F84  4246      1407          clr.w     D6
                    1408   DumpRegisters_9:
00000F86  0C46 0002 1409          cmp.w     #2,D6
00000F8A  6C00 0052 1410          bge       DumpRegisters_11
                    1411   ; {
                    1412   ; sprintf(TempString, "%02X", BytePointer[j+k]) ;
00000F8E  2045      1413          move.l    D5,A0
00000F90  48C3      1414          ext.l     D3
00000F92  2203      1415          move.l    D3,D1
00000F94  48C6      1416          ext.l     D6
00000F96  D286      1417          add.l     D6,D1
00000F98  1230 1800 1418          move.b    0(A0,D1.L),D1
00000F9C  C2BC 0000 1419          and.l     #255,D1
00000FA0  00FF      
00000FA2  2F01      1420          move.l    D1,-(A7)
00000FA4  4879 0000 1421          pea       @m68kde~1_4.L
00000FA8  430C      
00000FAA  4879 0803 1422          pea       _TempString.L
00000FAE  04E2      
00000FB0  4EB9 0000 1423          jsr       _sprintf
00000FB4  38B0      
00000FB6  DEFC 000C 1424          add.w     #12,A7
                    1425   ; strcat(WatchPointString[x], TempString) ;
00000FBA  4879 0803 1426          pea       _TempString.L
00000FBE  04E2      
00000FC0  220D      1427          move.l    A5,D1
00000FC2  48C2      1428          ext.l     D2
00000FC4  2F00      1429          move.l    D0,-(A7)
00000FC6  2002      1430          move.l    D2,D0
00000FC8  C1FC 0064 1431          muls      #100,D0
00000FCC  D280      1432          add.l     D0,D1
00000FCE  201F      1433          move.l    (A7)+,D0
00000FD0  2F01      1434          move.l    D1,-(A7)
00000FD2  4EB9 0000 1435          jsr       _strcat
00000FD6  38E4      
00000FD8  504F      1436          addq.w    #8,A7
00000FDA  5246      1437          addq.w    #1,D6
00000FDC  60A8      1438          bra       DumpRegisters_9
                    1439   DumpRegisters_11:
                    1440   ; }
                    1441   ; strcat(WatchPointString[x]," ") ;
00000FDE  4879 0000 1442          pea       @m68kde~1_20.L
00000FE2  44C2      
00000FE4  220D      1443          move.l    A5,D1
00000FE6  48C2      1444          ext.l     D2
00000FE8  2F00      1445          move.l    D0,-(A7)
00000FEA  2002      1446          move.l    D2,D0
00000FEC  C1FC 0064 1447          muls      #100,D0
00000FF0  D280      1448          add.l     D0,D1
00000FF2  201F      1449          move.l    (A7)+,D0
00000FF4  2F01      1450          move.l    D1,-(A7)
00000FF6  4EB9 0000 1451          jsr       _strcat
00000FFA  38E4      
00000FFC  504F      1452          addq.w    #8,A7
00000FFE  5443      1453          addq.w    #2,D3
00001000  6000 FF7A 1454          bra       DumpRegisters_6
                    1455   DumpRegisters_8:
                    1456   ; }
                    1457   ; strcat(WatchPointString[x], "  ") ;
00001004  4879 0000 1458          pea       @m68kde~1_5.L
00001008  4312      
0000100A  220D      1459          move.l    A5,D1
0000100C  48C2      1460          ext.l     D2
0000100E  2F00      1461          move.l    D0,-(A7)
00001010  2002      1462          move.l    D2,D0
00001012  C1FC 0064 1463          muls      #100,D0
00001016  D280      1464          add.l     D0,D1
00001018  201F      1465          move.l    (A7)+,D0
0000101A  2F01      1466          move.l    D1,-(A7)
0000101C  4EB9 0000 1467          jsr       _strcat
00001020  38E4      
00001022  504F      1468          addq.w    #8,A7
                    1469   ; BytePointer = (char *)(WatchPointAddress[x]) ;
00001024  48C2      1470          ext.l     D2
00001026  2002      1471          move.l    D2,D0
00001028  E588      1472          lsl.l     #2,D0
0000102A  41F9 0803 1473          lea       _WatchPointAddress.L,A0
0000102E  0182      
00001030  2A30 0800 1474          move.l    0(A0,D0.L),D5
                    1475   ; for(j = 0; j < (short)(16); j++)
00001034  4243      1476          clr.w     D3
                    1477   DumpRegisters_12:
00001036  0C43 0010 1478          cmp.w     #16,D3
0000103A  6C00 007E 1479          bge       DumpRegisters_14
                    1480   ; {
                    1481   ; c = ((char)(BytePointer[j]) & 0x7f) ;
0000103E  2045      1482          move.l    D5,A0
00001040  48C3      1483          ext.l     D3
00001042  1030 3800 1484          move.b    0(A0,D3.L),D0
00001046  C03C 007F 1485          and.b     #127,D0
0000104A  1E00      1486          move.b    D0,D7
                    1487   ; if((c > (char)(0x7f)) || (c < (char)(' ')))
0000104C  0C07 007F 1488          cmp.b     #127,D7
00001050  6206      1489          bhi.s     DumpRegisters_17
00001052  0C07 0020 1490          cmp.b     #32,D7
00001056  6416      1491          bhs.s     DumpRegisters_15
                    1492   DumpRegisters_17:
                    1493   ; sprintf(TempString, ".") ;
00001058  4879 0000 1494          pea       @m68kde~1_21.L
0000105C  44C4      
0000105E  4879 0803 1495          pea       _TempString.L
00001062  04E2      
00001064  4EB9 0000 1496          jsr       _sprintf
00001068  38B0      
0000106A  504F      1497          addq.w    #8,A7
0000106C  6026      1498          bra.s     DumpRegisters_16
                    1499   DumpRegisters_15:
                    1500   ; else
                    1501   ; sprintf(TempString, "%c", BytePointer[j]) ;
0000106E  2045      1502          move.l    D5,A0
00001070  48C3      1503          ext.l     D3
00001072  1230 3800 1504          move.b    0(A0,D3.L),D1
00001076  C2BC 0000 1505          and.l     #255,D1
0000107A  00FF      
0000107C  2F01      1506          move.l    D1,-(A7)
0000107E  4879 0000 1507          pea       @m68kde~1_22.L
00001082  44C6      
00001084  4879 0803 1508          pea       _TempString.L
00001088  04E2      
0000108A  4EB9 0000 1509          jsr       _sprintf
0000108E  38B0      
00001090  DEFC 000C 1510          add.w     #12,A7
                    1511   DumpRegisters_16:
                    1512   ; strcat(WatchPointString[x], TempString) ;
00001094  4879 0803 1513          pea       _TempString.L
00001098  04E2      
0000109A  220D      1514          move.l    A5,D1
0000109C  48C2      1515          ext.l     D2
0000109E  2F00      1516          move.l    D0,-(A7)
000010A0  2002      1517          move.l    D2,D0
000010A2  C1FC 0064 1518          muls      #100,D0
000010A6  D280      1519          add.l     D0,D1
000010A8  201F      1520          move.l    (A7)+,D0
000010AA  2F01      1521          move.l    D1,-(A7)
000010AC  4EB9 0000 1522          jsr       _strcat
000010B0  38E4      
000010B2  504F      1523          addq.w    #8,A7
000010B4  5243      1524          addq.w    #1,D3
000010B6  6000 FF7E 1525          bra       DumpRegisters_12
                    1526   DumpRegisters_14:
000010BA  6020      1527          bra.s     DumpRegisters_5
                    1528   DumpRegisters_4:
                    1529   ; }
                    1530   ; }
                    1531   ; else
                    1532   ; strcpy(WatchPointString[x], "") ;
000010BC  4879 0000 1533          pea       @m68kde~1_23.L
000010C0  44CA      
000010C2  220D      1534          move.l    A5,D1
000010C4  48C2      1535          ext.l     D2
000010C6  2F00      1536          move.l    D0,-(A7)
000010C8  2002      1537          move.l    D2,D0
000010CA  C1FC 0064 1538          muls      #100,D0
000010CE  D280      1539          add.l     D0,D1
000010D0  201F      1540          move.l    (A7)+,D0
000010D2  2F01      1541          move.l    D1,-(A7)
000010D4  4EB9 0000 1542          jsr       _strcpy
000010D8  3766      
000010DA  504F      1543          addq.w    #8,A7
                    1544   DumpRegisters_5:
000010DC  5242      1545          addq.w    #1,D2
000010DE  6000 FE36 1546          bra       DumpRegisters_1
                    1547   DumpRegisters_3:
                    1548   ; }
                    1549   ; printf("\r\n\r\n D0 = $%08X  A0 = $%08X",d0,a0) ;
000010E2  2F39 0803 1550          move.l    _a0.L,-(A7)
000010E6  0104      
000010E8  2F39 0803 1551          move.l    _d0.L,-(A7)
000010EC  00E4      
000010EE  4879 0000 1552          pea       @m68kde~1_24.L
000010F2  44CC      
000010F4  4E93      1553          jsr       (A3)
000010F6  DEFC 000C 1554          add.w     #12,A7
                    1555   ; printf("\r\n D1 = $%08X  A1 = $%08X",d1,a1) ;
000010FA  2F39 0803 1556          move.l    _a1.L,-(A7)
000010FE  0108      
00001100  2F39 0803 1557          move.l    _d1.L,-(A7)
00001104  00E8      
00001106  4879 0000 1558          pea       @m68kde~1_25.L
0000110A  44E8      
0000110C  4E93      1559          jsr       (A3)
0000110E  DEFC 000C 1560          add.w     #12,A7
                    1561   ; printf("\r\n D2 = $%08X  A2 = $%08X",d2,a2) ;
00001112  2F39 0803 1562          move.l    _a2.L,-(A7)
00001116  010C      
00001118  2F39 0803 1563          move.l    _d2.L,-(A7)
0000111C  00EC      
0000111E  4879 0000 1564          pea       @m68kde~1_26.L
00001122  4502      
00001124  4E93      1565          jsr       (A3)
00001126  DEFC 000C 1566          add.w     #12,A7
                    1567   ; printf("\r\n D3 = $%08X  A3 = $%08X",d3,a3) ;
0000112A  2F39 0803 1568          move.l    _a3.L,-(A7)
0000112E  0110      
00001130  2F39 0803 1569          move.l    _d3.L,-(A7)
00001134  00F0      
00001136  4879 0000 1570          pea       @m68kde~1_27.L
0000113A  451C      
0000113C  4E93      1571          jsr       (A3)
0000113E  DEFC 000C 1572          add.w     #12,A7
                    1573   ; printf("\r\n D4 = $%08X  A4 = $%08X",d4,a4) ;
00001142  2F39 0803 1574          move.l    _a4.L,-(A7)
00001146  0114      
00001148  2F39 0803 1575          move.l    _d4.L,-(A7)
0000114C  00F4      
0000114E  4879 0000 1576          pea       @m68kde~1_28.L
00001152  4536      
00001154  4E93      1577          jsr       (A3)
00001156  DEFC 000C 1578          add.w     #12,A7
                    1579   ; printf("\r\n D5 = $%08X  A5 = $%08X",d5,a5) ;
0000115A  2F39 0803 1580          move.l    _a5.L,-(A7)
0000115E  0118      
00001160  2F39 0803 1581          move.l    _d5.L,-(A7)
00001164  00F8      
00001166  4879 0000 1582          pea       @m68kde~1_29.L
0000116A  4550      
0000116C  4E93      1583          jsr       (A3)
0000116E  DEFC 000C 1584          add.w     #12,A7
                    1585   ; printf("\r\n D6 = $%08X  A6 = $%08X",d6,a6) ;
00001172  2F39 0803 1586          move.l    _a6.L,-(A7)
00001176  011C      
00001178  2F39 0803 1587          move.l    _d6.L,-(A7)
0000117C  00FC      
0000117E  4879 0000 1588          pea       @m68kde~1_30.L
00001182  456A      
00001184  4E93      1589          jsr       (A3)
00001186  DEFC 000C 1590          add.w     #12,A7
                    1591   ; printf("\r\n D7 = $%08X  A7 = $%08X",d7,((SR & (unsigned short int)(0x2000)) == ((unsigned short int)(0x2000))) ? SSP : USP) ;
0000118A  3214      1592          move.w    (A4),D1
0000118C  C27C 2000 1593          and.w     #8192,D1
00001190  0C41 2000 1594          cmp.w     #8192,D1
00001194  6608      1595          bne.s     DumpRegisters_18
00001196  2239 0803 1596          move.l    _SSP.L,D1
0000119A  0124      
0000119C  6006      1597          bra.s     DumpRegisters_19
                    1598   DumpRegisters_18:
0000119E  2239 0803 1599          move.l    _USP.L,D1
000011A2  0128      
                    1600   DumpRegisters_19:
000011A4  2F01      1601          move.l    D1,-(A7)
000011A6  2F39 0803 1602          move.l    _d7.L,-(A7)
000011AA  0100      
000011AC  4879 0000 1603          pea       @m68kde~1_31.L
000011B0  4584      
000011B2  4E93      1604          jsr       (A3)
000011B4  DEFC 000C 1605          add.w     #12,A7
                    1606   ; printf("\r\n\r\nUSP = $%08X  (A7) User SP", USP ) ;
000011B8  2F39 0803 1607          move.l    _USP.L,-(A7)
000011BC  0128      
000011BE  4879 0000 1608          pea       @m68kde~1_32.L
000011C2  459E      
000011C4  4E93      1609          jsr       (A3)
000011C6  504F      1610          addq.w    #8,A7
                    1611   ; printf("\r\nSSP = $%08X  (A7) Supervisor SP", SSP) ;
000011C8  2F39 0803 1612          move.l    _SSP.L,-(A7)
000011CC  0124      
000011CE  4879 0000 1613          pea       @m68kde~1_33.L
000011D2  45BC      
000011D4  4E93      1614          jsr       (A3)
000011D6  504F      1615          addq.w    #8,A7
                    1616   ; printf("\r\n SR = $%04X   ",SR) ;
000011D8  3214      1617          move.w    (A4),D1
000011DA  C2BC 0000 1618          and.l     #65535,D1
000011DE  FFFF      
000011E0  2F01      1619          move.l    D1,-(A7)
000011E2  4879 0000 1620          pea       @m68kde~1_34.L
000011E6  45DE      
000011E8  4E93      1621          jsr       (A3)
000011EA  504F      1622          addq.w    #8,A7
                    1623   ; // display the status word in characters etc.
                    1624   ; printf("   [") ;
000011EC  4879 0000 1625          pea       @m68kde~1_35.L
000011F0  45F0      
000011F2  4E93      1626          jsr       (A3)
000011F4  584F      1627          addq.w    #4,A7
                    1628   ; if((SR & (unsigned short int)(0x8000)) == (unsigned short int)(0x8000)) putchar('T') ; else putchar('-') ;      // Trace bit(bit 15)
000011F6  3014      1629          move.w    (A4),D0
000011F8  C07C 8000 1630          and.w     #32768,D0
000011FC  0C40 8000 1631          cmp.w     #32768,D0
00001200  660A      1632          bne.s     DumpRegisters_20
00001202  4878 0054 1633          pea       84
00001206  4E92      1634          jsr       (A2)
00001208  584F      1635          addq.w    #4,A7
0000120A  6008      1636          bra.s     DumpRegisters_21
                    1637   DumpRegisters_20:
0000120C  4878 002D 1638          pea       45
00001210  4E92      1639          jsr       (A2)
00001212  584F      1640          addq.w    #4,A7
                    1641   DumpRegisters_21:
                    1642   ; if((SR & (unsigned short int)(0x2000)) == (unsigned short int)(0x2000)) putchar('S') ; else putchar('U') ;      // supervisor bit  (bit 13)
00001214  3014      1643          move.w    (A4),D0
00001216  C07C 2000 1644          and.w     #8192,D0
0000121A  0C40 2000 1645          cmp.w     #8192,D0
0000121E  660A      1646          bne.s     DumpRegisters_22
00001220  4878 0053 1647          pea       83
00001224  4E92      1648          jsr       (A2)
00001226  584F      1649          addq.w    #4,A7
00001228  6008      1650          bra.s     DumpRegisters_23
                    1651   DumpRegisters_22:
0000122A  4878 0055 1652          pea       85
0000122E  4E92      1653          jsr       (A2)
00001230  584F      1654          addq.w    #4,A7
                    1655   DumpRegisters_23:
                    1656   ; if((SR & (unsigned short int)(0x0400)) == (unsigned short int)(0x0400)) putchar('1') ; else putchar('0') ;      // IRQ2 Bit (bit 10)
00001232  3014      1657          move.w    (A4),D0
00001234  C07C 0400 1658          and.w     #1024,D0
00001238  0C40 0400 1659          cmp.w     #1024,D0
0000123C  660A      1660          bne.s     DumpRegisters_24
0000123E  4878 0031 1661          pea       49
00001242  4E92      1662          jsr       (A2)
00001244  584F      1663          addq.w    #4,A7
00001246  6008      1664          bra.s     DumpRegisters_25
                    1665   DumpRegisters_24:
00001248  4878 0030 1666          pea       48
0000124C  4E92      1667          jsr       (A2)
0000124E  584F      1668          addq.w    #4,A7
                    1669   DumpRegisters_25:
                    1670   ; if((SR & (unsigned short int)(0x0200)) == (unsigned short int)(0x0200)) putchar('1') ; else putchar('0') ;      // IRQ1 Bit (bit 9)
00001250  3014      1671          move.w    (A4),D0
00001252  C07C 0200 1672          and.w     #512,D0
00001256  0C40 0200 1673          cmp.w     #512,D0
0000125A  660A      1674          bne.s     DumpRegisters_26
0000125C  4878 0031 1675          pea       49
00001260  4E92      1676          jsr       (A2)
00001262  584F      1677          addq.w    #4,A7
00001264  6008      1678          bra.s     DumpRegisters_27
                    1679   DumpRegisters_26:
00001266  4878 0030 1680          pea       48
0000126A  4E92      1681          jsr       (A2)
0000126C  584F      1682          addq.w    #4,A7
                    1683   DumpRegisters_27:
                    1684   ; if((SR & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100)) putchar('1') ; else putchar('0') ;      // IRQ0 Bit (bit 8)
0000126E  3014      1685          move.w    (A4),D0
00001270  C07C 0100 1686          and.w     #256,D0
00001274  0C40 0100 1687          cmp.w     #256,D0
00001278  660A      1688          bne.s     DumpRegisters_28
0000127A  4878 0031 1689          pea       49
0000127E  4E92      1690          jsr       (A2)
00001280  584F      1691          addq.w    #4,A7
00001282  6008      1692          bra.s     DumpRegisters_29
                    1693   DumpRegisters_28:
00001284  4878 0030 1694          pea       48
00001288  4E92      1695          jsr       (A2)
0000128A  584F      1696          addq.w    #4,A7
                    1697   DumpRegisters_29:
                    1698   ; if((SR & (unsigned short int)(0x0010)) == (unsigned short int)(0x0010)) putchar('X') ; else putchar('-') ;      // X Bit (bit 4)
0000128C  3014      1699          move.w    (A4),D0
0000128E  C07C 0010 1700          and.w     #16,D0
00001292  0C40 0010 1701          cmp.w     #16,D0
00001296  660A      1702          bne.s     DumpRegisters_30
00001298  4878 0058 1703          pea       88
0000129C  4E92      1704          jsr       (A2)
0000129E  584F      1705          addq.w    #4,A7
000012A0  6008      1706          bra.s     DumpRegisters_31
                    1707   DumpRegisters_30:
000012A2  4878 002D 1708          pea       45
000012A6  4E92      1709          jsr       (A2)
000012A8  584F      1710          addq.w    #4,A7
                    1711   DumpRegisters_31:
                    1712   ; if((SR & (unsigned short int)(0x0008)) == (unsigned short int)(0x0008)) putchar('N') ; else putchar('-') ;      // N Bit (bit 3)
000012AA  3014      1713          move.w    (A4),D0
000012AC  C07C 0008 1714          and.w     #8,D0
000012B0  0C40 0008 1715          cmp.w     #8,D0
000012B4  660A      1716          bne.s     DumpRegisters_32
000012B6  4878 004E 1717          pea       78
000012BA  4E92      1718          jsr       (A2)
000012BC  584F      1719          addq.w    #4,A7
000012BE  6008      1720          bra.s     DumpRegisters_33
                    1721   DumpRegisters_32:
000012C0  4878 002D 1722          pea       45
000012C4  4E92      1723          jsr       (A2)
000012C6  584F      1724          addq.w    #4,A7
                    1725   DumpRegisters_33:
                    1726   ; if((SR & (unsigned short int)(0x0004)) == (unsigned short int)(0x0004)) putchar('Z') ; else putchar('-') ;      // Z Bit (bit 2)
000012C8  3014      1727          move.w    (A4),D0
000012CA  C07C 0004 1728          and.w     #4,D0
000012CE  0C40 0004 1729          cmp.w     #4,D0
000012D2  660A      1730          bne.s     DumpRegisters_34
000012D4  4878 005A 1731          pea       90
000012D8  4E92      1732          jsr       (A2)
000012DA  584F      1733          addq.w    #4,A7
000012DC  6008      1734          bra.s     DumpRegisters_35
                    1735   DumpRegisters_34:
000012DE  4878 002D 1736          pea       45
000012E2  4E92      1737          jsr       (A2)
000012E4  584F      1738          addq.w    #4,A7
                    1739   DumpRegisters_35:
                    1740   ; if((SR & (unsigned short int)(0x0002)) == (unsigned short int)(0x0002)) putchar('V') ; else putchar('-') ;      // V Bit (bit 1)
000012E6  3014      1741          move.w    (A4),D0
000012E8  C07C 0002 1742          and.w     #2,D0
000012EC  0C40 0002 1743          cmp.w     #2,D0
000012F0  660A      1744          bne.s     DumpRegisters_36
000012F2  4878 0056 1745          pea       86
000012F6  4E92      1746          jsr       (A2)
000012F8  584F      1747          addq.w    #4,A7
000012FA  6008      1748          bra.s     DumpRegisters_37
                    1749   DumpRegisters_36:
000012FC  4878 002D 1750          pea       45
00001300  4E92      1751          jsr       (A2)
00001302  584F      1752          addq.w    #4,A7
                    1753   DumpRegisters_37:
                    1754   ; if((SR & (unsigned short int)(0x0001)) == (unsigned short int)(0x0001)) putchar('C') ; else putchar('-') ;      // C Bit (bit 0)
00001304  3014      1755          move.w    (A4),D0
00001306  C07C 0001 1756          and.w     #1,D0
0000130A  0C40 0001 1757          cmp.w     #1,D0
0000130E  660A      1758          bne.s     DumpRegisters_38
00001310  4878 0043 1759          pea       67
00001314  4E92      1760          jsr       (A2)
00001316  584F      1761          addq.w    #4,A7
00001318  6008      1762          bra.s     DumpRegisters_39
                    1763   DumpRegisters_38:
0000131A  4878 002D 1764          pea       45
0000131E  4E92      1765          jsr       (A2)
00001320  584F      1766          addq.w    #4,A7
                    1767   DumpRegisters_39:
                    1768   ; putchar(']') ;
00001322  4878 005D 1769          pea       93
00001326  4E92      1770          jsr       (A2)
00001328  584F      1771          addq.w    #4,A7
                    1772   ; printf("\r\n PC = $%08X  ", PC) ;
0000132A  2F39 0803 1773          move.l    _PC.L,-(A7)
0000132E  0120      
00001330  4879 0000 1774          pea       @m68kde~1_36.L
00001334  45F6      
00001336  4E93      1775          jsr       (A3)
00001338  504F      1776          addq.w    #8,A7
                    1777   ; if(*(unsigned short int *)(PC) == 0x4e4e)
0000133A  2039 0803 1778          move.l    _PC.L,D0
0000133E  0120      
00001340  2040      1779          move.l    D0,A0
00001342  3010      1780          move.w    (A0),D0
00001344  0C40 4E4E 1781          cmp.w     #20046,D0
00001348  660A      1782          bne.s     DumpRegisters_40
                    1783   ; printf("[@ BREAKPOINT]") ;
0000134A  4879 0000 1784          pea       @m68kde~1_37.L
0000134E  4606      
00001350  4E93      1785          jsr       (A3)
00001352  584F      1786          addq.w    #4,A7
                    1787   DumpRegisters_40:
                    1788   ; printf("\r\n") ;
00001354  4879 0000 1789          pea       @m68kde~1_6.L
00001358  4316      
0000135A  4E93      1790          jsr       (A3)
0000135C  584F      1791          addq.w    #4,A7
                    1792   ; for(i=0; i < 8; i++)    {
0000135E  4244      1793          clr.w     D4
                    1794   DumpRegisters_42:
00001360  0C44 0008 1795          cmp.w     #8,D4
00001364  6C00 0040 1796          bge       DumpRegisters_44
                    1797   ; if(WatchPointSetOrCleared[i] == 1)
00001368  48C4      1798          ext.l     D4
0000136A  2004      1799          move.l    D4,D0
0000136C  E588      1800          lsl.l     #2,D0
0000136E  41F9 0803 1801          lea       _WatchPointSetOrCleared.L,A0
00001372  01A2      
00001374  2030 0800 1802          move.l    0(A0,D0.L),D0
00001378  0C80 0000 1803          cmp.l     #1,D0
0000137C  0001      
0000137E  6622      1804          bne.s     DumpRegisters_45
                    1805   ; printf("\r\nWP%d = %s", i, WatchPointString[i]) ;
00001380  220D      1806          move.l    A5,D1
00001382  48C4      1807          ext.l     D4
00001384  2F00      1808          move.l    D0,-(A7)
00001386  2004      1809          move.l    D4,D0
00001388  C1FC 0064 1810          muls      #100,D0
0000138C  D280      1811          add.l     D0,D1
0000138E  201F      1812          move.l    (A7)+,D0
00001390  2F01      1813          move.l    D1,-(A7)
00001392  48C4      1814          ext.l     D4
00001394  2F04      1815          move.l    D4,-(A7)
00001396  4879 0000 1816          pea       @m68kde~1_38.L
0000139A  4616      
0000139C  4E93      1817          jsr       (A3)
0000139E  DEFC 000C 1818          add.w     #12,A7
                    1819   DumpRegisters_45:
000013A2  5244      1820          addq.w    #1,D4
000013A4  60BA      1821          bra       DumpRegisters_42
                    1822   DumpRegisters_44:
000013A6  4CDF 3CFC 1823          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
000013AA  4E75      1824          rts
                    1825   ; }
                    1826   ; }
                    1827   ; // Trace Exception Handler
                    1828   ; void DumpRegistersandPause(void)
                    1829   ; {
                    1830   _DumpRegistersandPause:
000013AC  2F0A      1831          move.l    A2,-(A7)
000013AE  45F9 0000 1832          lea       _printf.L,A2
000013B2  3926      
                    1833   ; printf("\r\n\r\n\r\n\r\n\r\n\r\nSingle Step  :[ON]") ;
000013B4  4879 0000 1834          pea       @m68kde~1_39.L
000013B8  4622      
000013BA  4E92      1835          jsr       (A2)
000013BC  584F      1836          addq.w    #4,A7
                    1837   ; printf("\r\nBreak Points :[Disabled]") ;
000013BE  4879 0000 1838          pea       @m68kde~1_40.L
000013C2  4642      
000013C4  4E92      1839          jsr       (A2)
000013C6  584F      1840          addq.w    #4,A7
                    1841   ; DumpRegisters() ;
000013C8  4EB8 0EF8 1842          jsr       _DumpRegisters
                    1843   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
000013CC  4879 0000 1844          pea       @m68kde~1_41.L
000013D0  465E      
000013D2  4E92      1845          jsr       (A2)
000013D4  584F      1846          addq.w    #4,A7
                    1847   ; printf("\r\nPress <ESC> to Resume Program") ;
000013D6  4879 0000 1848          pea       @m68kde~1_42.L
000013DA  468A      
000013DC  4E92      1849          jsr       (A2)
000013DE  584F      1850          addq.w    #4,A7
                    1851   ; menu() ;
000013E0  4EB9 0000 1852          jsr       _menu
000013E4  1F04      
000013E6  245F      1853          move.l    (A7)+,A2
000013E8  4E75      1854          rts
                    1855   ; }
                    1856   ; void ChangeRegisters(void)
                    1857   ; {
                    1858   _ChangeRegisters:
000013EA  4E56 FFFC 1859          link      A6,#-4
000013EE  48E7 303C 1860          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
000013F2  45F9 0000 1861          lea       _printf.L,A2
000013F6  3926      
000013F8  47EE FFFC 1862          lea       -4(A6),A3
000013FC  49F8 0AD8 1863          lea       _Get8HexDigits.L,A4
00001400  4BF8 099C 1864          lea       __getch.L,A5
                    1865   ; // get register name d0-d7, a0-a7, up, sp, sr, pc
                    1866   ; int reg_val ;
                    1867   ; char c, reg[3] ;
                    1868   ; reg[0] = tolower(_getch()) ;
00001404  2F00      1869          move.l    D0,-(A7)
00001406  4E95      1870          jsr       (A5)
00001408  2200      1871          move.l    D0,D1
0000140A  201F      1872          move.l    (A7)+,D0
0000140C  2F01      1873          move.l    D1,-(A7)
0000140E  4EB9 0000 1874          jsr       _tolower
00001412  3884      
00001414  584F      1875          addq.w    #4,A7
00001416  1680      1876          move.b    D0,(A3)
                    1877   ; reg[1] = c = tolower(_getch()) ;
00001418  2F00      1878          move.l    D0,-(A7)
0000141A  4E95      1879          jsr       (A5)
0000141C  2200      1880          move.l    D0,D1
0000141E  201F      1881          move.l    (A7)+,D0
00001420  2F01      1882          move.l    D1,-(A7)
00001422  4EB9 0000 1883          jsr       _tolower
00001426  3884      
00001428  584F      1884          addq.w    #4,A7
0000142A  1400      1885          move.b    D0,D2
0000142C  1740 0001 1886          move.b    D0,1(A3)
                    1887   ; if(reg[0] == (char)('d'))  {    // change data register
00001430  1013      1888          move.b    (A3),D0
00001432  0C00 0064 1889          cmp.b     #100,D0
00001436  6600 00AE 1890          bne       ChangeRegisters_1
                    1891   ; if((reg[1] > (char)('7')) || (reg[1] < (char)('0'))) {
0000143A  102B 0001 1892          move.b    1(A3),D0
0000143E  0C00 0037 1893          cmp.b     #55,D0
00001442  6E0A      1894          bgt.s     ChangeRegisters_5
00001444  102B 0001 1895          move.b    1(A3),D0
00001448  0C00 0030 1896          cmp.b     #48,D0
0000144C  6C0E      1897          bge.s     ChangeRegisters_3
                    1898   ChangeRegisters_5:
                    1899   ; printf("\r\nIllegal Data Register : Use D0-D7.....\r\n") ;
0000144E  4879 0000 1900          pea       @m68kde~1_43.L
00001452  46AA      
00001454  4E92      1901          jsr       (A2)
00001456  584F      1902          addq.w    #4,A7
                    1903   ; return ;
00001458  6000 0244 1904          bra       ChangeRegisters_6
                    1905   ChangeRegisters_3:
                    1906   ; }
                    1907   ; else {
                    1908   ; printf("\r\nD%c = ", c) ;
0000145C  4882      1909          ext.w     D2
0000145E  48C2      1910          ext.l     D2
00001460  2F02      1911          move.l    D2,-(A7)
00001462  4879 0000 1912          pea       @m68kde~1_44.L
00001466  46D6      
00001468  4E92      1913          jsr       (A2)
0000146A  504F      1914          addq.w    #8,A7
                    1915   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
0000146C  42A7      1916          clr.l     -(A7)
0000146E  4E94      1917          jsr       (A4)
00001470  584F      1918          addq.w    #4,A7
00001472  2600      1919          move.l    D0,D3
                    1920   ; }
                    1921   ; // bit cludgy but d0-d7 not stored as an array for good reason
                    1922   ; if(c == (char)('0'))
00001474  0C02 0030 1923          cmp.b     #48,D2
00001478  660A      1924          bne.s     ChangeRegisters_7
                    1925   ; d0 = reg_val ;
0000147A  23C3 0803 1926          move.l    D3,_d0.L
0000147E  00E4      
00001480  6000 0060 1927          bra       ChangeRegisters_20
                    1928   ChangeRegisters_7:
                    1929   ; else if(c == (char)('1'))
00001484  0C02 0031 1930          cmp.b     #49,D2
00001488  660A      1931          bne.s     ChangeRegisters_9
                    1932   ; d1 = reg_val ;
0000148A  23C3 0803 1933          move.l    D3,_d1.L
0000148E  00E8      
00001490  6000 0050 1934          bra       ChangeRegisters_20
                    1935   ChangeRegisters_9:
                    1936   ; else if(c == (char)('2'))
00001494  0C02 0032 1937          cmp.b     #50,D2
00001498  660A      1938          bne.s     ChangeRegisters_11
                    1939   ; d2 = reg_val ;
0000149A  23C3 0803 1940          move.l    D3,_d2.L
0000149E  00EC      
000014A0  6000 0040 1941          bra       ChangeRegisters_20
                    1942   ChangeRegisters_11:
                    1943   ; else if(c == (char)('3'))
000014A4  0C02 0033 1944          cmp.b     #51,D2
000014A8  6608      1945          bne.s     ChangeRegisters_13
                    1946   ; d3 = reg_val ;
000014AA  23C3 0803 1947          move.l    D3,_d3.L
000014AE  00F0      
000014B0  6030      1948          bra.s     ChangeRegisters_20
                    1949   ChangeRegisters_13:
                    1950   ; else if(c == (char)('4'))
000014B2  0C02 0034 1951          cmp.b     #52,D2
000014B6  6608      1952          bne.s     ChangeRegisters_15
                    1953   ; d4 = reg_val ;
000014B8  23C3 0803 1954          move.l    D3,_d4.L
000014BC  00F4      
000014BE  6022      1955          bra.s     ChangeRegisters_20
                    1956   ChangeRegisters_15:
                    1957   ; else if(c == (char)('5'))
000014C0  0C02 0035 1958          cmp.b     #53,D2
000014C4  6608      1959          bne.s     ChangeRegisters_17
                    1960   ; d5 = reg_val ;
000014C6  23C3 0803 1961          move.l    D3,_d5.L
000014CA  00F8      
000014CC  6014      1962          bra.s     ChangeRegisters_20
                    1963   ChangeRegisters_17:
                    1964   ; else if(c == (char)('6'))
000014CE  0C02 0036 1965          cmp.b     #54,D2
000014D2  6608      1966          bne.s     ChangeRegisters_19
                    1967   ; d6 = reg_val ;
000014D4  23C3 0803 1968          move.l    D3,_d6.L
000014D8  00FC      
000014DA  6006      1969          bra.s     ChangeRegisters_20
                    1970   ChangeRegisters_19:
                    1971   ; else
                    1972   ; d7 = reg_val ;
000014DC  23C3 0803 1973          move.l    D3,_d7.L
000014E0  0100      
                    1974   ChangeRegisters_20:
000014E2  6000 01B6 1975          bra       ChangeRegisters_51
                    1976   ChangeRegisters_1:
                    1977   ; }
                    1978   ; else if(reg[0] == (char)('a'))  {    // change address register, a7 is the user stack pointer, sp is the system stack pointer
000014E6  1013      1979          move.b    (A3),D0
000014E8  0C00 0061 1980          cmp.b     #97,D0
000014EC  6600 00A6 1981          bne       ChangeRegisters_21
                    1982   ; if((c > (char)('7')) || (c < (char)('0'))) {
000014F0  0C02 0037 1983          cmp.b     #55,D2
000014F4  6E06      1984          bgt.s     ChangeRegisters_25
000014F6  0C02 0030 1985          cmp.b     #48,D2
000014FA  6C0E      1986          bge.s     ChangeRegisters_23
                    1987   ChangeRegisters_25:
                    1988   ; printf("\r\nIllegal Address Register : Use A0-A7.....\r\n") ;
000014FC  4879 0000 1989          pea       @m68kde~1_45.L
00001500  46E0      
00001502  4E92      1990          jsr       (A2)
00001504  584F      1991          addq.w    #4,A7
                    1992   ; return ;
00001506  6000 0196 1993          bra       ChangeRegisters_6
                    1994   ChangeRegisters_23:
                    1995   ; }
                    1996   ; else {
                    1997   ; printf("\r\nA%c = ", c) ;
0000150A  4882      1998          ext.w     D2
0000150C  48C2      1999          ext.l     D2
0000150E  2F02      2000          move.l    D2,-(A7)
00001510  4879 0000 2001          pea       @m68kde~1_46.L
00001514  470E      
00001516  4E92      2002          jsr       (A2)
00001518  504F      2003          addq.w    #8,A7
                    2004   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
0000151A  42A7      2005          clr.l     -(A7)
0000151C  4E94      2006          jsr       (A4)
0000151E  584F      2007          addq.w    #4,A7
00001520  2600      2008          move.l    D0,D3
                    2009   ; }
                    2010   ; // bit cludgy but a0-a7 not stored as an array for good reason
                    2011   ; if(c == (char)('0'))
00001522  0C02 0030 2012          cmp.b     #48,D2
00001526  660A      2013          bne.s     ChangeRegisters_26
                    2014   ; a0 = reg_val ;
00001528  23C3 0803 2015          move.l    D3,_a0.L
0000152C  0104      
0000152E  6000 0060 2016          bra       ChangeRegisters_39
                    2017   ChangeRegisters_26:
                    2018   ; else if(c == (char)('1'))
00001532  0C02 0031 2019          cmp.b     #49,D2
00001536  660A      2020          bne.s     ChangeRegisters_28
                    2021   ; a1 = reg_val ;
00001538  23C3 0803 2022          move.l    D3,_a1.L
0000153C  0108      
0000153E  6000 0050 2023          bra       ChangeRegisters_39
                    2024   ChangeRegisters_28:
                    2025   ; else if(c == (char)('2'))
00001542  0C02 0032 2026          cmp.b     #50,D2
00001546  660A      2027          bne.s     ChangeRegisters_30
                    2028   ; a2 = reg_val ;
00001548  23C3 0803 2029          move.l    D3,_a2.L
0000154C  010C      
0000154E  6000 0040 2030          bra       ChangeRegisters_39
                    2031   ChangeRegisters_30:
                    2032   ; else if(c == (char)('3'))
00001552  0C02 0033 2033          cmp.b     #51,D2
00001556  6608      2034          bne.s     ChangeRegisters_32
                    2035   ; a3 = reg_val ;
00001558  23C3 0803 2036          move.l    D3,_a3.L
0000155C  0110      
0000155E  6030      2037          bra.s     ChangeRegisters_39
                    2038   ChangeRegisters_32:
                    2039   ; else if(c == (char)('4'))
00001560  0C02 0034 2040          cmp.b     #52,D2
00001564  6608      2041          bne.s     ChangeRegisters_34
                    2042   ; a4 = reg_val ;
00001566  23C3 0803 2043          move.l    D3,_a4.L
0000156A  0114      
0000156C  6022      2044          bra.s     ChangeRegisters_39
                    2045   ChangeRegisters_34:
                    2046   ; else if(c == (char)('5'))
0000156E  0C02 0035 2047          cmp.b     #53,D2
00001572  6608      2048          bne.s     ChangeRegisters_36
                    2049   ; a5 = reg_val ;
00001574  23C3 0803 2050          move.l    D3,_a5.L
00001578  0118      
0000157A  6014      2051          bra.s     ChangeRegisters_39
                    2052   ChangeRegisters_36:
                    2053   ; else if(c == (char)('6'))
0000157C  0C02 0036 2054          cmp.b     #54,D2
00001580  6608      2055          bne.s     ChangeRegisters_38
                    2056   ; a6 = reg_val ;
00001582  23C3 0803 2057          move.l    D3,_a6.L
00001586  011C      
00001588  6006      2058          bra.s     ChangeRegisters_39
                    2059   ChangeRegisters_38:
                    2060   ; else
                    2061   ; USP = reg_val ;
0000158A  23C3 0803 2062          move.l    D3,_USP.L
0000158E  0128      
                    2063   ChangeRegisters_39:
00001590  6000 0108 2064          bra       ChangeRegisters_51
                    2065   ChangeRegisters_21:
                    2066   ; }
                    2067   ; else if((reg[0] == (char)('u')) && (c == (char)('s')))  {
00001594  1013      2068          move.b    (A3),D0
00001596  0C00 0075 2069          cmp.b     #117,D0
0000159A  6600 004E 2070          bne       ChangeRegisters_40
0000159E  0C02 0073 2071          cmp.b     #115,D2
000015A2  6600 0046 2072          bne       ChangeRegisters_40
                    2073   ; if(tolower(_getch()) == 'p')  {    // change user stack pointer
000015A6  2F00      2074          move.l    D0,-(A7)
000015A8  4E95      2075          jsr       (A5)
000015AA  2200      2076          move.l    D0,D1
000015AC  201F      2077          move.l    (A7)+,D0
000015AE  2F01      2078          move.l    D1,-(A7)
000015B0  4EB9 0000 2079          jsr       _tolower
000015B4  3884      
000015B6  584F      2080          addq.w    #4,A7
000015B8  0C80 0000 2081          cmp.l     #112,D0
000015BC  0070      
000015BE  6618      2082          bne.s     ChangeRegisters_42
                    2083   ; printf("\r\nUser SP = ") ;
000015C0  4879 0000 2084          pea       @m68kde~1_47.L
000015C4  4718      
000015C6  4E92      2085          jsr       (A2)
000015C8  584F      2086          addq.w    #4,A7
                    2087   ; USP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
000015CA  42A7      2088          clr.l     -(A7)
000015CC  4E94      2089          jsr       (A4)
000015CE  584F      2090          addq.w    #4,A7
000015D0  23C0 0803 2091          move.l    D0,_USP.L
000015D4  0128      
000015D6  600E      2092          bra.s     ChangeRegisters_43
                    2093   ChangeRegisters_42:
                    2094   ; }
                    2095   ; else {
                    2096   ; printf("\r\nIllegal Register....") ;
000015D8  4879 0000 2097          pea       @m68kde~1_48.L
000015DC  4726      
000015DE  4E92      2098          jsr       (A2)
000015E0  584F      2099          addq.w    #4,A7
                    2100   ; return ;
000015E2  6000 00BA 2101          bra       ChangeRegisters_6
                    2102   ChangeRegisters_43:
000015E6  6000 00B2 2103          bra       ChangeRegisters_51
                    2104   ChangeRegisters_40:
                    2105   ; }
                    2106   ; }
                    2107   ; else if((reg[0] == (char)('s')) && (c == (char)('s')))  {
000015EA  1013      2108          move.b    (A3),D0
000015EC  0C00 0073 2109          cmp.b     #115,D0
000015F0  6600 004E 2110          bne       ChangeRegisters_44
000015F4  0C02 0073 2111          cmp.b     #115,D2
000015F8  6600 0046 2112          bne       ChangeRegisters_44
                    2113   ; if(tolower(_getch()) == 'p')  {    // change system stack pointer
000015FC  2F00      2114          move.l    D0,-(A7)
000015FE  4E95      2115          jsr       (A5)
00001600  2200      2116          move.l    D0,D1
00001602  201F      2117          move.l    (A7)+,D0
00001604  2F01      2118          move.l    D1,-(A7)
00001606  4EB9 0000 2119          jsr       _tolower
0000160A  3884      
0000160C  584F      2120          addq.w    #4,A7
0000160E  0C80 0000 2121          cmp.l     #112,D0
00001612  0070      
00001614  6618      2122          bne.s     ChangeRegisters_46
                    2123   ; printf("\r\nSystem SP = ") ;
00001616  4879 0000 2124          pea       @m68kde~1_49.L
0000161A  473E      
0000161C  4E92      2125          jsr       (A2)
0000161E  584F      2126          addq.w    #4,A7
                    2127   ; SSP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001620  42A7      2128          clr.l     -(A7)
00001622  4E94      2129          jsr       (A4)
00001624  584F      2130          addq.w    #4,A7
00001626  23C0 0803 2131          move.l    D0,_SSP.L
0000162A  0124      
0000162C  600E      2132          bra.s     ChangeRegisters_47
                    2133   ChangeRegisters_46:
                    2134   ; }
                    2135   ; else {
                    2136   ; printf("\r\nIllegal Register....") ;
0000162E  4879 0000 2137          pea       @m68kde~1_48.L
00001632  4726      
00001634  4E92      2138          jsr       (A2)
00001636  584F      2139          addq.w    #4,A7
                    2140   ; return ;
00001638  6000 0064 2141          bra       ChangeRegisters_6
                    2142   ChangeRegisters_47:
0000163C  6000 005C 2143          bra       ChangeRegisters_51
                    2144   ChangeRegisters_44:
                    2145   ; }
                    2146   ; }
                    2147   ; else if((reg[0] == (char)('p')) && (c == (char)('c')))  {    // change program counter
00001640  1013      2148          move.b    (A3),D0
00001642  0C00 0070 2149          cmp.b     #112,D0
00001646  6620      2150          bne.s     ChangeRegisters_48
00001648  0C02 0063 2151          cmp.b     #99,D2
0000164C  661A      2152          bne.s     ChangeRegisters_48
                    2153   ; printf("\r\nPC = ") ;
0000164E  4879 0000 2154          pea       @m68kde~1_50.L
00001652  474E      
00001654  4E92      2155          jsr       (A2)
00001656  584F      2156          addq.w    #4,A7
                    2157   ; PC = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001658  42A7      2158          clr.l     -(A7)
0000165A  4E94      2159          jsr       (A4)
0000165C  584F      2160          addq.w    #4,A7
0000165E  23C0 0803 2161          move.l    D0,_PC.L
00001662  0120      
00001664  6000 0034 2162          bra       ChangeRegisters_51
                    2163   ChangeRegisters_48:
                    2164   ; }
                    2165   ; else if((reg[0] == (char)('s')) && (c == (char)('r')))  {    // change status register
00001668  1013      2166          move.b    (A3),D0
0000166A  0C00 0073 2167          cmp.b     #115,D0
0000166E  6620      2168          bne.s     ChangeRegisters_50
00001670  0C02 0072 2169          cmp.b     #114,D2
00001674  661A      2170          bne.s     ChangeRegisters_50
                    2171   ; printf("\r\nSR = ") ;
00001676  4879 0000 2172          pea       @m68kde~1_51.L
0000167A  4756      
0000167C  4E92      2173          jsr       (A2)
0000167E  584F      2174          addq.w    #4,A7
                    2175   ; SR = Get4HexDigits(0) ;    // read 16 bit value from user keyboard
00001680  42A7      2176          clr.l     -(A7)
00001682  4EB8 0A8C 2177          jsr       _Get4HexDigits
00001686  584F      2178          addq.w    #4,A7
00001688  33C0 0803 2179          move.w    D0,_SR.L
0000168C  012C      
0000168E  600A      2180          bra.s     ChangeRegisters_51
                    2181   ChangeRegisters_50:
                    2182   ; }
                    2183   ; else
                    2184   ; printf("\r\nIllegal Register: Use A0-A7, D0-D7, SSP, USP, PC or SR\r\n") ;
00001690  4879 0000 2185          pea       @m68kde~1_52.L
00001694  475E      
00001696  4E92      2186          jsr       (A2)
00001698  584F      2187          addq.w    #4,A7
                    2188   ChangeRegisters_51:
                    2189   ; DumpRegisters() ;
0000169A  4EB8 0EF8 2190          jsr       _DumpRegisters
                    2191   ChangeRegisters_6:
0000169E  4CDF 3C0C 2192          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
000016A2  4E5E      2193          unlk      A6
000016A4  4E75      2194          rts
                    2195   ; }
                    2196   ; void BreakPointDisplay(void)
                    2197   ; {
                    2198   _BreakPointDisplay:
000016A6  48E7 3030 2199          movem.l   D2/D3/A2/A3,-(A7)
000016AA  45F9 0000 2200          lea       _printf.L,A2
000016AE  3926      
000016B0  47F9 0803 2201          lea       _BreakPointAddress.L,A3
000016B4  012E      
                    2202   ; int i, BreakPointsSet = 0 ;
000016B6  4283      2203          clr.l     D3
                    2204   ; // any break points  set
                    2205   ; for(i = 0; i < 8; i++)  {
000016B8  4282      2206          clr.l     D2
                    2207   BreakPointDisplay_1:
000016BA  0C82 0000 2208          cmp.l     #8,D2
000016BE  0008      
000016C0  6C1C      2209          bge.s     BreakPointDisplay_3
                    2210   ; if(BreakPointSetOrCleared[i] == 1)
000016C2  2002      2211          move.l    D2,D0
000016C4  E588      2212          lsl.l     #2,D0
000016C6  41F9 0803 2213          lea       _BreakPointSetOrCleared.L,A0
000016CA  015E      
000016CC  2030 0800 2214          move.l    0(A0,D0.L),D0
000016D0  0C80 0000 2215          cmp.l     #1,D0
000016D4  0001      
000016D6  6602      2216          bne.s     BreakPointDisplay_4
                    2217   ; BreakPointsSet = 1;
000016D8  7601      2218          moveq     #1,D3
                    2219   BreakPointDisplay_4:
000016DA  5282      2220          addq.l    #1,D2
000016DC  60DC      2221          bra       BreakPointDisplay_1
                    2222   BreakPointDisplay_3:
                    2223   ; }
                    2224   ; if(BreakPointsSet == 1) {
000016DE  0C83 0000 2225          cmp.l     #1,D3
000016E2  0001      
000016E4  6616      2226          bne.s     BreakPointDisplay_6
                    2227   ; printf("\r\n\r\nNum     Address      Instruction") ;
000016E6  4879 0000 2228          pea       @m68kde~1_53.L
000016EA  479A      
000016EC  4E92      2229          jsr       (A2)
000016EE  584F      2230          addq.w    #4,A7
                    2231   ; printf("\r\n---     ---------    -----------") ;
000016F0  4879 0000 2232          pea       @m68kde~1_54.L
000016F4  47C0      
000016F6  4E92      2233          jsr       (A2)
000016F8  584F      2234          addq.w    #4,A7
000016FA  600A      2235          bra.s     BreakPointDisplay_7
                    2236   BreakPointDisplay_6:
                    2237   ; }
                    2238   ; else
                    2239   ; printf("\r\nNo BreakPoints Set") ;
000016FC  4879 0000 2240          pea       @m68kde~1_55.L
00001700  47E4      
00001702  4E92      2241          jsr       (A2)
00001704  584F      2242          addq.w    #4,A7
                    2243   BreakPointDisplay_7:
                    2244   ; for(i = 0; i < 8; i++)  {
00001706  4282      2245          clr.l     D2
                    2246   BreakPointDisplay_8:
00001708  0C82 0000 2247          cmp.l     #8,D2
0000170C  0008      
0000170E  6C00 005A 2248          bge       BreakPointDisplay_10
                    2249   ; // put opcode back, then put break point back
                    2250   ; if(BreakPointSetOrCleared[i] == 1)  {
00001712  2002      2251          move.l    D2,D0
00001714  E588      2252          lsl.l     #2,D0
00001716  41F9 0803 2253          lea       _BreakPointSetOrCleared.L,A0
0000171A  015E      
0000171C  2030 0800 2254          move.l    0(A0,D0.L),D0
00001720  0C80 0000 2255          cmp.l     #1,D0
00001724  0001      
00001726  6600 003E 2256          bne       BreakPointDisplay_11
                    2257   ; *(unsigned short int *)(BreakPointAddress[i]) = BreakPointInstruction[i];
0000172A  2002      2258          move.l    D2,D0
0000172C  E388      2259          lsl.l     #1,D0
0000172E  41F9 0803 2260          lea       _BreakPointInstruction.L,A0
00001732  014E      
00001734  2202      2261          move.l    D2,D1
00001736  E589      2262          lsl.l     #2,D1
00001738  2233 1800 2263          move.l    0(A3,D1.L),D1
0000173C  2241      2264          move.l    D1,A1
0000173E  32B0 0800 2265          move.w    0(A0,D0.L),(A1)
                    2266   ; *(unsigned short int *)(BreakPointAddress[i]) = (unsigned short int)(0x4e4e) ;
00001742  2002      2267          move.l    D2,D0
00001744  E588      2268          lsl.l     #2,D0
00001746  2033 0800 2269          move.l    0(A3,D0.L),D0
0000174A  2040      2270          move.l    D0,A0
0000174C  30BC 4E4E 2271          move.w    #20046,(A0)
                    2272   ; printf("\r\n%3d     $%08x",i, BreakPointAddress[i]) ;
00001750  2202      2273          move.l    D2,D1
00001752  E589      2274          lsl.l     #2,D1
00001754  2F33 1800 2275          move.l    0(A3,D1.L),-(A7)
00001758  2F02      2276          move.l    D2,-(A7)
0000175A  4879 0000 2277          pea       @m68kde~1_56.L
0000175E  47FA      
00001760  4E92      2278          jsr       (A2)
00001762  DEFC 000C 2279          add.w     #12,A7
                    2280   BreakPointDisplay_11:
00001766  5282      2281          addq.l    #1,D2
00001768  609E      2282          bra       BreakPointDisplay_8
                    2283   BreakPointDisplay_10:
                    2284   ; }
                    2285   ; }
                    2286   ; printf("\r\n") ;
0000176A  4879 0000 2287          pea       @m68kde~1_6.L
0000176E  4316      
00001770  4E92      2288          jsr       (A2)
00001772  584F      2289          addq.w    #4,A7
00001774  4CDF 0C0C 2290          movem.l   (A7)+,D2/D3/A2/A3
00001778  4E75      2291          rts
                    2292   ; }
                    2293   ; void WatchPointDisplay(void)
                    2294   ; {
                    2295   _WatchPointDisplay:
0000177A  48E7 3020 2296          movem.l   D2/D3/A2,-(A7)
0000177E  45F9 0000 2297          lea       _printf.L,A2
00001782  3926      
                    2298   ; int i ;
                    2299   ; int WatchPointsSet = 0 ;
00001784  4283      2300          clr.l     D3
                    2301   ; // any watchpoints set
                    2302   ; for(i = 0; i < 8; i++)  {
00001786  4282      2303          clr.l     D2
                    2304   WatchPointDisplay_1:
00001788  0C82 0000 2305          cmp.l     #8,D2
0000178C  0008      
0000178E  6C1C      2306          bge.s     WatchPointDisplay_3
                    2307   ; if(WatchPointSetOrCleared[i] == 1)
00001790  2002      2308          move.l    D2,D0
00001792  E588      2309          lsl.l     #2,D0
00001794  41F9 0803 2310          lea       _WatchPointSetOrCleared.L,A0
00001798  01A2      
0000179A  2030 0800 2311          move.l    0(A0,D0.L),D0
0000179E  0C80 0000 2312          cmp.l     #1,D0
000017A2  0001      
000017A4  6602      2313          bne.s     WatchPointDisplay_4
                    2314   ; WatchPointsSet = 1;
000017A6  7601      2315          moveq     #1,D3
                    2316   WatchPointDisplay_4:
000017A8  5282      2317          addq.l    #1,D2
000017AA  60DC      2318          bra       WatchPointDisplay_1
                    2319   WatchPointDisplay_3:
                    2320   ; }
                    2321   ; if(WatchPointsSet == 1) {
000017AC  0C83 0000 2322          cmp.l     #1,D3
000017B0  0001      
000017B2  6616      2323          bne.s     WatchPointDisplay_6
                    2324   ; printf("\r\nNum     Address") ;
000017B4  4879 0000 2325          pea       @m68kde~1_57.L
000017B8  480A      
000017BA  4E92      2326          jsr       (A2)
000017BC  584F      2327          addq.w    #4,A7
                    2328   ; printf("\r\n---     ---------") ;
000017BE  4879 0000 2329          pea       @m68kde~1_58.L
000017C2  481C      
000017C4  4E92      2330          jsr       (A2)
000017C6  584F      2331          addq.w    #4,A7
000017C8  600A      2332          bra.s     WatchPointDisplay_7
                    2333   WatchPointDisplay_6:
                    2334   ; }
                    2335   ; else
                    2336   ; printf("\r\nNo WatchPoints Set") ;
000017CA  4879 0000 2337          pea       @m68kde~1_59.L
000017CE  4830      
000017D0  4E92      2338          jsr       (A2)
000017D2  584F      2339          addq.w    #4,A7
                    2340   WatchPointDisplay_7:
                    2341   ; for(i = 0; i < 8; i++)  {
000017D4  4282      2342          clr.l     D2
                    2343   WatchPointDisplay_8:
000017D6  0C82 0000 2344          cmp.l     #8,D2
000017DA  0008      
000017DC  6C00 0038 2345          bge       WatchPointDisplay_10
                    2346   ; if(WatchPointSetOrCleared[i] == 1)
000017E0  2002      2347          move.l    D2,D0
000017E2  E588      2348          lsl.l     #2,D0
000017E4  41F9 0803 2349          lea       _WatchPointSetOrCleared.L,A0
000017E8  01A2      
000017EA  2030 0800 2350          move.l    0(A0,D0.L),D0
000017EE  0C80 0000 2351          cmp.l     #1,D0
000017F2  0001      
000017F4  661C      2352          bne.s     WatchPointDisplay_11
                    2353   ; printf("\r\n%3d     $%08x",i, WatchPointAddress[i]) ;
000017F6  2202      2354          move.l    D2,D1
000017F8  E589      2355          lsl.l     #2,D1
000017FA  41F9 0803 2356          lea       _WatchPointAddress.L,A0
000017FE  0182      
00001800  2F30 1800 2357          move.l    0(A0,D1.L),-(A7)
00001804  2F02      2358          move.l    D2,-(A7)
00001806  4879 0000 2359          pea       @m68kde~1_56.L
0000180A  47FA      
0000180C  4E92      2360          jsr       (A2)
0000180E  DEFC 000C 2361          add.w     #12,A7
                    2362   WatchPointDisplay_11:
00001812  5282      2363          addq.l    #1,D2
00001814  60C0      2364          bra       WatchPointDisplay_8
                    2365   WatchPointDisplay_10:
                    2366   ; }
                    2367   ; printf("\r\n") ;
00001816  4879 0000 2368          pea       @m68kde~1_6.L
0000181A  4316      
0000181C  4E92      2369          jsr       (A2)
0000181E  584F      2370          addq.w    #4,A7
00001820  4CDF 040C 2371          movem.l   (A7)+,D2/D3/A2
00001824  4E75      2372          rts
                    2373   ; }
                    2374   ; void BreakPointClear(void)
                    2375   ; {
                    2376   _BreakPointClear:
00001826  4E56 FFFC 2377          link      A6,#-4
0000182A  48E7 2020 2378          movem.l   D2/A2,-(A7)
0000182E  45F9 0000 2379          lea       _printf.L,A2
00001832  3926      
                    2380   ; unsigned int i ;
                    2381   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2382   ; BreakPointDisplay() ;
00001834  4EB8 16A6 2383          jsr       _BreakPointDisplay
                    2384   ; printf("\r\nEnter Break Point Number: ") ;
00001838  4879 0000 2385          pea       @m68kde~1_60.L
0000183C  4846      
0000183E  4E92      2386          jsr       (A2)
00001840  584F      2387          addq.w    #4,A7
                    2388   ; i = xtod(_getch()) ;           // get break pointer number
00001842  2F00      2389          move.l    D0,-(A7)
00001844  4EB8 099C 2390          jsr       __getch
00001848  2200      2391          move.l    D0,D1
0000184A  201F      2392          move.l    (A7)+,D0
0000184C  2F01      2393          move.l    D1,-(A7)
0000184E  4EB8 0A06 2394          jsr       _xtod
00001852  584F      2395          addq.w    #4,A7
00001854  C0BC 0000 2396          and.l     #255,D0
00001858  00FF      
0000185A  2400      2397          move.l    D0,D2
                    2398   ; if((i < 0) || (i > 7))   {
0000185C  0C82 0000 2399          cmp.l     #0,D2
00001860  0000      
00001862  6508      2400          blo.s     BreakPointClear_3
00001864  0C82 0000 2401          cmp.l     #7,D2
00001868  0007      
0000186A  630E      2402          bls.s     BreakPointClear_1
                    2403   BreakPointClear_3:
                    2404   ; printf("\r\nIllegal Range : Use 0 - 7") ;
0000186C  4879 0000 2405          pea       @m68kde~1_61.L
00001870  4864      
00001872  4E92      2406          jsr       (A2)
00001874  584F      2407          addq.w    #4,A7
                    2408   ; return ;
00001876  6000 0080 2409          bra       BreakPointClear_4
                    2410   BreakPointClear_1:
                    2411   ; }
                    2412   ; if(BreakPointSetOrCleared[i] == 1)  {       // if break point set
0000187A  2002      2413          move.l    D2,D0
0000187C  E588      2414          lsl.l     #2,D0
0000187E  41F9 0803 2415          lea       _BreakPointSetOrCleared.L,A0
00001882  015E      
00001884  2030 0800 2416          move.l    0(A0,D0.L),D0
00001888  0C80 0000 2417          cmp.l     #1,D0
0000188C  0001      
0000188E  6600 005A 2418          bne       BreakPointClear_5
                    2419   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program we are about to change
00001892  2002      2420          move.l    D2,D0
00001894  E588      2421          lsl.l     #2,D0
00001896  41F9 0803 2422          lea       _BreakPointAddress.L,A0
0000189A  012E      
0000189C  2D70 0800 2423          move.l    0(A0,D0.L),-4(A6)
000018A0  FFFC      
                    2424   ; BreakPointAddress[i] = 0 ;
000018A2  2002      2425          move.l    D2,D0
000018A4  E588      2426          lsl.l     #2,D0
000018A6  41F9 0803 2427          lea       _BreakPointAddress.L,A0
000018AA  012E      
000018AC  42B0 0800 2428          clr.l     0(A0,D0.L)
                    2429   ; BreakPointSetOrCleared[i] = 0 ;
000018B0  2002      2430          move.l    D2,D0
000018B2  E588      2431          lsl.l     #2,D0
000018B4  41F9 0803 2432          lea       _BreakPointSetOrCleared.L,A0
000018B8  015E      
000018BA  42B0 0800 2433          clr.l     0(A0,D0.L)
                    2434   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
000018BE  2002      2435          move.l    D2,D0
000018C0  E388      2436          lsl.l     #1,D0
000018C2  41F9 0803 2437          lea       _BreakPointInstruction.L,A0
000018C6  014E      
000018C8  226E FFFC 2438          move.l    -4(A6),A1
000018CC  32B0 0800 2439          move.w    0(A0,D0.L),(A1)
                    2440   ; BreakPointInstruction[i] = 0 ;
000018D0  2002      2441          move.l    D2,D0
000018D2  E388      2442          lsl.l     #1,D0
000018D4  41F9 0803 2443          lea       _BreakPointInstruction.L,A0
000018D8  014E      
000018DA  4270 0800 2444          clr.w     0(A0,D0.L)
                    2445   ; printf("\r\nBreak Point Cleared.....\r\n") ;
000018DE  4879 0000 2446          pea       @m68kde~1_62.L
000018E2  4880      
000018E4  4E92      2447          jsr       (A2)
000018E6  584F      2448          addq.w    #4,A7
000018E8  600A      2449          bra.s     BreakPointClear_6
                    2450   BreakPointClear_5:
                    2451   ; }
                    2452   ; else
                    2453   ; printf("\r\nBreak Point wasn't Set.....") ;
000018EA  4879 0000 2454          pea       @m68kde~1_63.L
000018EE  489E      
000018F0  4E92      2455          jsr       (A2)
000018F2  584F      2456          addq.w    #4,A7
                    2457   BreakPointClear_6:
                    2458   ; BreakPointDisplay() ;
000018F4  4EB8 16A6 2459          jsr       _BreakPointDisplay
                    2460   ; return ;
                    2461   BreakPointClear_4:
000018F8  4CDF 0404 2462          movem.l   (A7)+,D2/A2
000018FC  4E5E      2463          unlk      A6
000018FE  4E75      2464          rts
                    2465   ; }
                    2466   ; void WatchPointClear(void)
                    2467   ; {
                    2468   _WatchPointClear:
00001900  48E7 2020 2469          movem.l   D2/A2,-(A7)
00001904  45F9 0000 2470          lea       _printf.L,A2
00001908  3926      
                    2471   ; unsigned int i ;
                    2472   ; WatchPointDisplay() ;
0000190A  4EB8 177A 2473          jsr       _WatchPointDisplay
                    2474   ; printf("\r\nEnter Watch Point Number: ") ;
0000190E  4879 0000 2475          pea       @m68kde~1_64.L
00001912  48BC      
00001914  4E92      2476          jsr       (A2)
00001916  584F      2477          addq.w    #4,A7
                    2478   ; i = xtod(_getch()) ;           // get watch pointer number
00001918  2F00      2479          move.l    D0,-(A7)
0000191A  4EB8 099C 2480          jsr       __getch
0000191E  2200      2481          move.l    D0,D1
00001920  201F      2482          move.l    (A7)+,D0
00001922  2F01      2483          move.l    D1,-(A7)
00001924  4EB8 0A06 2484          jsr       _xtod
00001928  584F      2485          addq.w    #4,A7
0000192A  C0BC 0000 2486          and.l     #255,D0
0000192E  00FF      
00001930  2400      2487          move.l    D0,D2
                    2488   ; if((i < 0) || (i > 7))   {
00001932  0C82 0000 2489          cmp.l     #0,D2
00001936  0000      
00001938  6508      2490          blo.s     WatchPointClear_3
0000193A  0C82 0000 2491          cmp.l     #7,D2
0000193E  0007      
00001940  630E      2492          bls.s     WatchPointClear_1
                    2493   WatchPointClear_3:
                    2494   ; printf("\r\nIllegal Range : Use 0 - 7") ;
00001942  4879 0000 2495          pea       @m68kde~1_61.L
00001946  4864      
00001948  4E92      2496          jsr       (A2)
0000194A  584F      2497          addq.w    #4,A7
                    2498   ; return ;
0000194C  6000 004E 2499          bra       WatchPointClear_4
                    2500   WatchPointClear_1:
                    2501   ; }
                    2502   ; if(WatchPointSetOrCleared[i] == 1)  {       // if watch point set
00001950  2002      2503          move.l    D2,D0
00001952  E588      2504          lsl.l     #2,D0
00001954  41F9 0803 2505          lea       _WatchPointSetOrCleared.L,A0
00001958  01A2      
0000195A  2030 0800 2506          move.l    0(A0,D0.L),D0
0000195E  0C80 0000 2507          cmp.l     #1,D0
00001962  0001      
00001964  6628      2508          bne.s     WatchPointClear_5
                    2509   ; WatchPointAddress[i] = 0 ;
00001966  2002      2510          move.l    D2,D0
00001968  E588      2511          lsl.l     #2,D0
0000196A  41F9 0803 2512          lea       _WatchPointAddress.L,A0
0000196E  0182      
00001970  42B0 0800 2513          clr.l     0(A0,D0.L)
                    2514   ; WatchPointSetOrCleared[i] = 0 ;
00001974  2002      2515          move.l    D2,D0
00001976  E588      2516          lsl.l     #2,D0
00001978  41F9 0803 2517          lea       _WatchPointSetOrCleared.L,A0
0000197C  01A2      
0000197E  42B0 0800 2518          clr.l     0(A0,D0.L)
                    2519   ; printf("\r\nWatch Point Cleared.....\r\n") ;
00001982  4879 0000 2520          pea       @m68kde~1_65.L
00001986  48DA      
00001988  4E92      2521          jsr       (A2)
0000198A  584F      2522          addq.w    #4,A7
0000198C  600A      2523          bra.s     WatchPointClear_6
                    2524   WatchPointClear_5:
                    2525   ; }
                    2526   ; else
                    2527   ; printf("\r\nWatch Point Was not Set.....") ;
0000198E  4879 0000 2528          pea       @m68kde~1_66.L
00001992  48F8      
00001994  4E92      2529          jsr       (A2)
00001996  584F      2530          addq.w    #4,A7
                    2531   WatchPointClear_6:
                    2532   ; WatchPointDisplay() ;
00001998  4EB8 177A 2533          jsr       _WatchPointDisplay
                    2534   ; return ;
                    2535   WatchPointClear_4:
0000199C  4CDF 0404 2536          movem.l   (A7)+,D2/A2
000019A0  4E75      2537          rts
                    2538   ; }
                    2539   ; void DisableBreakPoints(void)
                    2540   ; {
                    2541   _DisableBreakPoints:
000019A2  4E56 FFFC 2542          link      A6,#-4
000019A6  2F02      2543          move.l    D2,-(A7)
                    2544   ; int i ;
                    2545   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2546   ; for(i = 0; i < 8; i++)  {
000019A8  4282      2547          clr.l     D2
                    2548   DisableBreakPoints_1:
000019AA  0C82 0000 2549          cmp.l     #8,D2
000019AE  0008      
000019B0  6C00 003E 2550          bge       DisableBreakPoints_3
                    2551   ; if(BreakPointSetOrCleared[i] == 1)    {                                                    // if break point set
000019B4  2002      2552          move.l    D2,D0
000019B6  E588      2553          lsl.l     #2,D0
000019B8  41F9 0803 2554          lea       _BreakPointSetOrCleared.L,A0
000019BC  015E      
000019BE  2030 0800 2555          move.l    0(A0,D0.L),D0
000019C2  0C80 0000 2556          cmp.l     #1,D0
000019C6  0001      
000019C8  6622      2557          bne.s     DisableBreakPoints_4
                    2558   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
000019CA  2002      2559          move.l    D2,D0
000019CC  E588      2560          lsl.l     #2,D0
000019CE  41F9 0803 2561          lea       _BreakPointAddress.L,A0
000019D2  012E      
000019D4  2D70 0800 2562          move.l    0(A0,D0.L),-4(A6)
000019D8  FFFC      
                    2563   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program overwritting the $4e4e
000019DA  2002      2564          move.l    D2,D0
000019DC  E388      2565          lsl.l     #1,D0
000019DE  41F9 0803 2566          lea       _BreakPointInstruction.L,A0
000019E2  014E      
000019E4  226E FFFC 2567          move.l    -4(A6),A1
000019E8  32B0 0800 2568          move.w    0(A0,D0.L),(A1)
                    2569   DisableBreakPoints_4:
000019EC  5282      2570          addq.l    #1,D2
000019EE  60BA      2571          bra       DisableBreakPoints_1
                    2572   DisableBreakPoints_3:
000019F0  241F      2573          move.l    (A7)+,D2
000019F2  4E5E      2574          unlk      A6
000019F4  4E75      2575          rts
                    2576   ; }
                    2577   ; }
                    2578   ; }
                    2579   ; void EnableBreakPoints(void)
                    2580   ; {
                    2581   _EnableBreakPoints:
000019F6  4E56 FFFC 2582          link      A6,#-4
000019FA  2F02      2583          move.l    D2,-(A7)
                    2584   ; int i ;
                    2585   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2586   ; for(i = 0; i < 8; i++)  {
000019FC  4282      2587          clr.l     D2
                    2588   EnableBreakPoints_1:
000019FE  0C82 0000 2589          cmp.l     #8,D2
00001A02  0008      
00001A04  6C32      2590          bge.s     EnableBreakPoints_3
                    2591   ; if(BreakPointSetOrCleared[i] == 1)    {                                                     // if break point set
00001A06  2002      2592          move.l    D2,D0
00001A08  E588      2593          lsl.l     #2,D0
00001A0A  41F9 0803 2594          lea       _BreakPointSetOrCleared.L,A0
00001A0E  015E      
00001A10  2030 0800 2595          move.l    0(A0,D0.L),D0
00001A14  0C80 0000 2596          cmp.l     #1,D0
00001A18  0001      
00001A1A  6618      2597          bne.s     EnableBreakPoints_4
                    2598   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001A1C  2002      2599          move.l    D2,D0
00001A1E  E588      2600          lsl.l     #2,D0
00001A20  41F9 0803 2601          lea       _BreakPointAddress.L,A0
00001A24  012E      
00001A26  2D70 0800 2602          move.l    0(A0,D0.L),-4(A6)
00001A2A  FFFC      
                    2603   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e);                              // put the breakpoint back in user program
00001A2C  206E FFFC 2604          move.l    -4(A6),A0
00001A30  30BC 4E4E 2605          move.w    #20046,(A0)
                    2606   EnableBreakPoints_4:
00001A34  5282      2607          addq.l    #1,D2
00001A36  60C6      2608          bra       EnableBreakPoints_1
                    2609   EnableBreakPoints_3:
00001A38  241F      2610          move.l    (A7)+,D2
00001A3A  4E5E      2611          unlk      A6
00001A3C  4E75      2612          rts
                    2613   ; }
                    2614   ; }
                    2615   ; }
                    2616   ; void KillAllBreakPoints(void)
                    2617   ; {
                    2618   _KillAllBreakPoints:
00001A3E  4E56 FFFC 2619          link      A6,#-4
00001A42  2F02      2620          move.l    D2,-(A7)
                    2621   ; int i ;
                    2622   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2623   ; for(i = 0; i < 8; i++)  {
00001A44  4282      2624          clr.l     D2
                    2625   KillAllBreakPoints_1:
00001A46  0C82 0000 2626          cmp.l     #8,D2
00001A4A  0008      
00001A4C  6C00 0052 2627          bge       KillAllBreakPoints_3
                    2628   ; // clear BP
                    2629   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001A50  2002      2630          move.l    D2,D0
00001A52  E588      2631          lsl.l     #2,D0
00001A54  41F9 0803 2632          lea       _BreakPointAddress.L,A0
00001A58  012E      
00001A5A  2D70 0800 2633          move.l    0(A0,D0.L),-4(A6)
00001A5E  FFFC      
                    2634   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program
00001A60  2002      2635          move.l    D2,D0
00001A62  E388      2636          lsl.l     #1,D0
00001A64  41F9 0803 2637          lea       _BreakPointInstruction.L,A0
00001A68  014E      
00001A6A  226E FFFC 2638          move.l    -4(A6),A1
00001A6E  32B0 0800 2639          move.w    0(A0,D0.L),(A1)
                    2640   ; BreakPointAddress[i] = 0 ;                                                             // set BP address to NULL
00001A72  2002      2641          move.l    D2,D0
00001A74  E588      2642          lsl.l     #2,D0
00001A76  41F9 0803 2643          lea       _BreakPointAddress.L,A0
00001A7A  012E      
00001A7C  42B0 0800 2644          clr.l     0(A0,D0.L)
                    2645   ; BreakPointInstruction[i] = 0 ;
00001A80  2002      2646          move.l    D2,D0
00001A82  E388      2647          lsl.l     #1,D0
00001A84  41F9 0803 2648          lea       _BreakPointInstruction.L,A0
00001A88  014E      
00001A8A  4270 0800 2649          clr.w     0(A0,D0.L)
                    2650   ; BreakPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
00001A8E  2002      2651          move.l    D2,D0
00001A90  E588      2652          lsl.l     #2,D0
00001A92  41F9 0803 2653          lea       _BreakPointSetOrCleared.L,A0
00001A96  015E      
00001A98  42B0 0800 2654          clr.l     0(A0,D0.L)
00001A9C  5282      2655          addq.l    #1,D2
00001A9E  60A6      2656          bra       KillAllBreakPoints_1
                    2657   KillAllBreakPoints_3:
00001AA0  241F      2658          move.l    (A7)+,D2
00001AA2  4E5E      2659          unlk      A6
00001AA4  4E75      2660          rts
                    2661   ; }
                    2662   ; //BreakPointDisplay() ;       // display the break points
                    2663   ; }
                    2664   ; void KillAllWatchPoints(void)
                    2665   ; {
                    2666   _KillAllWatchPoints:
00001AA6  2F02      2667          move.l    D2,-(A7)
                    2668   ; int i ;
                    2669   ; for(i = 0; i < 8; i++)  {
00001AA8  4282      2670          clr.l     D2
                    2671   KillAllWatchPoints_1:
00001AAA  0C82 0000 2672          cmp.l     #8,D2
00001AAE  0008      
00001AB0  6C20      2673          bge.s     KillAllWatchPoints_3
                    2674   ; WatchPointAddress[i] = 0 ;                                                             // set BP address to NULL
00001AB2  2002      2675          move.l    D2,D0
00001AB4  E588      2676          lsl.l     #2,D0
00001AB6  41F9 0803 2677          lea       _WatchPointAddress.L,A0
00001ABA  0182      
00001ABC  42B0 0800 2678          clr.l     0(A0,D0.L)
                    2679   ; WatchPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
00001AC0  2002      2680          move.l    D2,D0
00001AC2  E588      2681          lsl.l     #2,D0
00001AC4  41F9 0803 2682          lea       _WatchPointSetOrCleared.L,A0
00001AC8  01A2      
00001ACA  42B0 0800 2683          clr.l     0(A0,D0.L)
00001ACE  5282      2684          addq.l    #1,D2
00001AD0  60D8      2685          bra       KillAllWatchPoints_1
                    2686   KillAllWatchPoints_3:
00001AD2  241F      2687          move.l    (A7)+,D2
00001AD4  4E75      2688          rts
                    2689   ; }
                    2690   ; //WatchPointDisplay() ;       // display the break points
                    2691   ; }
                    2692   ; void SetBreakPoint(void)
                    2693   ; {
                    2694   _SetBreakPoint:
00001AD6  4E56 FFFC 2695          link      A6,#-4
00001ADA  48E7 3830 2696          movem.l   D2/D3/D4/A2/A3,-(A7)
00001ADE  45F9 0000 2697          lea       _printf.L,A2
00001AE2  3926      
00001AE4  47F9 0803 2698          lea       _BreakPointSetOrCleared.L,A3
00001AE8  015E      
                    2699   ; int i ;
                    2700   ; int BPNumber;
                    2701   ; int BPAddress;
                    2702   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2703   ; // see if any free break points
                    2704   ; for(i = 0; i < 8; i ++) {
00001AEA  4282      2705          clr.l     D2
                    2706   SetBreakPoint_1:
00001AEC  0C82 0000 2707          cmp.l     #8,D2
00001AF0  0008      
00001AF2  6C10      2708          bge.s     SetBreakPoint_3
                    2709   ; if( BreakPointSetOrCleared[i] == 0)
00001AF4  2002      2710          move.l    D2,D0
00001AF6  E588      2711          lsl.l     #2,D0
00001AF8  2033 0800 2712          move.l    0(A3,D0.L),D0
00001AFC  6602      2713          bne.s     SetBreakPoint_4
                    2714   ; break ;         // if spare BP found allow user to set it
00001AFE  6004      2715          bra.s     SetBreakPoint_3
                    2716   SetBreakPoint_4:
00001B00  5282      2717          addq.l    #1,D2
00001B02  60E8      2718          bra       SetBreakPoint_1
                    2719   SetBreakPoint_3:
                    2720   ; }
                    2721   ; if(i == 8) {
00001B04  0C82 0000 2722          cmp.l     #8,D2
00001B08  0008      
00001B0A  660E      2723          bne.s     SetBreakPoint_6
                    2724   ; printf("\r\nNo FREE Break Points.....") ;
00001B0C  4879 0000 2725          pea       @m68kde~1_67.L
00001B10  4918      
00001B12  4E92      2726          jsr       (A2)
00001B14  584F      2727          addq.w    #4,A7
                    2728   ; return ;
00001B16  6000 00D6 2729          bra       SetBreakPoint_15
                    2730   SetBreakPoint_6:
                    2731   ; }
                    2732   ; printf("\r\nBreak Point Address: ") ;
00001B1A  4879 0000 2733          pea       @m68kde~1_68.L
00001B1E  4934      
00001B20  4E92      2734          jsr       (A2)
00001B22  584F      2735          addq.w    #4,A7
                    2736   ; BPAddress = Get8HexDigits(0) ;
00001B24  42A7      2737          clr.l     -(A7)
00001B26  4EB8 0AD8 2738          jsr       _Get8HexDigits
00001B2A  584F      2739          addq.w    #4,A7
00001B2C  2600      2740          move.l    D0,D3
                    2741   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BPAddress) ;     // point to the instruction in the user program we are about to change
00001B2E  2803      2742          move.l    D3,D4
                    2743   ; if((BPAddress & 0x00000001) == 0x00000001)  {   // cannot set BP at an odd address
00001B30  2003      2744          move.l    D3,D0
00001B32  C0BC 0000 2745          and.l     #1,D0
00001B36  0001      
00001B38  0C80 0000 2746          cmp.l     #1,D0
00001B3C  0001      
00001B3E  660E      2747          bne.s     SetBreakPoint_9
                    2748   ; printf("\r\nError : Break Points CANNOT be set at ODD addresses") ;
00001B40  4879 0000 2749          pea       @m68kde~1_69.L
00001B44  494C      
00001B46  4E92      2750          jsr       (A2)
00001B48  584F      2751          addq.w    #4,A7
                    2752   ; return ;
00001B4A  6000 00A2 2753          bra       SetBreakPoint_15
                    2754   SetBreakPoint_9:
                    2755   ; }
                    2756   ; if(BPAddress < 0x00008000)  {   // cannot set BP in ROM
00001B4E  0C83 0000 2757          cmp.l     #32768,D3
00001B52  8000      
00001B54  640E      2758          bhs.s     SetBreakPoint_11
                    2759   ; printf("\r\nError : Break Points CANNOT be set for ROM in Range : [$0-$00007FFF]") ;
00001B56  4879 0000 2760          pea       @m68kde~1_70.L
00001B5A  4982      
00001B5C  4E92      2761          jsr       (A2)
00001B5E  584F      2762          addq.w    #4,A7
                    2763   ; return ;
00001B60  6000 008C 2764          bra       SetBreakPoint_15
                    2765   SetBreakPoint_11:
                    2766   ; }
                    2767   ; // search for first free bp or existing same BP
                    2768   ; for(i = 0; i < 8; i++)  {
00001B64  4282      2769          clr.l     D2
                    2770   SetBreakPoint_13:
00001B66  0C82 0000 2771          cmp.l     #8,D2
00001B6A  0008      
00001B6C  6C00 0080 2772          bge       SetBreakPoint_15
                    2773   ; if(BreakPointAddress[i] == BPAddress)   {
00001B70  2002      2774          move.l    D2,D0
00001B72  E588      2775          lsl.l     #2,D0
00001B74  41F9 0803 2776          lea       _BreakPointAddress.L,A0
00001B78  012E      
00001B7A  B6B0 0800 2777          cmp.l     0(A0,D0.L),D3
00001B7E  6610      2778          bne.s     SetBreakPoint_16
                    2779   ; printf("\r\nError: Break Point Already Exists at Address : %08x\r\n", BPAddress) ;
00001B80  2F03      2780          move.l    D3,-(A7)
00001B82  4879 0000 2781          pea       @m68kde~1_71.L
00001B86  49CA      
00001B88  4E92      2782          jsr       (A2)
00001B8A  504F      2783          addq.w    #8,A7
                    2784   ; return ;
00001B8C  6000 0060 2785          bra       SetBreakPoint_15
                    2786   SetBreakPoint_16:
                    2787   ; }
                    2788   ; if(BreakPointSetOrCleared[i] == 0) {
00001B90  2002      2789          move.l    D2,D0
00001B92  E588      2790          lsl.l     #2,D0
00001B94  2033 0800 2791          move.l    0(A3,D0.L),D0
00001B98  6600 004E 2792          bne       SetBreakPoint_18
                    2793   ; // set BP here
                    2794   ; BreakPointSetOrCleared[i] = 1 ;                                 // mark this breakpoint as set
00001B9C  2002      2795          move.l    D2,D0
00001B9E  E588      2796          lsl.l     #2,D0
00001BA0  27BC 0000 2797          move.l    #1,0(A3,D0.L)
00001BA4  0001 0800 
                    2798   ; BreakPointInstruction[i] = *ProgramBreakPointAddress ;          // copy the user program instruction here so we can put it back afterwards
00001BA8  2044      2799          move.l    D4,A0
00001BAA  2002      2800          move.l    D2,D0
00001BAC  E388      2801          lsl.l     #1,D0
00001BAE  43F9 0803 2802          lea       _BreakPointInstruction.L,A1
00001BB2  014E      
00001BB4  3390 0800 2803          move.w    (A0),0(A1,D0.L)
                    2804   ; printf("\r\nBreak Point Set at Address: [$%08x]", ProgramBreakPointAddress) ;
00001BB8  2F04      2805          move.l    D4,-(A7)
00001BBA  4879 0000 2806          pea       @m68kde~1_72.L
00001BBE  4A02      
00001BC0  4E92      2807          jsr       (A2)
00001BC2  504F      2808          addq.w    #8,A7
                    2809   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e)    ;   // put a Trap14 instruction at the user specified address
00001BC4  2044      2810          move.l    D4,A0
00001BC6  30BC 4E4E 2811          move.w    #20046,(A0)
                    2812   ; BreakPointAddress[i] = BPAddress ;                              // record the address of this break point in the debugger
00001BCA  2002      2813          move.l    D2,D0
00001BCC  E588      2814          lsl.l     #2,D0
00001BCE  41F9 0803 2815          lea       _BreakPointAddress.L,A0
00001BD2  012E      
00001BD4  2183 0800 2816          move.l    D3,0(A0,D0.L)
                    2817   ; printf("\r\n") ;
00001BD8  4879 0000 2818          pea       @m68kde~1_6.L
00001BDC  4316      
00001BDE  4E92      2819          jsr       (A2)
00001BE0  584F      2820          addq.w    #4,A7
                    2821   ; BreakPointDisplay() ;       // display the break points
00001BE2  4EB8 16A6 2822          jsr       _BreakPointDisplay
                    2823   ; return ;
00001BE6  6006      2824          bra.s     SetBreakPoint_15
                    2825   SetBreakPoint_18:
00001BE8  5282      2826          addq.l    #1,D2
00001BEA  6000 FF7A 2827          bra       SetBreakPoint_13
                    2828   SetBreakPoint_15:
00001BEE  4CDF 0C1C 2829          movem.l   (A7)+,D2/D3/D4/A2/A3
00001BF2  4E5E      2830          unlk      A6
00001BF4  4E75      2831          rts
                    2832   ; }
                    2833   ; }
                    2834   ; }
                    2835   ; void SetWatchPoint(void)
                    2836   ; {
                    2837   _SetWatchPoint:
00001BF6  4E56 FFF8 2838          link      A6,#-8
00001BFA  48E7 3030 2839          movem.l   D2/D3/A2/A3,-(A7)
00001BFE  45F9 0000 2840          lea       _printf.L,A2
00001C02  3926      
00001C04  47F9 0803 2841          lea       _WatchPointSetOrCleared.L,A3
00001C08  01A2      
                    2842   ; int i ;
                    2843   ; int WPNumber;
                    2844   ; int WPAddress;
                    2845   ; volatile unsigned short int *ProgramWatchPointAddress ;
                    2846   ; // see if any free break points
                    2847   ; for(i = 0; i < 8; i ++) {
00001C0A  4282      2848          clr.l     D2
                    2849   SetWatchPoint_1:
00001C0C  0C82 0000 2850          cmp.l     #8,D2
00001C10  0008      
00001C12  6C10      2851          bge.s     SetWatchPoint_3
                    2852   ; if( WatchPointSetOrCleared[i] == 0)
00001C14  2002      2853          move.l    D2,D0
00001C16  E588      2854          lsl.l     #2,D0
00001C18  2033 0800 2855          move.l    0(A3,D0.L),D0
00001C1C  6602      2856          bne.s     SetWatchPoint_4
                    2857   ; break ;         // if spare WP found allow user to set it
00001C1E  6004      2858          bra.s     SetWatchPoint_3
                    2859   SetWatchPoint_4:
00001C20  5282      2860          addq.l    #1,D2
00001C22  60E8      2861          bra       SetWatchPoint_1
                    2862   SetWatchPoint_3:
                    2863   ; }
                    2864   ; if(i == 8) {
00001C24  0C82 0000 2865          cmp.l     #8,D2
00001C28  0008      
00001C2A  660E      2866          bne.s     SetWatchPoint_6
                    2867   ; printf("\r\nNo FREE Watch Points.....") ;
00001C2C  4879 0000 2868          pea       @m68kde~1_73.L
00001C30  4A28      
00001C32  4E92      2869          jsr       (A2)
00001C34  584F      2870          addq.w    #4,A7
                    2871   ; return ;
00001C36  6000 008C 2872          bra       SetWatchPoint_11
                    2873   SetWatchPoint_6:
                    2874   ; }
                    2875   ; printf("\r\nWatch Point Address: ") ;
00001C3A  4879 0000 2876          pea       @m68kde~1_74.L
00001C3E  4A44      
00001C40  4E92      2877          jsr       (A2)
00001C42  584F      2878          addq.w    #4,A7
                    2879   ; WPAddress = Get8HexDigits(0) ;
00001C44  42A7      2880          clr.l     -(A7)
00001C46  4EB8 0AD8 2881          jsr       _Get8HexDigits
00001C4A  584F      2882          addq.w    #4,A7
00001C4C  2600      2883          move.l    D0,D3
                    2884   ; // search for first free wp or existing same wp
                    2885   ; for(i = 0; i < 8; i++)  {
00001C4E  4282      2886          clr.l     D2
                    2887   SetWatchPoint_9:
00001C50  0C82 0000 2888          cmp.l     #8,D2
00001C54  0008      
00001C56  6C00 006C 2889          bge       SetWatchPoint_11
                    2890   ; if(WatchPointAddress[i] == WPAddress && WPAddress != 0)   {     //so we can set a wp at 0
00001C5A  2002      2891          move.l    D2,D0
00001C5C  E588      2892          lsl.l     #2,D0
00001C5E  41F9 0803 2893          lea       _WatchPointAddress.L,A0
00001C62  0182      
00001C64  B6B0 0800 2894          cmp.l     0(A0,D0.L),D3
00001C68  6614      2895          bne.s     SetWatchPoint_12
00001C6A  4A83      2896          tst.l     D3
00001C6C  6710      2897          beq.s     SetWatchPoint_12
                    2898   ; printf("\r\nError: Watch Point Already Set at Address : %08x\r\n", WPAddress) ;
00001C6E  2F03      2899          move.l    D3,-(A7)
00001C70  4879 0000 2900          pea       @m68kde~1_75.L
00001C74  4A5C      
00001C76  4E92      2901          jsr       (A2)
00001C78  504F      2902          addq.w    #8,A7
                    2903   ; return ;
00001C7A  6000 0048 2904          bra       SetWatchPoint_11
                    2905   SetWatchPoint_12:
                    2906   ; }
                    2907   ; if(WatchPointSetOrCleared[i] == 0) {
00001C7E  2002      2908          move.l    D2,D0
00001C80  E588      2909          lsl.l     #2,D0
00001C82  2033 0800 2910          move.l    0(A3,D0.L),D0
00001C86  6600 0038 2911          bne       SetWatchPoint_14
                    2912   ; WatchPointSetOrCleared[i] = 1 ;                                 // mark this watchpoint as set
00001C8A  2002      2913          move.l    D2,D0
00001C8C  E588      2914          lsl.l     #2,D0
00001C8E  27BC 0000 2915          move.l    #1,0(A3,D0.L)
00001C92  0001 0800 
                    2916   ; printf("\r\nWatch Point Set at Address: [$%08x]", WPAddress) ;
00001C96  2F03      2917          move.l    D3,-(A7)
00001C98  4879 0000 2918          pea       @m68kde~1_76.L
00001C9C  4A92      
00001C9E  4E92      2919          jsr       (A2)
00001CA0  504F      2920          addq.w    #8,A7
                    2921   ; WatchPointAddress[i] = WPAddress ;                              // record the address of this watch point in the debugger
00001CA2  2002      2922          move.l    D2,D0
00001CA4  E588      2923          lsl.l     #2,D0
00001CA6  41F9 0803 2924          lea       _WatchPointAddress.L,A0
00001CAA  0182      
00001CAC  2183 0800 2925          move.l    D3,0(A0,D0.L)
                    2926   ; printf("\r\n") ;
00001CB0  4879 0000 2927          pea       @m68kde~1_6.L
00001CB4  4316      
00001CB6  4E92      2928          jsr       (A2)
00001CB8  584F      2929          addq.w    #4,A7
                    2930   ; WatchPointDisplay() ;       // display the break points
00001CBA  4EB8 177A 2931          jsr       _WatchPointDisplay
                    2932   ; return ;
00001CBE  6004      2933          bra.s     SetWatchPoint_11
                    2934   SetWatchPoint_14:
00001CC0  5282      2935          addq.l    #1,D2
00001CC2  608C      2936          bra       SetWatchPoint_9
                    2937   SetWatchPoint_11:
00001CC4  4CDF 0C0C 2938          movem.l   (A7)+,D2/D3/A2/A3
00001CC8  4E5E      2939          unlk      A6
00001CCA  4E75      2940          rts
                    2941   ; }
                    2942   ; }
                    2943   ; }
                    2944   ; void HandleBreakPoint(void)
                    2945   ; {
                    2946   _HandleBreakPoint:
00001CCC  4E56 FFFC 2947          link      A6,#-4
00001CD0  48E7 0038 2948          movem.l   A2/A3/A4,-(A7)
00001CD4  45F9 0803 2949          lea       _i.L,A2
00001CD8  00C4      
00001CDA  47F9 0000 2950          lea       _printf.L,A3
00001CDE  3926      
00001CE0  49F9 0803 2951          lea       _PC.L,A4
00001CE4  0120      
                    2952   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2953   ; // now we have to put the break point back to run the instruction
                    2954   ; // PC will contain the address of the TRAP instruction but advanced by two bytes so lets play with that
                    2955   ; PC = PC - 2 ;  // ready for user to resume after reaching breakpoint
00001CE6  5594      2956          subq.l    #2,(A4)
                    2957   ; printf("\r\n\r\n\r\n\r\n@BREAKPOINT") ;
00001CE8  4879 0000 2958          pea       @m68kde~1_77.L
00001CEC  4AB8      
00001CEE  4E93      2959          jsr       (A3)
00001CF0  584F      2960          addq.w    #4,A7
                    2961   ; printf("\r\nSingle Step : [ON]") ;
00001CF2  4879 0000 2962          pea       @m68kde~1_78.L
00001CF6  4ACC      
00001CF8  4E93      2963          jsr       (A3)
00001CFA  584F      2964          addq.w    #4,A7
                    2965   ; printf("\r\nBreakPoints : [Enabled]") ;
00001CFC  4879 0000 2966          pea       @m68kde~1_79.L
00001D00  4AE2      
00001D02  4E93      2967          jsr       (A3)
00001D04  584F      2968          addq.w    #4,A7
                    2969   ; // now clear the break point (put original instruction back)
                    2970   ; ProgramBreakPointAddress = PC ;
00001D06  2D54 FFFC 2971          move.l    (A4),-4(A6)
                    2972   ; for(i = 0; i < 8; i ++) {
00001D0A  4292      2973          clr.l     (A2)
                    2974   HandleBreakPoint_1:
00001D0C  2012      2975          move.l    (A2),D0
00001D0E  0C80 0000 2976          cmp.l     #8,D0
00001D12  0008      
00001D14  6400 0056 2977          bhs       HandleBreakPoint_3
                    2978   ; if(BreakPointAddress[i] == PC) {        // if we have found the breakpoint
00001D18  2012      2979          move.l    (A2),D0
00001D1A  E588      2980          lsl.l     #2,D0
00001D1C  41F9 0803 2981          lea       _BreakPointAddress.L,A0
00001D20  012E      
00001D22  2230 0800 2982          move.l    0(A0,D0.L),D1
00001D26  B294      2983          cmp.l     (A4),D1
00001D28  6600 003E 2984          bne       HandleBreakPoint_4
                    2985   ; BreakPointAddress[i] = 0 ;
00001D2C  2012      2986          move.l    (A2),D0
00001D2E  E588      2987          lsl.l     #2,D0
00001D30  41F9 0803 2988          lea       _BreakPointAddress.L,A0
00001D34  012E      
00001D36  42B0 0800 2989          clr.l     0(A0,D0.L)
                    2990   ; BreakPointSetOrCleared[i] = 0 ;
00001D3A  2012      2991          move.l    (A2),D0
00001D3C  E588      2992          lsl.l     #2,D0
00001D3E  41F9 0803 2993          lea       _BreakPointSetOrCleared.L,A0
00001D42  015E      
00001D44  42B0 0800 2994          clr.l     0(A0,D0.L)
                    2995   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
00001D48  2012      2996          move.l    (A2),D0
00001D4A  E388      2997          lsl.l     #1,D0
00001D4C  41F9 0803 2998          lea       _BreakPointInstruction.L,A0
00001D50  014E      
00001D52  226E FFFC 2999          move.l    -4(A6),A1
00001D56  32B0 0800 3000          move.w    0(A0,D0.L),(A1)
                    3001   ; BreakPointInstruction[i] = 0 ;
00001D5A  2012      3002          move.l    (A2),D0
00001D5C  E388      3003          lsl.l     #1,D0
00001D5E  41F9 0803 3004          lea       _BreakPointInstruction.L,A0
00001D62  014E      
00001D64  4270 0800 3005          clr.w     0(A0,D0.L)
                    3006   HandleBreakPoint_4:
00001D68  5292      3007          addq.l    #1,(A2)
00001D6A  60A0      3008          bra       HandleBreakPoint_1
                    3009   HandleBreakPoint_3:
                    3010   ; }
                    3011   ; }
                    3012   ; DumpRegisters() ;
00001D6C  4EB8 0EF8 3013          jsr       _DumpRegisters
                    3014   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
00001D70  4879 0000 3015          pea       @m68kde~1_41.L
00001D74  465E      
00001D76  4E93      3016          jsr       (A3)
00001D78  584F      3017          addq.w    #4,A7
                    3018   ; printf("\r\nPress <ESC> to Resume User Program\r\n") ;
00001D7A  4879 0000 3019          pea       @m68kde~1_80.L
00001D7E  4AFC      
00001D80  4E93      3020          jsr       (A3)
00001D82  584F      3021          addq.w    #4,A7
                    3022   ; menu() ;
00001D84  4EB9 0000 3023          jsr       _menu
00001D88  1F04      
00001D8A  4CDF 1C00 3024          movem.l   (A7)+,A2/A3/A4
00001D8E  4E5E      3025          unlk      A6
00001D90  4E75      3026          rts
                    3027   ; }
                    3028   ; void UnknownCommand()
                    3029   ; {
                    3030   _UnknownCommand:
                    3031   ; printf("\r\nUnknown Command.....\r\n") ;
00001D92  4879 0000 3032          pea       @m68kde~1_81.L
00001D96  4B24      
00001D98  4EB9 0000 3033          jsr       _printf
00001D9C  3926      
00001D9E  584F      3034          addq.w    #4,A7
                    3035   ; Help() ;
00001DA0  4EB9 0000 3036          jsr       _Help
00001DA4  1EB6      
00001DA6  4E75      3037          rts
                    3038   ; }
                    3039   ; // system when the users program executes a TRAP #15 instruction to halt program and return to debug monitor
                    3040   ; void CallDebugMonitor(void)
                    3041   ; {
                    3042   _CallDebugMonitor:
                    3043   ; printf("\r\nProgram Ended (TRAP #15)....") ;
00001DA8  4879 0000 3044          pea       @m68kde~1_82.L
00001DAC  4B3E      
00001DAE  4EB9 0000 3045          jsr       _printf
00001DB2  3926      
00001DB4  584F      3046          addq.w    #4,A7
                    3047   ; menu();
00001DB6  4EB9 0000 3048          jsr       _menu
00001DBA  1F04      
00001DBC  4E75      3049          rts
                    3050   ; }
                    3051   ; void Breakpoint(void)
                    3052   ; {
                    3053   _Breakpoint:
00001DBE  2F02      3054          move.l    D2,-(A7)
                    3055   ; char c;
                    3056   ; c = toupper(_getch());
00001DC0  2F00      3057          move.l    D0,-(A7)
00001DC2  4EB8 099C 3058          jsr       __getch
00001DC6  2200      3059          move.l    D0,D1
00001DC8  201F      3060          move.l    (A7)+,D0
00001DCA  2F01      3061          move.l    D1,-(A7)
00001DCC  4EB9 0000 3062          jsr       _toupper
00001DD0  38FA      
00001DD2  584F      3063          addq.w    #4,A7
00001DD4  1400      3064          move.b    D0,D2
                    3065   ; if( c == (char)('D'))                                      // BreakPoint Display
00001DD6  0C02 0044 3066          cmp.b     #68,D2
00001DDA  6608      3067          bne.s     Breakpoint_1
                    3068   ; BreakPointDisplay() ;
00001DDC  4EB8 16A6 3069          jsr       _BreakPointDisplay
00001DE0  6000 0054 3070          bra       Breakpoint_10
                    3071   Breakpoint_1:
                    3072   ; else if(c == (char)('K')) {                                 // breakpoint Kill
00001DE4  0C02 004B 3073          cmp.b     #75,D2
00001DE8  6630      3074          bne.s     Breakpoint_3
                    3075   ; printf("\r\nKill All Break Points...(y/n)?") ;
00001DEA  4879 0000 3076          pea       @m68kde~1_83.L
00001DEE  4B5E      
00001DF0  4EB9 0000 3077          jsr       _printf
00001DF4  3926      
00001DF6  584F      3078          addq.w    #4,A7
                    3079   ; c = toupper(_getch());
00001DF8  2F00      3080          move.l    D0,-(A7)
00001DFA  4EB8 099C 3081          jsr       __getch
00001DFE  2200      3082          move.l    D0,D1
00001E00  201F      3083          move.l    (A7)+,D0
00001E02  2F01      3084          move.l    D1,-(A7)
00001E04  4EB9 0000 3085          jsr       _toupper
00001E08  38FA      
00001E0A  584F      3086          addq.w    #4,A7
00001E0C  1400      3087          move.b    D0,D2
                    3088   ; if(c == (char)('Y'))
00001E0E  0C02 0059 3089          cmp.b     #89,D2
00001E12  6604      3090          bne.s     Breakpoint_5
                    3091   ; KillAllBreakPoints() ;
00001E14  4EB8 1A3E 3092          jsr       _KillAllBreakPoints
                    3093   Breakpoint_5:
00001E18  601C      3094          bra.s     Breakpoint_10
                    3095   Breakpoint_3:
                    3096   ; }
                    3097   ; else if(c == (char)('S')) {
00001E1A  0C02 0053 3098          cmp.b     #83,D2
00001E1E  6606      3099          bne.s     Breakpoint_7
                    3100   ; SetBreakPoint() ;
00001E20  4EB8 1AD6 3101          jsr       _SetBreakPoint
00001E24  6010      3102          bra.s     Breakpoint_10
                    3103   Breakpoint_7:
                    3104   ; }
                    3105   ; else if(c == (char)('C')) {
00001E26  0C02 0043 3106          cmp.b     #67,D2
00001E2A  6606      3107          bne.s     Breakpoint_9
                    3108   ; BreakPointClear() ;
00001E2C  4EB8 1826 3109          jsr       _BreakPointClear
00001E30  6004      3110          bra.s     Breakpoint_10
                    3111   Breakpoint_9:
                    3112   ; }
                    3113   ; else
                    3114   ; UnknownCommand() ;
00001E32  4EB8 1D92 3115          jsr       _UnknownCommand
                    3116   Breakpoint_10:
00001E36  241F      3117          move.l    (A7)+,D2
00001E38  4E75      3118          rts
                    3119   ; }
                    3120   ; void Watchpoint(void)
                    3121   ; {
                    3122   _Watchpoint:
00001E3A  2F02      3123          move.l    D2,-(A7)
                    3124   ; char c;
                    3125   ; c = toupper(_getch());
00001E3C  2F00      3126          move.l    D0,-(A7)
00001E3E  4EB8 099C 3127          jsr       __getch
00001E42  2200      3128          move.l    D0,D1
00001E44  201F      3129          move.l    (A7)+,D0
00001E46  2F01      3130          move.l    D1,-(A7)
00001E48  4EB9 0000 3131          jsr       _toupper
00001E4C  38FA      
00001E4E  584F      3132          addq.w    #4,A7
00001E50  1400      3133          move.b    D0,D2
                    3134   ; if( c == (char)('D'))                                      // WatchPoint Display
00001E52  0C02 0044 3135          cmp.b     #68,D2
00001E56  6608      3136          bne.s     Watchpoint_1
                    3137   ; WatchPointDisplay() ;
00001E58  4EB8 177A 3138          jsr       _WatchPointDisplay
00001E5C  6000 0054 3139          bra       Watchpoint_10
                    3140   Watchpoint_1:
                    3141   ; else if(c == (char)('K')) {                                 // wtahcpoint Kill
00001E60  0C02 004B 3142          cmp.b     #75,D2
00001E64  6630      3143          bne.s     Watchpoint_3
                    3144   ; printf("\r\nKill All Watch Points...(y/n)?") ;
00001E66  4879 0000 3145          pea       @m68kde~1_84.L
00001E6A  4B80      
00001E6C  4EB9 0000 3146          jsr       _printf
00001E70  3926      
00001E72  584F      3147          addq.w    #4,A7
                    3148   ; c = toupper(_getch());
00001E74  2F00      3149          move.l    D0,-(A7)
00001E76  4EB8 099C 3150          jsr       __getch
00001E7A  2200      3151          move.l    D0,D1
00001E7C  201F      3152          move.l    (A7)+,D0
00001E7E  2F01      3153          move.l    D1,-(A7)
00001E80  4EB9 0000 3154          jsr       _toupper
00001E84  38FA      
00001E86  584F      3155          addq.w    #4,A7
00001E88  1400      3156          move.b    D0,D2
                    3157   ; if(c == (char)('Y'))
00001E8A  0C02 0059 3158          cmp.b     #89,D2
00001E8E  6604      3159          bne.s     Watchpoint_5
                    3160   ; KillAllWatchPoints() ;
00001E90  4EB8 1AA6 3161          jsr       _KillAllWatchPoints
                    3162   Watchpoint_5:
00001E94  601C      3163          bra.s     Watchpoint_10
                    3164   Watchpoint_3:
                    3165   ; }
                    3166   ; else if(c == (char)('S')) {
00001E96  0C02 0053 3167          cmp.b     #83,D2
00001E9A  6606      3168          bne.s     Watchpoint_7
                    3169   ; SetWatchPoint() ;
00001E9C  4EB8 1BF6 3170          jsr       _SetWatchPoint
00001EA0  6010      3171          bra.s     Watchpoint_10
                    3172   Watchpoint_7:
                    3173   ; }
                    3174   ; else if(c == (char)('C')) {
00001EA2  0C02 0043 3175          cmp.b     #67,D2
00001EA6  6606      3176          bne.s     Watchpoint_9
                    3177   ; WatchPointClear() ;
00001EA8  4EB8 1900 3178          jsr       _WatchPointClear
00001EAC  6004      3179          bra.s     Watchpoint_10
                    3180   Watchpoint_9:
                    3181   ; }
                    3182   ; else
                    3183   ; UnknownCommand() ;
00001EAE  4EB8 1D92 3184          jsr       _UnknownCommand
                    3185   Watchpoint_10:
00001EB2  241F      3186          move.l    (A7)+,D2
00001EB4  4E75      3187          rts
                    3188   ; }
                    3189   ; void Help(void)
                    3190   ; {
                    3191   _Help:
00001EB6  48E7 2020 3192          movem.l   D2/A2,-(A7)
00001EBA  45F9 0000 3193          lea       _printf.L,A2
00001EBE  3926      
                    3194   ; char *banner = "\r\n----------------------------------------------------------------" ;
00001EC0  41F9 0000 3195          lea       @m68kde~1_85.L,A0
00001EC4  4BA2      
00001EC6  2408      3196          move.l    A0,D2
                    3197   ; printf(banner) ;
00001EC8  2F02      3198          move.l    D2,-(A7)
00001ECA  4E92      3199          jsr       (A2)
00001ECC  584F      3200          addq.w    #4,A7
                    3201   ; printf("\r\n  Final Project") ;
00001ECE  4879 0000 3202          pea       @m68kde~1_86.L
00001ED2  4BE6      
00001ED4  4E92      3203          jsr       (A2)
00001ED6  584F      3204          addq.w    #4,A7
                    3205   ; printf(banner) ;
00001ED8  2F02      3206          move.l    D2,-(A7)
00001EDA  4E92      3207          jsr       (A2)
00001EDC  584F      3208          addq.w    #4,A7
                    3209   ; printf("\r\n  H    - Say Hello World") ;
00001EDE  4879 0000 3210          pea       @m68kde~1_87.L
00001EE2  4BF8      
00001EE4  4E92      3211          jsr       (A2)
00001EE6  584F      3212          addq.w    #4,A7
                    3213   ; printf(banner) ;
00001EE8  2F02      3214          move.l    D2,-(A7)
00001EEA  4E92      3215          jsr       (A2)
00001EEC  584F      3216          addq.w    #4,A7
                    3217   ; printf("\r\n  T    - Run Tetris Game") ;
00001EEE  4879 0000 3218          pea       @m68kde~1_88.L
00001EF2  4C14      
00001EF4  4E92      3219          jsr       (A2)
00001EF6  584F      3220          addq.w    #4,A7
                    3221   ; printf(banner) ;
00001EF8  2F02      3222          move.l    D2,-(A7)
00001EFA  4E92      3223          jsr       (A2)
00001EFC  584F      3224          addq.w    #4,A7
00001EFE  4CDF 0404 3225          movem.l   (A7)+,D2/A2
00001F02  4E75      3226          rts
                    3227   ; }
                    3228   ; void menu(void)
                    3229   ; {
                    3230   _menu:
00001F04  4E56 FFFC 3231          link      A6,#-4
00001F08  48E7 2020 3232          movem.l   D2/A2,-(A7)
00001F0C  45F9 0000 3233          lea       _printf.L,A2
00001F10  3926      
                    3234   ; char c;
                    3235   ; int c1 ;
                    3236   ; while(1)    {
                    3237   menu_1:
                    3238   ; FlushKeyboard() ;               // dump unread characters from keyboard
00001F12  4EB8 09DA 3239          jsr       _FlushKeyboard
                    3240   ; printf("\r\n#") ;
00001F16  4879 0000 3241          pea       @m68kde~1_89.L
00001F1A  4C30      
00001F1C  4E92      3242          jsr       (A2)
00001F1E  584F      3243          addq.w    #4,A7
                    3244   ; c = toupper(_getch());
00001F20  2F00      3245          move.l    D0,-(A7)
00001F22  4EB8 099C 3246          jsr       __getch
00001F26  2200      3247          move.l    D0,D1
00001F28  201F      3248          move.l    (A7)+,D0
00001F2A  2F01      3249          move.l    D1,-(A7)
00001F2C  4EB9 0000 3250          jsr       _toupper
00001F30  38FA      
00001F32  584F      3251          addq.w    #4,A7
00001F34  1400      3252          move.b    D0,D2
                    3253   ; if ( c == (char)('T'))  {
00001F36  0C02 0054 3254          cmp.b     #84,D2
00001F3A  6622      3255          bne.s     menu_4
                    3256   ; printf("\nRunning Tetris Game\n");
00001F3C  4879 0000 3257          pea       @m68kde~1_90.L
00001F40  4C34      
00001F42  4E92      3258          jsr       (A2)
00001F44  584F      3259          addq.w    #4,A7
                    3260   ; Timer1Data = 0x03;
00001F46  13FC 0003 3261          move.b    #3,4194352
00001F4A  0040 0030 
                    3262   ; Timer1Control = 3;
00001F4E  13FC 0003 3263          move.b    #3,4194354
00001F52  0040 0032 
                    3264   ; tetris_main(); // Call tetris_main and store the returned score
00001F56  4EB9 0000 3265          jsr       _tetris_main
00001F5A  34C2      
                    3266   ; continue;
00001F5C  601E      3267          bra.s     menu_2
                    3268   menu_4:
                    3269   ; }
                    3270   ; if ( c == (char)('H'))  {
00001F5E  0C02 0048 3271          cmp.b     #72,D2
00001F62  6614      3272          bne.s     menu_6
                    3273   ; printf("\nSaying Hello World\n");
00001F64  4879 0000 3274          pea       @m68kde~1_91.L
00001F68  4C4A      
00001F6A  4E92      3275          jsr       (A2)
00001F6C  584F      3276          addq.w    #4,A7
                    3277   ; say_hello();
00001F6E  4EB8 0900 3278          jsr       _say_hello
                    3279   ; say_world();
00001F72  4EB8 0926 3280          jsr       _say_world
                    3281   ; continue;
00001F76  6004      3282          bra.s     menu_2
                    3283   menu_6:
                    3284   ; }
                    3285   ; UnknownCommand() ;
00001F78  4EB8 1D92 3286          jsr       _UnknownCommand
                    3287   menu_2:
00001F7C  6094      3288          bra       menu_1
                    3289   ; }
                    3290   ; }
                    3291   ; void PrintErrorMessageandAbort(char *string) {
                    3292   _PrintErrorMessageandAbort:
00001F7E  4E56 0000 3293          link      A6,#0
                    3294   ; printf("\r\n\r\nProgram ABORT !!!!!!\r\n") ;
00001F82  4879 0000 3295          pea       @m68kde~1_92.L
00001F86  4C60      
00001F88  4EB9 0000 3296          jsr       _printf
00001F8C  3926      
00001F8E  584F      3297          addq.w    #4,A7
                    3298   ; printf("%s\r\n", string) ;
00001F90  2F2E 0008 3299          move.l    8(A6),-(A7)
00001F94  4879 0000 3300          pea       @m68kde~1_93.L
00001F98  4C7C      
00001F9A  4EB9 0000 3301          jsr       _printf
00001F9E  3926      
00001FA0  504F      3302          addq.w    #8,A7
                    3303   ; menu() ;
00001FA2  4EB8 1F04 3304          jsr       _menu
00001FA6  4E5E      3305          unlk      A6
00001FA8  4E75      3306          rts
                    3307   ; }
                    3308   ; void IRQMessage(int level) {
                    3309   _IRQMessage:
00001FAA  4E56 0000 3310          link      A6,#0
                    3311   ; printf("\r\n\r\nProgram ABORT !!!!!");
00001FAE  4879 0000 3312          pea       @m68kde~1_94.L
00001FB2  4C82      
00001FB4  4EB9 0000 3313          jsr       _printf
00001FB8  3926      
00001FBA  584F      3314          addq.w    #4,A7
                    3315   ; printf("\r\nUnhandled Interrupt: IRQ%d !!!!!", level) ;
00001FBC  2F2E 0008 3316          move.l    8(A6),-(A7)
00001FC0  4879 0000 3317          pea       @m68kde~1_95.L
00001FC4  4C9A      
00001FC6  4EB9 0000 3318          jsr       _printf
00001FCA  3926      
00001FCC  504F      3319          addq.w    #8,A7
                    3320   ; menu() ;
00001FCE  4EB8 1F04 3321          jsr       _menu
00001FD2  4E5E      3322          unlk      A6
00001FD4  4E75      3323          rts
                    3324   ; }
                    3325   ; void UnhandledIRQ1(void) {
                    3326   _UnhandledIRQ1:
                    3327   ; IRQMessage(1);
00001FD6  4878 0001 3328          pea       1
00001FDA  4EB8 1FAA 3329          jsr       _IRQMessage
00001FDE  584F      3330          addq.w    #4,A7
00001FE0  4E75      3331          rts
                    3332   ; }
                    3333   ; void UnhandledIRQ2(void) {
                    3334   _UnhandledIRQ2:
                    3335   ; IRQMessage(2);
00001FE2  4878 0002 3336          pea       2
00001FE6  4EB8 1FAA 3337          jsr       _IRQMessage
00001FEA  584F      3338          addq.w    #4,A7
00001FEC  4E75      3339          rts
                    3340   ; }
                    3341   ; void UnhandledIRQ3(void){
                    3342   _UnhandledIRQ3:
                    3343   ; IRQMessage(3);
00001FEE  4878 0003 3344          pea       3
00001FF2  4EB8 1FAA 3345          jsr       _IRQMessage
00001FF6  584F      3346          addq.w    #4,A7
00001FF8  4E75      3347          rts
                    3348   ; }
                    3349   ; void UnhandledIRQ4(void) {
                    3350   _UnhandledIRQ4:
                    3351   ; IRQMessage(4);
00001FFA  4878 0004 3352          pea       4
00001FFE  4EB8 1FAA 3353          jsr       _IRQMessage
00002002  584F      3354          addq.w    #4,A7
00002004  4E75      3355          rts
                    3356   ; }
                    3357   ; void UnhandledIRQ5(void) {
                    3358   _UnhandledIRQ5:
                    3359   ; IRQMessage(5);
00002006  4878 0005 3360          pea       5
0000200A  4EB8 1FAA 3361          jsr       _IRQMessage
0000200E  584F      3362          addq.w    #4,A7
00002010  4E75      3363          rts
                    3364   ; }
                    3365   ; void UnhandledIRQ6(void) {
                    3366   _UnhandledIRQ6:
                    3367   ; PrintErrorMessageandAbort("ADDRESS ERROR: 16 or 32 Bit Transfer to/from an ODD Address....") ;
00002012  4879 0000 3368          pea       @m68kde~1_96.L
00002016  4CBE      
00002018  4EB8 1F7E 3369          jsr       _PrintErrorMessageandAbort
0000201C  584F      3370          addq.w    #4,A7
                    3371   ; menu() ;
0000201E  4EB8 1F04 3372          jsr       _menu
00002022  4E75      3373          rts
                    3374   ; }
                    3375   ; void UnhandledIRQ7(void) {
                    3376   _UnhandledIRQ7:
                    3377   ; IRQMessage(7);
00002024  4878 0007 3378          pea       7
00002028  4EB8 1FAA 3379          jsr       _IRQMessage
0000202C  584F      3380          addq.w    #4,A7
0000202E  4E75      3381          rts
                    3382   ; }
                    3383   ; void UnhandledTrap(void) {
                    3384   _UnhandledTrap:
                    3385   ; PrintErrorMessageandAbort("Unhandled Trap !!!!!") ;
00002030  4879 0000 3386          pea       @m68kde~1_97.L
00002034  4CFE      
00002036  4EB8 1F7E 3387          jsr       _PrintErrorMessageandAbort
0000203A  584F      3388          addq.w    #4,A7
0000203C  4E75      3389          rts
                    3390   ; }
                    3391   ; void BusError() {
                    3392   _BusError:
                    3393   ; PrintErrorMessageandAbort("BUS Error!") ;
0000203E  4879 0000 3394          pea       @m68kde~1_98.L
00002042  4D14      
00002044  4EB8 1F7E 3395          jsr       _PrintErrorMessageandAbort
00002048  584F      3396          addq.w    #4,A7
0000204A  4E75      3397          rts
                    3398   ; }
                    3399   ; void AddressError() {
                    3400   _AddressError:
                    3401   ; PrintErrorMessageandAbort("ADDRESS Error!") ;
0000204C  4879 0000 3402          pea       @m68kde~1_99.L
00002050  4D20      
00002052  4EB8 1F7E 3403          jsr       _PrintErrorMessageandAbort
00002056  584F      3404          addq.w    #4,A7
00002058  4E75      3405          rts
                    3406   ; }
                    3407   ; void IllegalInstruction() {
                    3408   _IllegalInstruction:
                    3409   ; PrintErrorMessageandAbort("ILLEGAL INSTRUCTION") ;
0000205A  4879 0000 3410          pea       @m68kde~1_100.L
0000205E  4D30      
00002060  4EB8 1F7E 3411          jsr       _PrintErrorMessageandAbort
00002064  584F      3412          addq.w    #4,A7
00002066  4E75      3413          rts
                    3414   ; }
                    3415   ; void Dividebyzero() {
                    3416   _Dividebyzero:
                    3417   ; PrintErrorMessageandAbort("DIVIDE BY ZERO") ;
00002068  4879 0000 3418          pea       @m68kde~1_101.L
0000206C  4D44      
0000206E  4EB8 1F7E 3419          jsr       _PrintErrorMessageandAbort
00002072  584F      3420          addq.w    #4,A7
00002074  4E75      3421          rts
                    3422   ; }
                    3423   ; void Check() {
                    3424   _Check:
                    3425   ; PrintErrorMessageandAbort("'CHK' INSTRUCTION") ;
00002076  4879 0000 3426          pea       @m68kde~1_102.L
0000207A  4D54      
0000207C  4EB8 1F7E 3427          jsr       _PrintErrorMessageandAbort
00002080  584F      3428          addq.w    #4,A7
00002082  4E75      3429          rts
                    3430   ; }
                    3431   ; void Trapv() {
                    3432   _Trapv:
                    3433   ; PrintErrorMessageandAbort("TRAPV INSTRUCTION") ;
00002084  4879 0000 3434          pea       @m68kde~1_103.L
00002088  4D66      
0000208A  4EB8 1F7E 3435          jsr       _PrintErrorMessageandAbort
0000208E  584F      3436          addq.w    #4,A7
00002090  4E75      3437          rts
                    3438   ; }
                    3439   ; void PrivError() {
                    3440   _PrivError:
                    3441   ; PrintErrorMessageandAbort("PRIVILEGE VIOLATION") ;
00002092  4879 0000 3442          pea       @m68kde~1_104.L
00002096  4D78      
00002098  4EB8 1F7E 3443          jsr       _PrintErrorMessageandAbort
0000209C  584F      3444          addq.w    #4,A7
0000209E  4E75      3445          rts
                    3446   ; }
                    3447   ; void UnitIRQ() {
                    3448   _UnitIRQ:
                    3449   ; PrintErrorMessageandAbort("UNINITIALISED IRQ") ;
000020A0  4879 0000 3450          pea       @m68kde~1_105.L
000020A4  4D8C      
000020A6  4EB8 1F7E 3451          jsr       _PrintErrorMessageandAbort
000020AA  584F      3452          addq.w    #4,A7
000020AC  4E75      3453          rts
                    3454   ; }
                    3455   ; void Spurious() {
                    3456   _Spurious:
                    3457   ; PrintErrorMessageandAbort("SPURIOUS IRQ") ;
000020AE  4879 0000 3458          pea       @m68kde~1_106.L
000020B2  4D9E      
000020B4  4EB8 1F7E 3459          jsr       _PrintErrorMessageandAbort
000020B8  584F      3460          addq.w    #4,A7
000020BA  4E75      3461          rts
                    3462   ; }
                    3463   ; void main(void)
                    3464   ; {
                    3465   _main:
000020BC  4E56 FFF0 3466          link      A6,#-16
000020C0  48E7 2020 3467          movem.l   D2/A2,-(A7)
000020C4  45F8 08C6 3468          lea       _InstallExceptionHandler.L,A2
                    3469   ; char c ;
                    3470   ; int i, j ;
                    3471   ; char *BugMessage = "DE1-68k Bug V1.77\r\nStudent Solution Final Project 2023W2";
000020C8  41F9 0000 3472          lea       @m68kde~1_107.L,A0
000020CC  4DAC      
000020CE  2D48 FFF8 3473          move.l    A0,-8(A6)
                    3474   ; char *CopyrightMessage = "Copyright (C) Aaran Poon, 36228203";
000020D2  41F9 0000 3475          lea       @m68kde~1_108.L,A0
000020D6  4DE6      
000020D8  2D48 FFFC 3476          move.l    A0,-4(A6)
                    3477   ; KillAllBreakPoints() ;
000020DC  4EB8 1A3E 3478          jsr       _KillAllBreakPoints
                    3479   ; i = x = y = z = PortA_Count = 0;
000020E0  42B9 0803 3480          clr.l     _PortA_Count.L
000020E4  00D4      
000020E6  42B9 0803 3481          clr.l     _z.L
000020EA  00D0      
000020EC  42B9 0803 3482          clr.l     _y.L
000020F0  00CC      
000020F2  42B9 0803 3483          clr.l     _x.L
000020F6  00C8      
000020F8  4282      3484          clr.l     D2
                    3485   ; Trace = GoFlag = 0;                       // used in tracing/single stepping
000020FA  42B9 0803 3486          clr.l     _GoFlag.L
000020FE  00DC      
00002100  42B9 0803 3487          clr.l     _Trace.L
00002104  00D8      
                    3488   ; Echo = 1 ;
00002106  23FC 0000 3489          move.l    #1,_Echo.L
0000210A  0001 0803 
0000210E  00E0      
                    3490   ; // Initialise Breakpoint variables
                    3491   ; for(i = 0; i < 8; i++)  {
00002110  4282      3492          clr.l     D2
                    3493   main_1:
00002112  0C82 0000 3494          cmp.l     #8,D2
00002116  0008      
00002118  6C00 004C 3495          bge       main_3
                    3496   ; BreakPointAddress[i] = 0;               //array of 8 breakpoint addresses
0000211C  2002      3497          move.l    D2,D0
0000211E  E588      3498          lsl.l     #2,D0
00002120  41F9 0803 3499          lea       _BreakPointAddress.L,A0
00002124  012E      
00002126  42B0 0800 3500          clr.l     0(A0,D0.L)
                    3501   ; WatchPointAddress[i] = 0 ;
0000212A  2002      3502          move.l    D2,D0
0000212C  E588      3503          lsl.l     #2,D0
0000212E  41F9 0803 3504          lea       _WatchPointAddress.L,A0
00002132  0182      
00002134  42B0 0800 3505          clr.l     0(A0,D0.L)
                    3506   ; BreakPointInstruction[i] = 0;           // to hold the instruction at the break point
00002138  2002      3507          move.l    D2,D0
0000213A  E388      3508          lsl.l     #1,D0
0000213C  41F9 0803 3509          lea       _BreakPointInstruction.L,A0
00002140  014E      
00002142  4270 0800 3510          clr.w     0(A0,D0.L)
                    3511   ; BreakPointSetOrCleared[i] = 0;          // indicates if break point set
00002146  2002      3512          move.l    D2,D0
00002148  E588      3513          lsl.l     #2,D0
0000214A  41F9 0803 3514          lea       _BreakPointSetOrCleared.L,A0
0000214E  015E      
00002150  42B0 0800 3515          clr.l     0(A0,D0.L)
                    3516   ; WatchPointSetOrCleared[i] = 0;
00002154  2002      3517          move.l    D2,D0
00002156  E588      3518          lsl.l     #2,D0
00002158  41F9 0803 3519          lea       _WatchPointSetOrCleared.L,A0
0000215C  01A2      
0000215E  42B0 0800 3520          clr.l     0(A0,D0.L)
00002162  5282      3521          addq.l    #1,D2
00002164  60AC      3522          bra       main_1
                    3523   main_3:
                    3524   ; }
                    3525   ; Init_RS232() ;     // initialise the RS232 port
00002166  4EB8 0946 3526          jsr       _Init_RS232
                    3527   ; for( i = 32; i < 48; i++)
0000216A  7420      3528          moveq     #32,D2
                    3529   main_4:
0000216C  0C82 0000 3530          cmp.l     #48,D2
00002170  0030      
00002172  6C0E      3531          bge.s     main_6
                    3532   ; InstallExceptionHandler(UnhandledTrap, i) ;		        // install Trap exception handler on vector 32-47
00002174  2F02      3533          move.l    D2,-(A7)
00002176  4878 2030 3534          pea       _UnhandledTrap.L
0000217A  4E92      3535          jsr       (A2)
0000217C  504F      3536          addq.w    #8,A7
0000217E  5282      3537          addq.l    #1,D2
00002180  60EA      3538          bra       main_4
                    3539   main_6:
                    3540   ; InstallExceptionHandler(menu, 47) ;		                   // TRAP #15 call debug and end program
00002182  4878 002F 3541          pea       47
00002186  4878 1F04 3542          pea       _menu.L
0000218A  4E92      3543          jsr       (A2)
0000218C  504F      3544          addq.w    #8,A7
                    3545   ; InstallExceptionHandler(UnhandledIRQ1, 25) ;		      // install handler for interrupts
0000218E  4878 0019 3546          pea       25
00002192  4878 1FD6 3547          pea       _UnhandledIRQ1.L
00002196  4E92      3548          jsr       (A2)
00002198  504F      3549          addq.w    #8,A7
                    3550   ; InstallExceptionHandler(UnhandledIRQ2, 26) ;		      // install handler for interrupts
0000219A  4878 001A 3551          pea       26
0000219E  4878 1FE2 3552          pea       _UnhandledIRQ2.L
000021A2  4E92      3553          jsr       (A2)
000021A4  504F      3554          addq.w    #8,A7
                    3555   ; InstallExceptionHandler(UnhandledIRQ3, 27) ;		      // install handler for interrupts
000021A6  4878 001B 3556          pea       27
000021AA  4878 1FEE 3557          pea       _UnhandledIRQ3.L
000021AE  4E92      3558          jsr       (A2)
000021B0  504F      3559          addq.w    #8,A7
                    3560   ; InstallExceptionHandler(UnhandledIRQ4, 28) ;		      // install handler for interrupts
000021B2  4878 001C 3561          pea       28
000021B6  4878 1FFA 3562          pea       _UnhandledIRQ4.L
000021BA  4E92      3563          jsr       (A2)
000021BC  504F      3564          addq.w    #8,A7
                    3565   ; InstallExceptionHandler(UnhandledIRQ5, 29) ;		      // install handler for interrupts
000021BE  4878 001D 3566          pea       29
000021C2  4878 2006 3567          pea       _UnhandledIRQ5.L
000021C6  4E92      3568          jsr       (A2)
000021C8  504F      3569          addq.w    #8,A7
                    3570   ; InstallExceptionHandler(UnhandledIRQ6, 30) ;		      // install handler for interrupts
000021CA  4878 001E 3571          pea       30
000021CE  4878 2012 3572          pea       _UnhandledIRQ6.L
000021D2  4E92      3573          jsr       (A2)
000021D4  504F      3574          addq.w    #8,A7
                    3575   ; InstallExceptionHandler(UnhandledIRQ7, 31) ;		      // install handler for interrupts
000021D6  4878 001F 3576          pea       31
000021DA  4878 2024 3577          pea       _UnhandledIRQ7.L
000021DE  4E92      3578          jsr       (A2)
000021E0  504F      3579          addq.w    #8,A7
                    3580   ; InstallExceptionHandler(HandleBreakPoint, 46) ;		           // install Trap 14 Break Point exception handler on vector 46
000021E2  4878 002E 3581          pea       46
000021E6  4878 1CCC 3582          pea       _HandleBreakPoint.L
000021EA  4E92      3583          jsr       (A2)
000021EC  504F      3584          addq.w    #8,A7
                    3585   ; InstallExceptionHandler(DumpRegistersandPause, 29) ;		   // install TRACE handler for IRQ5 on vector 29
000021EE  4878 001D 3586          pea       29
000021F2  4878 13AC 3587          pea       _DumpRegistersandPause.L
000021F6  4E92      3588          jsr       (A2)
000021F8  504F      3589          addq.w    #8,A7
                    3590   ; InstallExceptionHandler(BusError,2) ;                          // install Bus error handler
000021FA  4878 0002 3591          pea       2
000021FE  4878 203E 3592          pea       _BusError.L
00002202  4E92      3593          jsr       (A2)
00002204  504F      3594          addq.w    #8,A7
                    3595   ; InstallExceptionHandler(AddressError,3) ;                      // install address error handler (doesn't work on soft core 68k implementation)
00002206  4878 0003 3596          pea       3
0000220A  4878 204C 3597          pea       _AddressError.L
0000220E  4E92      3598          jsr       (A2)
00002210  504F      3599          addq.w    #8,A7
                    3600   ; InstallExceptionHandler(IllegalInstruction,4) ;                // install illegal instruction exception handler
00002212  4878 0004 3601          pea       4
00002216  4878 205A 3602          pea       _IllegalInstruction.L
0000221A  4E92      3603          jsr       (A2)
0000221C  504F      3604          addq.w    #8,A7
                    3605   ; InstallExceptionHandler(Dividebyzero,5) ;                      // install /0 exception handler
0000221E  4878 0005 3606          pea       5
00002222  4878 2068 3607          pea       _Dividebyzero.L
00002226  4E92      3608          jsr       (A2)
00002228  504F      3609          addq.w    #8,A7
                    3610   ; InstallExceptionHandler(Check,6) ;                             // install check instruction exception handler
0000222A  4878 0006 3611          pea       6
0000222E  4878 2076 3612          pea       _Check.L
00002232  4E92      3613          jsr       (A2)
00002234  504F      3614          addq.w    #8,A7
                    3615   ; InstallExceptionHandler(Trapv,7) ;                             // install trapv instruction exception handler
00002236  4878 0007 3616          pea       7
0000223A  4878 2084 3617          pea       _Trapv.L
0000223E  4E92      3618          jsr       (A2)
00002240  504F      3619          addq.w    #8,A7
                    3620   ; InstallExceptionHandler(PrivError,8) ;                         // install Priv Violation exception handler
00002242  4878 0008 3621          pea       8
00002246  4878 2092 3622          pea       _PrivError.L
0000224A  4E92      3623          jsr       (A2)
0000224C  504F      3624          addq.w    #8,A7
                    3625   ; InstallExceptionHandler(UnitIRQ,15) ;                          // install uninitialised IRQ exception handler
0000224E  4878 000F 3626          pea       15
00002252  4878 20A0 3627          pea       _UnitIRQ.L
00002256  4E92      3628          jsr       (A2)
00002258  504F      3629          addq.w    #8,A7
                    3630   ; InstallExceptionHandler(Check,24) ;                            // install spurious IRQ exception handler
0000225A  4878 0018 3631          pea       24
0000225E  4878 2076 3632          pea       _Check.L
00002262  4E92      3633          jsr       (A2)
00002264  504F      3634          addq.w    #8,A7
                    3635   ; FlushKeyboard() ;                        // dump unread characters from keyboard
00002266  4EB8 09DA 3636          jsr       _FlushKeyboard
                    3637   ; TraceException = 0 ;                     // clear trace exception port to remove any software generated single step/trace
0000226A  4239 0040 3638          clr.b     4194314
0000226E  000A      
                    3639   ; printf("\r\n%s", BugMessage) ;
00002270  2F2E FFF8 3640          move.l    -8(A6),-(A7)
00002274  4879 0000 3641          pea       @m68kde~1_109.L
00002278  4E0A      
0000227A  4EB9 0000 3642          jsr       _printf
0000227E  3926      
00002280  504F      3643          addq.w    #8,A7
                    3644   ; printf("\r\n%s", CopyrightMessage) ;
00002282  2F2E FFFC 3645          move.l    -4(A6),-(A7)
00002286  4879 0000 3646          pea       @m68kde~1_109.L
0000228A  4E0A      
0000228C  4EB9 0000 3647          jsr       _printf
00002290  3926      
00002292  504F      3648          addq.w    #8,A7
                    3649   ; menu();
00002294  4EB8 1F04 3650          jsr       _menu
00002298  4CDF 0404 3651          movem.l   (A7)+,D2/A2
0000229C  4E5E      3652          unlk      A6
0000229E  4E75      3653          rts
                    3654   ; }
                    3655   ; C:\TETRIS_FINAL_AP_V1\PROGRAMS\DEBUGMONITORCODE\SAY_PHONEME.C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                    3656   ; #include "say_phoneme.h"
                    3657   ; void talkphonemeAA (){ say_phoneme(phoneme_AA  ) ; };
                    3658   _talkphonemeAA:
000022A0  4878 0018 3659          pea       24
000022A4  4EB8 08E6 3660          jsr       _say_phoneme
000022A8  584F      3661          addq.w    #4,A7
000022AA  4E75      3662          rts
                    3663   ; void talkphonemeAE (){ say_phoneme(phoneme_AE  ) ; };
                    3664   _talkphonemeAE:
000022AC  4878 001A 3665          pea       26
000022B0  4EB8 08E6 3666          jsr       _say_phoneme
000022B4  584F      3667          addq.w    #4,A7
000022B6  4E75      3668          rts
                    3669   ; void talkphonemeAO (){ say_phoneme(phoneme_AO  ) ; };
                    3670   _talkphonemeAO:
000022B8  4878 0017 3671          pea       23
000022BC  4EB8 08E6 3672          jsr       _say_phoneme
000022C0  584F      3673          addq.w    #4,A7
000022C2  4E75      3674          rts
                    3675   ; void talkphonemeAR (){ say_phoneme(phoneme_AR  ) ; };
                    3676   _talkphonemeAR:
000022C4  4878 003B 3677          pea       59
000022C8  4EB8 08E6 3678          jsr       _say_phoneme
000022CC  584F      3679          addq.w    #4,A7
000022CE  4E75      3680          rts
                    3681   ; void talkphonemeAW (){ say_phoneme(phoneme_AW  ) ; };
                    3682   _talkphonemeAW:
000022D0  4878 0020 3683          pea       32
000022D4  4EB8 08E6 3684          jsr       _say_phoneme
000022D8  584F      3685          addq.w    #4,A7
000022DA  4E75      3686          rts
                    3687   ; void talkphonemeAX (){ say_phoneme(phoneme_AX  ) ; };
                    3688   _talkphonemeAX:
000022DC  4878 000F 3689          pea       15
000022E0  4EB8 08E6 3690          jsr       _say_phoneme
000022E4  584F      3691          addq.w    #4,A7
000022E6  4E75      3692          rts
                    3693   ; void talkphonemeAY (){ say_phoneme(phoneme_AY  ) ; };
                    3694   _talkphonemeAY:
000022E8  4878 0006 3695          pea       6
000022EC  4EB8 08E6 3696          jsr       _say_phoneme
000022F0  584F      3697          addq.w    #4,A7
000022F2  4E75      3698          rts
                    3699   ; void talkphonemeBB1(){ say_phoneme(phoneme_BB1 ) ; };
                    3700   _talkphonemeBB1:
000022F4  4878 001C 3701          pea       28
000022F8  4EB8 08E6 3702          jsr       _say_phoneme
000022FC  584F      3703          addq.w    #4,A7
000022FE  4E75      3704          rts
                    3705   ; void talkphonemeBB2(){ say_phoneme(phoneme_BB2 ) ; };
                    3706   _talkphonemeBB2:
00002300  4878 003F 3707          pea       63
00002304  4EB8 08E6 3708          jsr       _say_phoneme
00002308  584F      3709          addq.w    #4,A7
0000230A  4E75      3710          rts
                    3711   ; void talkphonemeCH (){ say_phoneme(phoneme_CH  ) ; };
                    3712   _talkphonemeCH:
0000230C  4878 0032 3713          pea       50
00002310  4EB8 08E6 3714          jsr       _say_phoneme
00002314  584F      3715          addq.w    #4,A7
00002316  4E75      3716          rts
                    3717   ; void talkphonemeDD1(){ say_phoneme(phoneme_DD1 ) ; };
                    3718   _talkphonemeDD1:
00002318  4878 0015 3719          pea       21
0000231C  4EB8 08E6 3720          jsr       _say_phoneme
00002320  584F      3721          addq.w    #4,A7
00002322  4E75      3722          rts
                    3723   ; void talkphonemeDD2(){ say_phoneme(phoneme_DD2 ) ; };
                    3724   _talkphonemeDD2:
00002324  4878 0021 3725          pea       33
00002328  4EB8 08E6 3726          jsr       _say_phoneme
0000232C  584F      3727          addq.w    #4,A7
0000232E  4E75      3728          rts
                    3729   ; void talkphonemeDH1(){ say_phoneme(phoneme_DH1 ) ; };
                    3730   _talkphonemeDH1:
00002330  4878 0012 3731          pea       18
00002334  4EB8 08E6 3732          jsr       _say_phoneme
00002338  584F      3733          addq.w    #4,A7
0000233A  4E75      3734          rts
                    3735   ; void talkphonemeDH2(){ say_phoneme(phoneme_DH2 ) ; };
                    3736   _talkphonemeDH2:
0000233C  4878 0036 3737          pea       54
00002340  4EB8 08E6 3738          jsr       _say_phoneme
00002344  584F      3739          addq.w    #4,A7
00002346  4E75      3740          rts
                    3741   ; void talkphonemeEH (){ say_phoneme(phoneme_EH  ) ; };
                    3742   _talkphonemeEH:
00002348  4878 0007 3743          pea       7
0000234C  4EB8 08E6 3744          jsr       _say_phoneme
00002350  584F      3745          addq.w    #4,A7
00002352  4E75      3746          rts
                    3747   ; void talkphonemeEL (){ say_phoneme(phoneme_EL  ) ; };
                    3748   _talkphonemeEL:
00002354  4878 003E 3749          pea       62
00002358  4EB8 08E6 3750          jsr       _say_phoneme
0000235C  584F      3751          addq.w    #4,A7
0000235E  4E75      3752          rts
                    3753   ; void talkphonemeER1(){ say_phoneme(phoneme_ER1 ) ; };
                    3754   _talkphonemeER1:
00002360  4878 0033 3755          pea       51
00002364  4EB8 08E6 3756          jsr       _say_phoneme
00002368  584F      3757          addq.w    #4,A7
0000236A  4E75      3758          rts
                    3759   ; void talkphonemeER2(){ say_phoneme(phoneme_ER2 ) ; };
                    3760   _talkphonemeER2:
0000236C  4878 0034 3761          pea       52
00002370  4EB8 08E6 3762          jsr       _say_phoneme
00002374  584F      3763          addq.w    #4,A7
00002376  4E75      3764          rts
                    3765   ; void talkphonemeEY (){ say_phoneme(phoneme_EY  ) ; };
                    3766   _talkphonemeEY:
00002378  4878 0014 3767          pea       20
0000237C  4EB8 08E6 3768          jsr       _say_phoneme
00002380  584F      3769          addq.w    #4,A7
00002382  4E75      3770          rts
                    3771   ; void talkphonemeFF (){ say_phoneme(phoneme_FF  ) ; };
                    3772   _talkphonemeFF:
00002384  4878 0028 3773          pea       40
00002388  4EB8 08E6 3774          jsr       _say_phoneme
0000238C  584F      3775          addq.w    #4,A7
0000238E  4E75      3776          rts
                    3777   ; void talkphonemeGG1(){ say_phoneme(phoneme_GG1 ) ; };
                    3778   _talkphonemeGG1:
00002390  4878 0024 3779          pea       36
00002394  4EB8 08E6 3780          jsr       _say_phoneme
00002398  584F      3781          addq.w    #4,A7
0000239A  4E75      3782          rts
                    3783   ; void talkphonemeGG2(){ say_phoneme(phoneme_GG2 ) ; };
                    3784   _talkphonemeGG2:
0000239C  4878 003D 3785          pea       61
000023A0  4EB8 08E6 3786          jsr       _say_phoneme
000023A4  584F      3787          addq.w    #4,A7
000023A6  4E75      3788          rts
                    3789   ; void talkphonemeGG3(){ say_phoneme(phoneme_GG3 ) ; };
                    3790   _talkphonemeGG3:
000023A8  4878 0022 3791          pea       34
000023AC  4EB8 08E6 3792          jsr       _say_phoneme
000023B0  584F      3793          addq.w    #4,A7
000023B2  4E75      3794          rts
                    3795   ; void talkphonemeHH1(){ say_phoneme(phoneme_HH1 ) ; };
                    3796   _talkphonemeHH1:
000023B4  4878 001B 3797          pea       27
000023B8  4EB8 08E6 3798          jsr       _say_phoneme
000023BC  584F      3799          addq.w    #4,A7
000023BE  4E75      3800          rts
                    3801   ; void talkphonemeHH2(){ say_phoneme(phoneme_HH2 ) ; };
                    3802   _talkphonemeHH2:
000023C0  4878 0039 3803          pea       57
000023C4  4EB8 08E6 3804          jsr       _say_phoneme
000023C8  584F      3805          addq.w    #4,A7
000023CA  4E75      3806          rts
                    3807   ; void talkphonemeIH (){ say_phoneme(phoneme_IH  ) ; };
                    3808   _talkphonemeIH:
000023CC  4878 000C 3809          pea       12
000023D0  4EB8 08E6 3810          jsr       _say_phoneme
000023D4  584F      3811          addq.w    #4,A7
000023D6  4E75      3812          rts
                    3813   ; void talkphonemeIY (){ say_phoneme(phoneme_IY  ) ; };
                    3814   _talkphonemeIY:
000023D8  4878 0013 3815          pea       19
000023DC  4EB8 08E6 3816          jsr       _say_phoneme
000023E0  584F      3817          addq.w    #4,A7
000023E2  4E75      3818          rts
                    3819   ; void talkphonemeJH (){ say_phoneme(phoneme_JH  ) ; };
                    3820   _talkphonemeJH:
000023E4  4878 000A 3821          pea       10
000023E8  4EB8 08E6 3822          jsr       _say_phoneme
000023EC  584F      3823          addq.w    #4,A7
000023EE  4E75      3824          rts
                    3825   ; void talkphonemeKK1(){ say_phoneme(phoneme_KK1 ) ; };
                    3826   _talkphonemeKK1:
000023F0  4878 002A 3827          pea       42
000023F4  4EB8 08E6 3828          jsr       _say_phoneme
000023F8  584F      3829          addq.w    #4,A7
000023FA  4E75      3830          rts
                    3831   ; void talkphonemeKK2(){ say_phoneme(phoneme_KK2 ) ; };
                    3832   _talkphonemeKK2:
000023FC  4878 0029 3833          pea       41
00002400  4EB8 08E6 3834          jsr       _say_phoneme
00002404  584F      3835          addq.w    #4,A7
00002406  4E75      3836          rts
                    3837   ; void talkphonemeKK3(){ say_phoneme(phoneme_KK3 ) ; };
                    3838   _talkphonemeKK3:
00002408  4878 0008 3839          pea       8
0000240C  4EB8 08E6 3840          jsr       _say_phoneme
00002410  584F      3841          addq.w    #4,A7
00002412  4E75      3842          rts
                    3843   ; void talkphonemeLL (){ say_phoneme(phoneme_LL  ) ; };
                    3844   _talkphonemeLL:
00002414  4878 002D 3845          pea       45
00002418  4EB8 08E6 3846          jsr       _say_phoneme
0000241C  584F      3847          addq.w    #4,A7
0000241E  4E75      3848          rts
                    3849   ; void talkphonemeMM (){ say_phoneme(phoneme_MM  ) ; };
                    3850   _talkphonemeMM:
00002420  4878 0010 3851          pea       16
00002424  4EB8 08E6 3852          jsr       _say_phoneme
00002428  584F      3853          addq.w    #4,A7
0000242A  4E75      3854          rts
                    3855   ; void talkphonemeNG (){ say_phoneme(phoneme_NG  ) ; };
                    3856   _talkphonemeNG:
0000242C  4878 002C 3857          pea       44
00002430  4EB8 08E6 3858          jsr       _say_phoneme
00002434  584F      3859          addq.w    #4,A7
00002436  4E75      3860          rts
                    3861   ; void talkphonemeNN1(){ say_phoneme(phoneme_NN1 ) ; };
                    3862   _talkphonemeNN1:
00002438  4878 000B 3863          pea       11
0000243C  4EB8 08E6 3864          jsr       _say_phoneme
00002440  584F      3865          addq.w    #4,A7
00002442  4E75      3866          rts
                    3867   ; void talkphonemeNN2(){ say_phoneme(phoneme_NN2 ) ; };
                    3868   _talkphonemeNN2:
00002444  4878 0038 3869          pea       56
00002448  4EB8 08E6 3870          jsr       _say_phoneme
0000244C  584F      3871          addq.w    #4,A7
0000244E  4E75      3872          rts
                    3873   ; void talkphonemeOR (){ say_phoneme(phoneme_OR  ) ; };
                    3874   _talkphonemeOR:
00002450  4878 003A 3875          pea       58
00002454  4EB8 08E6 3876          jsr       _say_phoneme
00002458  584F      3877          addq.w    #4,A7
0000245A  4E75      3878          rts
                    3879   ; void talkphonemeOW (){ say_phoneme(phoneme_OW  ) ; };
                    3880   _talkphonemeOW:
0000245C  4878 0035 3881          pea       53
00002460  4EB8 08E6 3882          jsr       _say_phoneme
00002464  584F      3883          addq.w    #4,A7
00002466  4E75      3884          rts
                    3885   ; void talkphonemeOY (){ say_phoneme(phoneme_OY  ) ; };
                    3886   _talkphonemeOY:
00002468  4878 0005 3887          pea       5
0000246C  4EB8 08E6 3888          jsr       _say_phoneme
00002470  584F      3889          addq.w    #4,A7
00002472  4E75      3890          rts
                    3891   ; void talkphonemePP (){ say_phoneme(phoneme_PP  ) ; };
                    3892   _talkphonemePP:
00002474  4878 0009 3893          pea       9
00002478  4EB8 08E6 3894          jsr       _say_phoneme
0000247C  584F      3895          addq.w    #4,A7
0000247E  4E75      3896          rts
                    3897   ; void talkphonemeRR1(){ say_phoneme(phoneme_RR1 ) ; };
                    3898   _talkphonemeRR1:
00002480  4878 000E 3899          pea       14
00002484  4EB8 08E6 3900          jsr       _say_phoneme
00002488  584F      3901          addq.w    #4,A7
0000248A  4E75      3902          rts
                    3903   ; void talkphonemeRR2(){ say_phoneme(phoneme_RR2 ) ; };
                    3904   _talkphonemeRR2:
0000248C  4878 0027 3905          pea       39
00002490  4EB8 08E6 3906          jsr       _say_phoneme
00002494  584F      3907          addq.w    #4,A7
00002496  4E75      3908          rts
                    3909   ; void talkphonemeSH (){ say_phoneme(phoneme_SH  ) ; };
                    3910   _talkphonemeSH:
00002498  4878 0025 3911          pea       37
0000249C  4EB8 08E6 3912          jsr       _say_phoneme
000024A0  584F      3913          addq.w    #4,A7
000024A2  4E75      3914          rts
                    3915   ; void talkphonemeSS (){ say_phoneme(phoneme_SS  ) ; };
                    3916   _talkphonemeSS:
000024A4  4878 0037 3917          pea       55
000024A8  4EB8 08E6 3918          jsr       _say_phoneme
000024AC  584F      3919          addq.w    #4,A7
000024AE  4E75      3920          rts
                    3921   ; void talkphonemeTH (){ say_phoneme(phoneme_TH  ) ; };
                    3922   _talkphonemeTH:
000024B0  4878 001D 3923          pea       29
000024B4  4EB8 08E6 3924          jsr       _say_phoneme
000024B8  584F      3925          addq.w    #4,A7
000024BA  4E75      3926          rts
                    3927   ; void talkphonemeTT1(){ say_phoneme(phoneme_TT1 ) ; };
                    3928   _talkphonemeTT1:
000024BC  4878 0011 3929          pea       17
000024C0  4EB8 08E6 3930          jsr       _say_phoneme
000024C4  584F      3931          addq.w    #4,A7
000024C6  4E75      3932          rts
                    3933   ; void talkphonemeTT2(){ say_phoneme(phoneme_TT2 ) ; };
                    3934   _talkphonemeTT2:
000024C8  4878 000D 3935          pea       13
000024CC  4EB8 08E6 3936          jsr       _say_phoneme
000024D0  584F      3937          addq.w    #4,A7
000024D2  4E75      3938          rts
                    3939   ; void talkphonemeUH (){ say_phoneme(phoneme_UH  ) ; };
                    3940   _talkphonemeUH:
000024D4  4878 001E 3941          pea       30
000024D8  4EB8 08E6 3942          jsr       _say_phoneme
000024DC  584F      3943          addq.w    #4,A7
000024DE  4E75      3944          rts
                    3945   ; void talkphonemeUW1(){ say_phoneme(phoneme_UW1 ) ; };
                    3946   _talkphonemeUW1:
000024E0  4878 0016 3947          pea       22
000024E4  4EB8 08E6 3948          jsr       _say_phoneme
000024E8  584F      3949          addq.w    #4,A7
000024EA  4E75      3950          rts
                    3951   ; void talkphonemeUW2(){ say_phoneme(phoneme_UW2 ) ; };
                    3952   _talkphonemeUW2:
000024EC  4878 001F 3953          pea       31
000024F0  4EB8 08E6 3954          jsr       _say_phoneme
000024F4  584F      3955          addq.w    #4,A7
000024F6  4E75      3956          rts
                    3957   ; void talkphonemeVV (){ say_phoneme(phoneme_VV  ) ; };
                    3958   _talkphonemeVV:
000024F8  4878 0023 3959          pea       35
000024FC  4EB8 08E6 3960          jsr       _say_phoneme
00002500  584F      3961          addq.w    #4,A7
00002502  4E75      3962          rts
                    3963   ; void talkphonemeWH (){ say_phoneme(phoneme_WH  ) ; };
                    3964   _talkphonemeWH:
00002504  4878 0030 3965          pea       48
00002508  4EB8 08E6 3966          jsr       _say_phoneme
0000250C  584F      3967          addq.w    #4,A7
0000250E  4E75      3968          rts
                    3969   ; void talkphonemeWW (){ say_phoneme(phoneme_WW  ) ; };
                    3970   _talkphonemeWW:
00002510  4878 002E 3971          pea       46
00002514  4EB8 08E6 3972          jsr       _say_phoneme
00002518  584F      3973          addq.w    #4,A7
0000251A  4E75      3974          rts
                    3975   ; void talkphonemeXR (){ say_phoneme(phoneme_XR  ) ; };
                    3976   _talkphonemeXR:
0000251C  4878 002F 3977          pea       47
00002520  4EB8 08E6 3978          jsr       _say_phoneme
00002524  584F      3979          addq.w    #4,A7
00002526  4E75      3980          rts
                    3981   ; void talkphonemeYR (){ say_phoneme(phoneme_YR  ) ; };
                    3982   _talkphonemeYR:
00002528  4878 003C 3983          pea       60
0000252C  4EB8 08E6 3984          jsr       _say_phoneme
00002530  584F      3985          addq.w    #4,A7
00002532  4E75      3986          rts
                    3987   ; void talkphonemeYY1(){ say_phoneme(phoneme_YY1 ) ; };
                    3988   _talkphonemeYY1:
00002534  4878 0031 3989          pea       49
00002538  4EB8 08E6 3990          jsr       _say_phoneme
0000253C  584F      3991          addq.w    #4,A7
0000253E  4E75      3992          rts
                    3993   ; void talkphonemeYY2(){ say_phoneme(phoneme_YY2 ) ; };
                    3994   _talkphonemeYY2:
00002540  4878 0019 3995          pea       25
00002544  4EB8 08E6 3996          jsr       _say_phoneme
00002548  584F      3997          addq.w    #4,A7
0000254A  4E75      3998          rts
                    3999   ; void talkphonemeZH (){ say_phoneme(phoneme_ZH  ) ; };
                    4000   _talkphonemeZH:
0000254C  4878 0026 4001          pea       38
00002550  4EB8 08E6 4002          jsr       _say_phoneme
00002554  584F      4003          addq.w    #4,A7
00002556  4E75      4004          rts
                    4005   ; void talkphonemeZZ (){ say_phoneme(phoneme_ZZ  ) ; };
                    4006   _talkphonemeZZ:
00002558  4878 002B 4007          pea       43
0000255C  4EB8 08E6 4008          jsr       _say_phoneme
00002560  584F      4009          addq.w    #4,A7
00002562  4E75      4010          rts
                    4011   ; void talkphonemePA1(){ say_phoneme(phoneme_PA1 ) ; };
                    4012   _talkphonemePA1:
00002564  42A7      4013          clr.l     -(A7)
00002566  4EB8 08E6 4014          jsr       _say_phoneme
0000256A  584F      4015          addq.w    #4,A7
0000256C  4E75      4016          rts
                    4017   ; void talkphonemePA2(){ say_phoneme(phoneme_PA2 ) ; };
                    4018   _talkphonemePA2:
0000256E  4878 0001 4019          pea       1
00002572  4EB8 08E6 4020          jsr       _say_phoneme
00002576  584F      4021          addq.w    #4,A7
00002578  4E75      4022          rts
                    4023   ; void talkphonemePA3(){ say_phoneme(phoneme_PA3 ) ; };
                    4024   _talkphonemePA3:
0000257A  4878 0002 4025          pea       2
0000257E  4EB8 08E6 4026          jsr       _say_phoneme
00002582  584F      4027          addq.w    #4,A7
00002584  4E75      4028          rts
                    4029   ; void talkphonemePA4(){ say_phoneme(phoneme_PA4 ) ; };
                    4030   _talkphonemePA4:
00002586  4878 0003 4031          pea       3
0000258A  4EB8 08E6 4032          jsr       _say_phoneme
0000258E  584F      4033          addq.w    #4,A7
00002590  4E75      4034          rts
                    4035   ; void talkphonemePA5(){ say_phoneme(phoneme_PA5 ) ; };
                    4036   _talkphonemePA5:
00002592  4878 0004 4037          pea       4
00002596  4EB8 08E6 4038          jsr       _say_phoneme
0000259A  584F      4039          addq.w    #4,A7
0000259C  4E75      4040          rts
                    4041   ; void talkword0() {
                    4042   _talkword0:
                    4043   ; talkphonemeZZ  ()   ;
0000259E  4EB8 2558 4044          jsr       _talkphonemeZZ
                    4045   ; talkphonemeEH  ()   ;
000025A2  4EB8 2348 4046          jsr       _talkphonemeEH
                    4047   ; talkphonemeRR2 ()   ;
000025A6  4EB8 248C 4048          jsr       _talkphonemeRR2
                    4049   ; talkphonemeOW  ()   ;
000025AA  4EB8 245C 4050          jsr       _talkphonemeOW
000025AE  4E75      4051          rts
                    4052   ; }
                    4053   ; void talkword1() {
                    4054   _talkword1:
                    4055   ; talkphonemeWW    ()  ;
000025B0  4EB8 2510 4056          jsr       _talkphonemeWW
                    4057   ; talkphonemeAO    ()  ;
000025B4  4EB8 22B8 4058          jsr       _talkphonemeAO
                    4059   ; talkphonemeNN1   ()  ;
000025B8  4EB8 2438 4060          jsr       _talkphonemeNN1
000025BC  4E75      4061          rts
                    4062   ; }
                    4063   ; void talkword2() {
                    4064   _talkword2:
                    4065   ; talkphonemeTT2();
000025BE  4EB8 24C8 4066          jsr       _talkphonemeTT2
                    4067   ; talkphonemeUW2();
000025C2  4EB8 24EC 4068          jsr       _talkphonemeUW2
000025C6  4E75      4069          rts
                    4070   ; }
                    4071   ; void talkword3() {
                    4072   _talkword3:
                    4073   ; talkphonemeTH ();
000025C8  4EB8 24B0 4074          jsr       _talkphonemeTH
                    4075   ; talkphonemeRR2();
000025CC  4EB8 248C 4076          jsr       _talkphonemeRR2
                    4077   ; talkphonemeIY ();
000025D0  4EB8 23D8 4078          jsr       _talkphonemeIY
000025D4  4E75      4079          rts
                    4080   ; }
                    4081   ; void talkword4() {
                    4082   _talkword4:
                    4083   ; talkphonemeFF  ();
000025D6  4EB8 2384 4084          jsr       _talkphonemeFF
                    4085   ; talkphonemeOR  ();
000025DA  4EB8 2450 4086          jsr       _talkphonemeOR
000025DE  4E75      4087          rts
                    4088   ; }
                    4089   ; void talkword5() {
                    4090   _talkword5:
                    4091   ; talkphonemeFF();
000025E0  4EB8 2384 4092          jsr       _talkphonemeFF
                    4093   ; talkphonemeAY();
000025E4  4EB8 22E8 4094          jsr       _talkphonemeAY
                    4095   ; talkphonemeVV();
000025E8  4EB8 24F8 4096          jsr       _talkphonemeVV
000025EC  4E75      4097          rts
                    4098   ; }
                    4099   ; void talkword6() {
                    4100   _talkword6:
000025EE  2F0A      4101          move.l    A2,-(A7)
000025F0  45F8 24A4 4102          lea       _talkphonemeSS.L,A2
                    4103   ; talkphonemeSS  ();
000025F4  4E92      4104          jsr       (A2)
                    4105   ; talkphonemeIH  ();
000025F6  4EB8 23CC 4106          jsr       _talkphonemeIH
                    4107   ; talkphonemeKK2 ();
000025FA  4EB8 23FC 4108          jsr       _talkphonemeKK2
                    4109   ; talkphonemeSS  ();
000025FE  4E92      4110          jsr       (A2)
                    4111   ; talkphonemeSS  ();
00002600  4E92      4112          jsr       (A2)
00002602  245F      4113          move.l    (A7)+,A2
00002604  4E75      4114          rts
                    4115   ; }
                    4116   ; void talkword7() {
                    4117   _talkword7:
                    4118   ; talkphonemeSS    ();
00002606  4EB8 24A4 4119          jsr       _talkphonemeSS
                    4120   ; talkphonemeEH    ();
0000260A  4EB8 2348 4121          jsr       _talkphonemeEH
                    4122   ; talkphonemeVV    ();
0000260E  4EB8 24F8 4123          jsr       _talkphonemeVV
                    4124   ; talkphonemeAX    ();
00002612  4EB8 22DC 4125          jsr       _talkphonemeAX
                    4126   ; talkphonemeNN1   ();
00002616  4EB8 2438 4127          jsr       _talkphonemeNN1
0000261A  4E75      4128          rts
                    4129   ; }
                    4130   ; void talkword8() {
                    4131   _talkword8:
                    4132   ; talkphonemeEY  ();
0000261C  4EB8 2378 4133          jsr       _talkphonemeEY
                    4134   ; talkphonemeTT1 ();
00002620  4EB8 24BC 4135          jsr       _talkphonemeTT1
00002624  4E75      4136          rts
                    4137   ; }
                    4138   ; void talkword9() {
                    4139   _talkword9:
                    4140   ; talkphonemeNN2();
00002626  4EB8 2444 4141          jsr       _talkphonemeNN2
                    4142   ; talkphonemeAY ();
0000262A  4EB8 22E8 4143          jsr       _talkphonemeAY
                    4144   ; talkphonemeNN1();
0000262E  4EB8 2438 4145          jsr       _talkphonemeNN1
00002632  4E75      4146          rts
                    4147   ; }
                    4148   ; void talkword10() {
                    4149   _talkword10:
                    4150   ; talkphonemeTT2 ();
00002634  4EB8 24C8 4151          jsr       _talkphonemeTT2
                    4152   ; talkphonemeEH  ();
00002638  4EB8 2348 4153          jsr       _talkphonemeEH
                    4154   ; talkphonemeNN1 ();
0000263C  4EB8 2438 4155          jsr       _talkphonemeNN1
00002640  4E75      4156          rts
                    4157   ; }
                    4158   ; void talkword11() {
                    4159   _talkword11:
                    4160   ; talkphonemeIH ();
00002642  4EB8 23CC 4161          jsr       _talkphonemeIH
                    4162   ; talkphonemeLL ();
00002646  4EB8 2414 4163          jsr       _talkphonemeLL
                    4164   ; talkphonemeEH ();
0000264A  4EB8 2348 4165          jsr       _talkphonemeEH
                    4166   ; talkphonemeVV ();
0000264E  4EB8 24F8 4167          jsr       _talkphonemeVV
                    4168   ; talkphonemeEH ();
00002652  4EB8 2348 4169          jsr       _talkphonemeEH
                    4170   ; talkphonemeNN1();
00002656  4EB8 2438 4171          jsr       _talkphonemeNN1
0000265A  4E75      4172          rts
                    4173   ; }
                    4174   ; void talkword12() {
                    4175   _talkword12:
                    4176   ; talkphonemeTT2 ();
0000265C  4EB8 24C8 4177          jsr       _talkphonemeTT2
                    4178   ; talkphonemeWW  ();
00002660  4EB8 2510 4179          jsr       _talkphonemeWW
                    4180   ; talkphonemeEH  ();
00002664  4EB8 2348 4181          jsr       _talkphonemeEH
                    4182   ; talkphonemeEL  ();
00002668  4EB8 2354 4183          jsr       _talkphonemeEL
                    4184   ; talkphonemeVV  ();
0000266C  4EB8 24F8 4185          jsr       _talkphonemeVV
00002670  4E75      4186          rts
                    4187   ; }
                    4188   ; void talkword13() {
                    4189   _talkword13:
                    4190   ; talkphonemeTH  ();
00002672  4EB8 24B0 4191          jsr       _talkphonemeTH
                    4192   ; talkphonemeER2 ();
00002676  4EB8 236C 4193          jsr       _talkphonemeER2
0000267A  4E75      4194          rts
                    4195   ; }
                    4196   ; void talkwordteen() {
                    4197   _talkwordteen:
                    4198   ; talkphonemeTT2   ();
0000267C  4EB8 24C8 4199          jsr       _talkphonemeTT2
                    4200   ; talkphonemeIY    ();
00002680  4EB8 23D8 4201          jsr       _talkphonemeIY
                    4202   ; talkphonemeNN1   ();
00002684  4EB8 2438 4203          jsr       _talkphonemeNN1
00002688  4E75      4204          rts
                    4205   ; }
                    4206   ; void talkword14() {
                    4207   _talkword14:
                    4208   ; talkword4();
0000268A  4EB8 25D6 4209          jsr       _talkword4
                    4210   ; talkwordteen();
0000268E  4EB8 267C 4211          jsr       _talkwordteen
00002692  4E75      4212          rts
                    4213   ; }
                    4214   ; void talkword15() {
                    4215   _talkword15:
                    4216   ; talkphonemeFF ();
00002694  4EB8 2384 4217          jsr       _talkphonemeFF
                    4218   ; talkphonemeIH ();
00002698  4EB8 23CC 4219          jsr       _talkphonemeIH
                    4220   ; talkphonemeFF ();
0000269C  4EB8 2384 4221          jsr       _talkphonemeFF
                    4222   ; talkwordteen  ();
000026A0  4EB8 267C 4223          jsr       _talkwordteen
000026A4  4E75      4224          rts
                    4225   ; }
                    4226   ; void talkword16() {
                    4227   _talkword16:
                    4228   ; talkword6    ();
000026A6  4EB8 25EE 4229          jsr       _talkword6
                    4230   ; talkwordteen ();
000026AA  4EB8 267C 4231          jsr       _talkwordteen
000026AE  4E75      4232          rts
                    4233   ; }
                    4234   ; void talkword17() {
                    4235   _talkword17:
                    4236   ; talkword7      ();
000026B0  4EB8 2606 4237          jsr       _talkword7
                    4238   ; talkwordteen   ();
000026B4  4EB8 267C 4239          jsr       _talkwordteen
000026B8  4E75      4240          rts
                    4241   ; }
                    4242   ; void talkword18() {
                    4243   _talkword18:
                    4244   ; talkword8    ();
000026BA  4EB8 261C 4245          jsr       _talkword8
                    4246   ; talkwordteen ();
000026BE  4EB8 267C 4247          jsr       _talkwordteen
000026C2  4E75      4248          rts
                    4249   ; }
                    4250   ; void talkword19() {
                    4251   _talkword19:
                    4252   ; talkword9     ();
000026C4  4EB8 2626 4253          jsr       _talkword9
                    4254   ; talkwordteen  ();
000026C8  4EB8 267C 4255          jsr       _talkwordteen
000026CC  4E75      4256          rts
                    4257   ; }
                    4258   ; void talkword20() {
                    4259   _talkword20:
                    4260   ; talkphonemeTT2 ();
000026CE  4EB8 24C8 4261          jsr       _talkphonemeTT2
                    4262   ; talkphonemeWW  ();
000026D2  4EB8 2510 4263          jsr       _talkphonemeWW
                    4264   ; talkphonemeEH  ();
000026D6  4EB8 2348 4265          jsr       _talkphonemeEH
                    4266   ; talkphonemeNN1 ();
000026DA  4EB8 2438 4267          jsr       _talkphonemeNN1
000026DE  4E75      4268          rts
                    4269   ; }
                    4270   ; void talkwordty() {
                    4271   _talkwordty:
                    4272   ; talkphonemeTT2 ();
000026E0  4EB8 24C8 4273          jsr       _talkphonemeTT2
                    4274   ; talkphonemeIY  ();
000026E4  4EB8 23D8 4275          jsr       _talkphonemeIY
000026E8  4E75      4276          rts
                    4277   ; }
                    4278   ; void talkword30() {
                    4279   _talkword30:
                    4280   ; talkphonemeTH  ();
000026EA  4EB8 24B0 4281          jsr       _talkphonemeTH
                    4282   ; talkphonemeER1 ();
000026EE  4EB8 2360 4283          jsr       _talkphonemeER1
                    4284   ; talkwordty     ();
000026F2  4EB8 26E0 4285          jsr       _talkwordty
000026F6  4E75      4286          rts
                    4287   ; }
                    4288   ; void talkword40() {
                    4289   _talkword40:
                    4290   ; talkword4  ();
000026F8  4EB8 25D6 4291          jsr       _talkword4
                    4292   ; talkwordty ();
000026FC  4EB8 26E0 4293          jsr       _talkwordty
00002700  4E75      4294          rts
                    4295   ; }
                    4296   ; void talkword50() {
                    4297   _talkword50:
                    4298   ; talkphonemeFF ();
00002702  4EB8 2384 4299          jsr       _talkphonemeFF
                    4300   ; talkphonemeIH ();
00002706  4EB8 23CC 4301          jsr       _talkphonemeIH
                    4302   ; talkphonemeFF ();
0000270A  4EB8 2384 4303          jsr       _talkphonemeFF
                    4304   ; talkwordty    ();
0000270E  4EB8 26E0 4305          jsr       _talkwordty
00002712  4E75      4306          rts
                    4307   ; }
                    4308   ; void talkword60() {
                    4309   _talkword60:
                    4310   ; talkword6  ();
00002714  4EB8 25EE 4311          jsr       _talkword6
                    4312   ; talkwordty ();
00002718  4EB8 26E0 4313          jsr       _talkwordty
0000271C  4E75      4314          rts
                    4315   ; }
                    4316   ; void talkword70() {
                    4317   _talkword70:
                    4318   ; talkword7  ();
0000271E  4EB8 2606 4319          jsr       _talkword7
                    4320   ; talkwordty ();
00002722  4EB8 26E0 4321          jsr       _talkwordty
00002726  4E75      4322          rts
                    4323   ; }
                    4324   ; void talkword80() {
                    4325   _talkword80:
                    4326   ; talkword8   ();
00002728  4EB8 261C 4327          jsr       _talkword8
                    4328   ; talkwordty  ();
0000272C  4EB8 26E0 4329          jsr       _talkwordty
00002730  4E75      4330          rts
                    4331   ; }
                    4332   ; void talkword90() {
                    4333   _talkword90:
                    4334   ; talkword9   ();
00002732  4EB8 2626 4335          jsr       _talkword9
                    4336   ; talkwordty  ();
00002736  4EB8 26E0 4337          jsr       _talkwordty
0000273A  4E75      4338          rts
                    4339   ; }
                    4340   ; void talkwordhundred() {
                    4341   _talkwordhundred:
                    4342   ; talkphonemeHH2  ();
0000273C  4EB8 23C0 4343          jsr       _talkphonemeHH2
                    4344   ; talkphonemeAX   ();
00002740  4EB8 22DC 4345          jsr       _talkphonemeAX
                    4346   ; talkphonemeNN1  ();
00002744  4EB8 2438 4347          jsr       _talkphonemeNN1
                    4348   ; talkphonemeDD2  ();
00002748  4EB8 2324 4349          jsr       _talkphonemeDD2
                    4350   ; talkphonemeRR2  ();
0000274C  4EB8 248C 4351          jsr       _talkphonemeRR2
                    4352   ; talkphonemeDD1  ();
00002750  4EB8 2318 4353          jsr       _talkphonemeDD1
00002754  4E75      4354          rts
                    4355   ; }
                    4356   ; void talkworddepth() {
                    4357   _talkworddepth:
                    4358   ; talkphonemeDD2   ();
00002756  4EB8 2324 4359          jsr       _talkphonemeDD2
                    4360   ; talkphonemeEH    ();
0000275A  4EB8 2348 4361          jsr       _talkphonemeEH
                    4362   ; talkphonemeEH    ();
0000275E  4EB8 2348 4363          jsr       _talkphonemeEH
                    4364   ; talkphonemePP    ();
00002762  4EB8 2474 4365          jsr       _talkphonemePP
                    4366   ; talkphonemeTH    ();
00002766  4EB8 24B0 4367          jsr       _talkphonemeTH
                    4368   ; endword          ();
0000276A  4EB9 0000 4369          jsr       _endword
0000276E  2946      
00002770  4E75      4370          rts
                    4371   ; }
                    4372   ; void talkwordpoint() {
                    4373   _talkwordpoint:
                    4374   ; talkphonemePP   ();
00002772  4EB8 2474 4375          jsr       _talkphonemePP
                    4376   ; talkphonemeOY   ();
00002776  4EB8 2468 4377          jsr       _talkphonemeOY
                    4378   ; talkphonemeTT1  ();
0000277A  4EB8 24BC 4379          jsr       _talkphonemeTT1
                    4380   ; endword         ();
0000277E  4EB9 0000 4381          jsr       _endword
00002782  2946      
00002784  4E75      4382          rts
                    4383   ; }
                    4384   ; void talkwordanchor() {
                    4385   _talkwordanchor:
                    4386   ; talkphonemeEY   ();
00002786  4EB8 2378 4387          jsr       _talkphonemeEY
                    4388   ; talkphonemeKK3  ();
0000278A  4EB8 2408 4389          jsr       _talkphonemeKK3
                    4390   ; talkphonemeAE   ();
0000278E  4EB8 22AC 4391          jsr       _talkphonemeAE
                    4392   ; endword         ();
00002792  4EB9 0000 4393          jsr       _endword
00002796  2946      
00002798  4E75      4394          rts
                    4395   ; }
                    4396   ; void talkwordalarm() {
                    4397   _talkwordalarm:
                    4398   ; talkphonemeAE  ();
0000279A  4EB8 22AC 4399          jsr       _talkphonemeAE
                    4400   ; talkphonemeLL  ();
0000279E  4EB8 2414 4401          jsr       _talkphonemeLL
                    4402   ; talkphonemeAR  ();
000027A2  4EB8 22C4 4403          jsr       _talkphonemeAR
                    4404   ; talkphonemeMM  ();
000027A6  4EB8 2420 4405          jsr       _talkphonemeMM
                    4406   ; endword        ();
000027AA  4EB9 0000 4407          jsr       _endword
000027AE  2946      
000027B0  4E75      4408          rts
                    4409   ; }
                    4410   ; void talkwordon() {
                    4411   _talkwordon:
                    4412   ; talkphonemeAO ();
000027B2  4EB8 22B8 4413          jsr       _talkphonemeAO
                    4414   ; talkphonemeNG ();
000027B6  4EB8 242C 4415          jsr       _talkphonemeNG
                    4416   ; endword       ();
000027BA  4EB9 0000 4417          jsr       _endword
000027BE  2946      
000027C0  4E75      4418          rts
                    4419   ; }
                    4420   ; void talkwordoff() {
                    4421   _talkwordoff:
                    4422   ; talkphonemeAO  ();
000027C2  4EB8 22B8 4423          jsr       _talkphonemeAO
                    4424   ; talkphonemeFF  ();
000027C6  4EB8 2384 4425          jsr       _talkphonemeFF
                    4426   ; talkphonemeFF  ();
000027CA  4EB8 2384 4427          jsr       _talkphonemeFF
                    4428   ; endword        ();
000027CE  4EB9 0000 4429          jsr       _endword
000027D2  2946      
000027D4  4E75      4430          rts
                    4431   ; }
                    4432   ; void talkwordshallow() {
                    4433   _talkwordshallow:
                    4434   ; talkphonemeSH ();
000027D6  4EB8 2498 4435          jsr       _talkphonemeSH
                    4436   ; talkphonemeAE ();
000027DA  4EB8 22AC 4437          jsr       _talkphonemeAE
                    4438   ; talkphonemeLL ();
000027DE  4EB8 2414 4439          jsr       _talkphonemeLL
                    4440   ; talkphonemeOW ();
000027E2  4EB8 245C 4441          jsr       _talkphonemeOW
                    4442   ; endword       ();
000027E6  4EB9 0000 4443          jsr       _endword
000027EA  2946      
000027EC  4E75      4444          rts
                    4445   ; }
                    4446   ; void talkwordand() {
                    4447   _talkwordand:
                    4448   ; talkphonemeIH    ();
000027EE  4EB8 23CC 4449          jsr       _talkphonemeIH
                    4450   ; talkphonemeIH    ();
000027F2  4EB8 23CC 4451          jsr       _talkphonemeIH
                    4452   ; talkphonemeNN1   ();
000027F6  4EB8 2438 4453          jsr       _talkphonemeNN1
                    4454   ; talkphonemeDD2   ();
000027FA  4EB8 2324 4455          jsr       _talkphonemeDD2
                    4456   ; endword          ();
000027FE  4EB9 0000 4457          jsr       _endword
00002802  2946      
00002804  4E75      4458          rts
                    4459   ; }
                    4460   ; void talkwordwatch() {
                    4461   _talkwordwatch:
                    4462   ; talkphonemeWW  ();
00002806  4EB8 2510 4463          jsr       _talkphonemeWW
                    4464   ; talkphonemeAO  ();
0000280A  4EB8 22B8 4465          jsr       _talkphonemeAO
                    4466   ; talkphonemeTT1 ();
0000280E  4EB8 24BC 4467          jsr       _talkphonemeTT1
                    4468   ; talkphonemeCH  ();
00002812  4EB8 230C 4469          jsr       _talkphonemeCH
                    4470   ; endword        ();
00002816  4EB9 0000 4471          jsr       _endword
0000281A  2946      
0000281C  4E75      4472          rts
                    4473   ; }
                    4474   ; void talkwordlimit() {
                    4475   _talkwordlimit:
                    4476   ; talkphonemeLL   ();
0000281E  4EB8 2414 4477          jsr       _talkphonemeLL
                    4478   ; talkphonemeIH   ();
00002822  4EB8 23CC 4479          jsr       _talkphonemeIH
                    4480   ; talkphonemeMM   ();
00002826  4EB8 2420 4481          jsr       _talkphonemeMM
                    4482   ; talkphonemeIH   ();
0000282A  4EB8 23CC 4483          jsr       _talkphonemeIH
                    4484   ; talkphonemeTT1  ();
0000282E  4EB8 24BC 4485          jsr       _talkphonemeTT1
                    4486   ; endword         ();
00002832  4EB9 0000 4487          jsr       _endword
00002836  2946      
00002838  4E75      4488          rts
                    4489   ; }
                    4490   ; void talkwordset()  {
                    4491   _talkwordset:
                    4492   ; talkphonemeSS    ();
0000283A  4EB8 24A4 4493          jsr       _talkphonemeSS
                    4494   ; talkphonemeSS    ();
0000283E  4EB8 24A4 4495          jsr       _talkphonemeSS
                    4496   ; talkphonemeEH    ();
00002842  4EB8 2348 4497          jsr       _talkphonemeEH
                    4498   ; talkphonemeTT2   ();
00002846  4EB8 24C8 4499          jsr       _talkphonemeTT2
                    4500   ; endword          ();
0000284A  4EB9 0000 4501          jsr       _endword
0000284E  2946      
00002850  4E75      4502          rts
                    4503   ; }
                    4504   ; void talkwordheading() {
                    4505   _talkwordheading:
                    4506   ; talkphonemeHH1   ();
00002852  4EB8 23B4 4507          jsr       _talkphonemeHH1
                    4508   ; talkphonemeEH    ();
00002856  4EB8 2348 4509          jsr       _talkphonemeEH
                    4510   ; talkphonemeDD2   ();
0000285A  4EB8 2324 4511          jsr       _talkphonemeDD2
                    4512   ; talkphonemeIH    ();
0000285E  4EB8 23CC 4513          jsr       _talkphonemeIH
                    4514   ; talkphonemeNG    ();
00002862  4EB8 242C 4515          jsr       _talkphonemeNG
                    4516   ; endword          ();
00002866  4EB9 0000 4517          jsr       _endword
0000286A  2946      
0000286C  4E75      4518          rts
                    4519   ; }
                    4520   ; void talkwordgps() {
                    4521   _talkwordgps:
                    4522   ; talkphonemeJH  ();
0000286E  4EB8 23E4 4523          jsr       _talkphonemeJH
                    4524   ; talkphonemeIY  ();
00002872  4EB8 23D8 4525          jsr       _talkphonemeIY
                    4526   ; talkphonemePP  ();
00002876  4EB8 2474 4527          jsr       _talkphonemePP
                    4528   ; talkphonemeIY  ();
0000287A  4EB8 23D8 4529          jsr       _talkphonemeIY
                    4530   ; talkphonemeEH  ();
0000287E  4EB8 2348 4531          jsr       _talkphonemeEH
                    4532   ; talkphonemeSS  ();
00002882  4EB8 24A4 4533          jsr       _talkphonemeSS
                    4534   ; talkphonemeSS  ();
00002886  4EB8 24A4 4535          jsr       _talkphonemeSS
                    4536   ; endword        ();
0000288A  4EB9 0000 4537          jsr       _endword
0000288E  2946      
00002890  4E75      4538          rts
                    4539   ; }
                    4540   ; void talkwordno() {
                    4541   _talkwordno:
                    4542   ; talkphonemeNN2  ();
00002892  4EB8 2444 4543          jsr       _talkphonemeNN2
                    4544   ; talkphonemeOW   ();
00002896  4EB8 245C 4545          jsr       _talkphonemeOW
                    4546   ; endword         ();
0000289A  4EB9 0000 4547          jsr       _endword
0000289E  2946      
000028A0  4E75      4548          rts
                    4549   ; }
                    4550   ; void talkworddata() {
                    4551   _talkworddata:
                    4552   ; talkphonemeDD2   ();
000028A2  4EB8 2324 4553          jsr       _talkphonemeDD2
                    4554   ; talkphonemeEY    ();
000028A6  4EB8 2378 4555          jsr       _talkphonemeEY
                    4556   ; talkphonemeTT2   ();
000028AA  4EB8 24C8 4557          jsr       _talkphonemeTT2
                    4558   ; talkphonemeAX    ();
000028AE  4EB8 22DC 4559          jsr       _talkphonemeAX
                    4560   ; endword          ();
000028B2  4EB9 0000 4561          jsr       _endword
000028B6  2946      
000028B8  4E75      4562          rts
                    4563   ; }
                    4564   ; void talkwordnorth() {
                    4565   _talkwordnorth:
                    4566   ; talkphonemeNN2 ();
000028BA  4EB8 2444 4567          jsr       _talkphonemeNN2
                    4568   ; talkphonemeOR  ();
000028BE  4EB8 2450 4569          jsr       _talkphonemeOR
                    4570   ; talkphonemeHH1 ();
000028C2  4EB8 23B4 4571          jsr       _talkphonemeHH1
                    4572   ; endword        ();
000028C6  4EB9 0000 4573          jsr       _endword
000028CA  2946      
000028CC  4E75      4574          rts
                    4575   ; }
                    4576   ; void talkwordsouth() {
                    4577   _talkwordsouth:
                    4578   ; talkphonemeSS();
000028CE  4EB8 24A4 4579          jsr       _talkphonemeSS
                    4580   ; talkphonemeSS();
000028D2  4EB8 24A4 4581          jsr       _talkphonemeSS
                    4582   ; talkphonemeAW();
000028D6  4EB8 22D0 4583          jsr       _talkphonemeAW
                    4584   ; talkphonemeTH();
000028DA  4EB8 24B0 4585          jsr       _talkphonemeTH
                    4586   ; talkphonemeTH();
000028DE  4EB8 24B0 4587          jsr       _talkphonemeTH
000028E2  4E75      4588          rts
                    4589   ; }
                    4590   ; void talkwordeast() {
                    4591   _talkwordeast:
                    4592   ; talkphonemeIY   ();
000028E4  4EB8 23D8 4593          jsr       _talkphonemeIY
                    4594   ; talkphonemeSS   ();
000028E8  4EB8 24A4 4595          jsr       _talkphonemeSS
                    4596   ; talkphonemeSS   ();
000028EC  4EB8 24A4 4597          jsr       _talkphonemeSS
                    4598   ; talkphonemeTT2  ();
000028F0  4EB8 24C8 4599          jsr       _talkphonemeTT2
                    4600   ; endword         ();
000028F4  4EB9 0000 4601          jsr       _endword
000028F8  2946      
000028FA  4E75      4602          rts
                    4603   ; }
                    4604   ; void talkwordwest() {
                    4605   _talkwordwest:
                    4606   ; talkphonemeWW     ();
000028FC  4EB8 2510 4607          jsr       _talkphonemeWW
                    4608   ; talkphonemeEH     ();
00002900  4EB8 2348 4609          jsr       _talkphonemeEH
                    4610   ; talkphonemeSS     ();
00002904  4EB8 24A4 4611          jsr       _talkphonemeSS
                    4612   ; talkphonemeSS     ();
00002908  4EB8 24A4 4613          jsr       _talkphonemeSS
                    4614   ; talkphonemeTT2    ();
0000290C  4EB8 24C8 4615          jsr       _talkphonemeTT2
                    4616   ; endword           ();
00002910  4EB9 0000 4617          jsr       _endword
00002914  2946      
00002916  4E75      4618          rts
                    4619   ; }
                    4620   ; void talkwordposition() {
                    4621   _talkwordposition:
                    4622   ; talkphonemePP   ();
00002918  4EB8 2474 4623          jsr       _talkphonemePP
                    4624   ; talkphonemeIH   ();
0000291C  4EB8 23CC 4625          jsr       _talkphonemeIH
                    4626   ; talkphonemeZZ   ();
00002920  4EB8 2558 4627          jsr       _talkphonemeZZ
                    4628   ; talkphonemeIH   ();
00002924  4EB8 23CC 4629          jsr       _talkphonemeIH
                    4630   ; talkphonemeSH   ();
00002928  4EB8 2498 4631          jsr       _talkphonemeSH
                    4632   ; talkphonemeNN1  ();
0000292C  4EB8 2438 4633          jsr       _talkphonemeNN1
                    4634   ; endword         ();
00002930  4EB9 0000 4635          jsr       _endword
00002934  2946      
00002936  4E75      4636          rts
                    4637   ; }
                    4638   ; void talkphonemePA6() {
                    4639   _talkphonemePA6:
                    4640   ; talkphonemePA5();
00002938  4EB8 2592 4641          jsr       _talkphonemePA5
                    4642   ; talkphonemePA5();
0000293C  4EB8 2592 4643          jsr       _talkphonemePA5
                    4644   ; talkphonemePA4();
00002940  4EB8 2586 4645          jsr       _talkphonemePA4
00002944  4E75      4646          rts
                    4647   ; }
                    4648   ; void endword() {
                    4649   _endword:
                    4650   ; talkphonemePA5();
00002946  4EB8 2592 4651          jsr       _talkphonemePA5
                    4652   ; talkphonemePA4();
0000294A  4EB8 2586 4653          jsr       _talkphonemePA4
0000294E  4E75      4654          rts
                    4655   ; }
                    4656   ; C:\TETRIS_FINAL_AP_V1\PROGRAMS\DEBUGMONITORCODE\TETRIS_TESTING.C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                    4657   ; #include <stdio.h>
                    4658   ; #include <stdlib.h>
                    4659   ; #include <limits.h>
                    4660   ; #include "tetris.h"
                    4661   ; #include "DebugMonitor.h"
                    4662   ; #include "say_phoneme.h"
                    4663   ; #define VGA_RAM_BASE             (0x00600000)
                    4664   ; #define VGA_CTRL                 *(volatile unsigned char *)(0x00600e00)
                    4665   ; #define VGA_X_CURSOR			 *(volatile unsigned char *)(0x00600e10)
                    4666   ; #define VGA_Y_CURSOR			 *(volatile unsigned char *)(0x00600e20)
                    4667   ; char Table[TETRIS_ROWS][TETRIS_COLS];
                    4668   ; int tetris_score;
                    4669   ; char GameOn;
                    4670   ; int tetris_timer;
                    4671   ; //Color array for potential colored tetris block implementation
                    4672   ; int color_def[] = {RED_COLOR, BLUE_COLOR, GREEN_COLOR, YELLOW_COLOR, MAGENTA_COLOR, WHITE_COLOR, CYAN_COLOR}; 
                    4673   ; typedef struct {
                    4674   ; char array[MAX_SHAPE_SIZE][MAX_SHAPE_SIZE];
                    4675   ; int width, row, col;
                    4676   ; } Shape;
                    4677   ; Shape current;
                    4678   ; Shape ShapesArray[NUM_SHAPES];
                    4679   ; struct
                    4680   ; {
                    4681   ; int speed;
                    4682   ; int speed_increase;
                    4683   ; } Tetris_Speed;
                    4684   ; int printw_x;  //hint: could be a useful variable
                    4685   ; int printw_y;  //hint: could be a useful variable
                    4686   ; int counter;
                    4687   ; /* Compute x mod y using binary long division. */
                    4688   ; int mod_bld(int x, int y)
                    4689   ; {
                    4690   _mod_bld:
00002950  4E56 0000 4691          link      A6,#0
00002954  48E7 3000 4692          movem.l   D2/D3,-(A7)
                    4693   ; int modulus = x, divisor = y;
00002958  262E 0008 4694          move.l    8(A6),D3
0000295C  242E 000C 4695          move.l    12(A6),D2
                    4696   ; while (divisor <= modulus && divisor <= 16384)
                    4697   mod_bld_1:
00002960  B483      4698          cmp.l     D3,D2
00002962  6E0C      4699          bgt.s     mod_bld_3
00002964  0C82 0000 4700          cmp.l     #16384,D2
00002968  4000      
0000296A  6E04      4701          bgt.s     mod_bld_3
                    4702   ; divisor <<= 1;
0000296C  E382      4703          asl.l     #1,D2
0000296E  60F0      4704          bra       mod_bld_1
                    4705   mod_bld_3:
                    4706   ; while (modulus >= y) {
                    4707   mod_bld_4:
00002970  B6AE 000C 4708          cmp.l     12(A6),D3
00002974  6D0C      4709          blt.s     mod_bld_6
                    4710   ; while (divisor > modulus)
                    4711   mod_bld_7:
00002976  B483      4712          cmp.l     D3,D2
00002978  6F04      4713          ble.s     mod_bld_9
                    4714   ; divisor >>= 1;
0000297A  E282      4715          asr.l     #1,D2
0000297C  60F8      4716          bra       mod_bld_7
                    4717   mod_bld_9:
                    4718   ; modulus -= divisor;
0000297E  9682      4719          sub.l     D2,D3
00002980  60EE      4720          bra       mod_bld_4
                    4721   mod_bld_6:
                    4722   ; }
                    4723   ; return modulus;
00002982  2003      4724          move.l    D3,D0
00002984  4CDF 000C 4725          movem.l   (A7)+,D2/D3
00002988  4E5E      4726          unlk      A6
0000298A  4E75      4727          rts
                    4728   ; }
                    4729   ; /////////////////////////////////////////////////////////////////////////////////////////////////////
                    4730   ; //
                    4731   ; //
                    4732   ; //                        functions to implement
                    4733   ; //
                    4734   ; //
                    4735   ; /////////////////////////////////////////////////////////////////////////////////////////////////////
                    4736   ; void go_to_top_corner()
                    4737   ; {
                    4738   _go_to_top_corner:
                    4739   ; //Make the cursor (whether visible or not) go to the top left corner of the screen
                    4740   ; //write this function
                    4741   ; VGA_X_CURSOR = 1;
0000298C  13FC 0001 4742          move.b    #1,6295056
00002990  0060 0E10 
                    4743   ; VGA_Y_CURSOR = 0;
00002994  4239 0060 4744          clr.b     6295072
00002998  0E20      
0000299A  4E75      4745          rts
                    4746   ; };
                    4747   ; void clear_screen()
                    4748   ; {
                    4749   _clear_screen:
0000299C  48E7 3000 4750          movem.l   D2/D3,-(A7)
                    4751   ; //Clear the screen
                    4752   ; //write this function
                    4753   ; int x;
                    4754   ; int y;
                    4755   ; for (y=0; y<NUM_VGA_ROWS; y++) {
000029A0  4283      4756          clr.l     D3
                    4757   clear_screen_1:
000029A2  0C83 0000 4758          cmp.l     #40,D3
000029A6  0028      
000029A8  6C24      4759          bge.s     clear_screen_3
                    4760   ; for (x=0; x<NUM_VGA_COLUMNS; x++) {
000029AA  4282      4761          clr.l     D2
                    4762   clear_screen_4:
000029AC  0C82 0000 4763          cmp.l     #80,D2
000029B0  0050      
000029B2  6C16      4764          bge.s     clear_screen_6
                    4765   ; putcharxy(x,y,' ');
000029B4  4878 0020 4766          pea       32
000029B8  2F03      4767          move.l    D3,-(A7)
000029BA  2F02      4768          move.l    D2,-(A7)
000029BC  4EB9 0000 4769          jsr       _putcharxy
000029C0  2A3C      
000029C2  DEFC 000C 4770          add.w     #12,A7
000029C6  5282      4771          addq.l    #1,D2
000029C8  60E2      4772          bra       clear_screen_4
                    4773   clear_screen_6:
000029CA  5283      4774          addq.l    #1,D3
000029CC  60D4      4775          bra       clear_screen_1
                    4776   clear_screen_3:
000029CE  4CDF 000C 4777          movem.l   (A7)+,D2/D3
000029D2  4E75      4778          rts
                    4779   ; }
                    4780   ; }
                    4781   ; };
                    4782   ; void say_awesome() {
                    4783   _say_awesome:
                    4784   ; //Say the word "Awesome"
                    4785   ; //write this function
                    4786   ; talkphonemeAO();
000029D4  4EB8 22B8 4787          jsr       _talkphonemeAO
                    4788   ; talkphonemeSS();
000029D8  4EB8 24A4 4789          jsr       _talkphonemeSS
                    4790   ; talkphonemeSS();
000029DC  4EB8 24A4 4791          jsr       _talkphonemeSS
                    4792   ; talkphonemeEH();
000029E0  4EB8 2348 4793          jsr       _talkphonemeEH
                    4794   ; talkphonemeMM();
000029E4  4EB8 2420 4795          jsr       _talkphonemeMM
                    4796   ; endword();
000029E8  4EB8 2946 4797          jsr       _endword
000029EC  4E75      4798          rts
                    4799   ; }
                    4800   ; void say_cool() {
                    4801   _say_cool:
                    4802   ; //Say the word "Cool"
                    4803   ; //write this function
                    4804   ; talkphonemeKK3();
000029EE  4EB8 2408 4805          jsr       _talkphonemeKK3
                    4806   ; talkphonemeUH();
000029F2  4EB8 24D4 4807          jsr       _talkphonemeUH
                    4808   ; talkphonemeUH();
000029F6  4EB8 24D4 4809          jsr       _talkphonemeUH
                    4810   ; talkphonemeEL();
000029FA  4EB8 2354 4811          jsr       _talkphonemeEL
                    4812   ; endword();
000029FE  4EB8 2946 4813          jsr       _endword
00002A02  4E75      4814          rts
                    4815   ; }
                    4816   ; void say_yeah() {
                    4817   _say_yeah:
                    4818   ; //Say the word "Yeah"
                    4819   ; //write this function
                    4820   ; talkphonemeYY2();
00002A04  4EB8 2540 4821          jsr       _talkphonemeYY2
                    4822   ; talkphonemeEH();
00002A08  4EB8 2348 4823          jsr       _talkphonemeEH
                    4824   ; talkphonemeEH();
00002A0C  4EB8 2348 4825          jsr       _talkphonemeEH
                    4826   ; endword();
00002A10  4EB8 2946 4827          jsr       _endword
00002A14  4E75      4828          rts
                    4829   ; }
                    4830   ; void say_gameover() {
                    4831   _say_gameover:
                    4832   ; talkphonemeGG1();
00002A16  4EB8 2390 4833          jsr       _talkphonemeGG1
                    4834   ; talkphonemeEY();
00002A1A  4EB8 2378 4835          jsr       _talkphonemeEY
                    4836   ; talkphonemePA1();
00002A1E  4EB8 2564 4837          jsr       _talkphonemePA1
                    4838   ; talkphonemeMM();
00002A22  4EB8 2420 4839          jsr       _talkphonemeMM
                    4840   ; endword();
00002A26  4EB8 2946 4841          jsr       _endword
                    4842   ; talkphonemeOW();
00002A2A  4EB8 245C 4843          jsr       _talkphonemeOW
                    4844   ; talkphonemeVV();
00002A2E  4EB8 24F8 4845          jsr       _talkphonemeVV
                    4846   ; talkphonemeER1();
00002A32  4EB8 2360 4847          jsr       _talkphonemeER1
                    4848   ; endword();
00002A36  4EB8 2946 4849          jsr       _endword
00002A3A  4E75      4850          rts
                    4851   ; }
                    4852   ; void putcharxy(int x, int y, char ch,char* error_message) {
                    4853   _putcharxy:
00002A3C  4E56 FFF8 4854          link      A6,#-8
00002A40  48E7 3000 4855          movem.l   D2/D3,-(A7)
00002A44  242E 0008 4856          move.l    8(A6),D2
00002A48  262E 000C 4857          move.l    12(A6),D3
                    4858   ; //Put the character "ch" in row x, column y on the screen.
                    4859   ; //The parameter "error_message" can be used to print out
                    4860   ; //an error message in Hyperterminal during debugging if, 
                    4861   ; //for example, x or y are out of range
                    4862   ; //write this function
                    4863   ; int cursor = y * NUM_VGA_COLUMNS + x;
00002A4C  2F03      4864          move.l    D3,-(A7)
00002A4E  4878 0050 4865          pea       80
00002A52  4EB9 0000 4866          jsr       LMUL
00002A56  396A      
00002A58  2017      4867          move.l    (A7),D0
00002A5A  504F      4868          addq.w    #8,A7
00002A5C  D082      4869          add.l     D2,D0
00002A5E  2D40 FFF8 4870          move.l    D0,-8(A6)
                    4871   ; int addr = VGA_RAM_BASE + cursor;
00002A62  203C 0060 4872          move.l    #6291456,D0
00002A66  0000      
00002A68  D0AE FFF8 4873          add.l     -8(A6),D0
00002A6C  2D40 FFFC 4874          move.l    D0,-4(A6)
                    4875   ; if ((x + NUM_VGA_COLUMNS*y) > (NUM_VGA_COLUMNS* NUM_VGA_ROWS) || (x > NUM_VGA_COLUMNS)) {
00002A70  2002      4876          move.l    D2,D0
00002A72  2F03      4877          move.l    D3,-(A7)
00002A74  4878 0050 4878          pea       80
00002A78  4EB9 0000 4879          jsr       LMUL
00002A7C  396A      
00002A7E  2217      4880          move.l    (A7),D1
00002A80  504F      4881          addq.w    #8,A7
00002A82  D081      4882          add.l     D1,D0
00002A84  0C80 0000 4883          cmp.l     #3200,D0
00002A88  0C80      
00002A8A  6E08      4884          bgt.s     putcharxy_3
00002A8C  0C82 0000 4885          cmp.l     #80,D2
00002A90  0050      
00002A92  6F1A      4886          ble.s     putcharxy_1
                    4887   putcharxy_3:
                    4888   ; printf("Error: x: %d, y: %d\n", x, y, error_message);
00002A94  2F2E 0014 4889          move.l    20(A6),-(A7)
00002A98  2F03      4890          move.l    D3,-(A7)
00002A9A  2F02      4891          move.l    D2,-(A7)
00002A9C  4879 0000 4892          pea       @tetris~1_1.L
00002AA0  4E10      
00002AA2  4EB9 0000 4893          jsr       _printf
00002AA6  3926      
00002AA8  DEFC 0010 4894          add.w     #16,A7
00002AAC  600A      4895          bra.s     putcharxy_2
                    4896   putcharxy_1:
                    4897   ; } else {
                    4898   ; *(char*)addr = ch; // Assign ch to the memory address addr
00002AAE  202E FFFC 4899          move.l    -4(A6),D0
00002AB2  2040      4900          move.l    D0,A0
00002AB4  10AE 0013 4901          move.b    19(A6),(A0)
                    4902   putcharxy_2:
00002AB8  4CDF 000C 4903          movem.l   (A7)+,D2/D3
00002ABC  4E5E      4904          unlk      A6
00002ABE  4E75      4905          rts
                    4906   ; }
                    4907   ; }
                    4908   ; void gotoxy(int x, int y)
                    4909   ; {
                    4910   _gotoxy:
00002AC0  4E56 0000 4911          link      A6,#0
                    4912   ; //have the cursor (whether visible or not) go to row x, column y on the screen
                    4913   ; //write this function
                    4914   ; VGA_X_CURSOR = x;
00002AC4  202E 0008 4915          move.l    8(A6),D0
00002AC8  13C0 0060 4916          move.b    D0,6295056
00002ACC  0E10      
                    4917   ; VGA_Y_CURSOR = y;
00002ACE  202E 000C 4918          move.l    12(A6),D0
00002AD2  13C0 0060 4919          move.b    D0,6295072
00002AD6  0E20      
00002AD8  4E5E      4920          unlk      A6
00002ADA  4E75      4921          rts
                    4922   ; };
                    4923   ; void set_vga_control_reg(char x) {
                    4924   _set_vga_control_reg:
00002ADC  4E56 0000 4925          link      A6,#0
                    4926   ; //Set the value of the control register in the VGA core
                    4927   ; //write this function
                    4928   ; VGA_CTRL = x;
00002AE0  13EE 000B 4929          move.b    11(A6),6295040
00002AE4  0060 0E00 
00002AE8  4E5E      4930          unlk      A6
00002AEA  4E75      4931          rts
                    4932   ; }
                    4933   ; char get_vga_control_reg() {
                    4934   _get_vga_control_reg:
00002AEC  4E56 FFFC 4935          link      A6,#-4
                    4936   ; //Get the value of the control register in the VGA core
                    4937   ; //write this function
                    4938   ; char reg = VGA_CTRL;
00002AF0  1D79 0060 4939          move.b    6295040,-1(A6)
00002AF4  0E00 FFFF 
                    4940   ; return reg;
00002AF8  102E FFFF 4941          move.b    -1(A6),D0
00002AFC  4E5E      4942          unlk      A6
00002AFE  4E75      4943          rts
                    4944   ; }
                    4945   ; void set_color(int color) {
                    4946   _set_color:
00002B00  4E56 0000 4947          link      A6,#0
                    4948   ; //Set the color of the screen
                    4949   ; //write this function
                    4950   ; VGA_CTRL = (0xf0 + color);
00002B04  303C 00F0 4951          move.w    #240,D0
00002B08  48C0      4952          ext.l     D0
00002B0A  D0AE 0008 4953          add.l     8(A6),D0
00002B0E  13C0 0060 4954          move.b    D0,6295040
00002B12  0E00      
00002B14  4E5E      4955          unlk      A6
00002B16  4E75      4956          rts
                    4957   ; }
                    4958   ; int clock() {
                    4959   _clock:
                    4960   ; if(Timer1Status == 1) {
00002B18  1039 0040 4961          move.b    4194354,D0
00002B1C  0032      
00002B1E  0C00 0001 4962          cmp.b     #1,D0
00002B22  6612      4963          bne.s     clock_1
                    4964   ; counter += 10;
00002B24  06B9 0000 4965          add.l     #10,_counter.L
00002B28  000A 0803 
00002B2C  076C      
                    4966   ; Timer1Control = 3;
00002B2E  13FC 0003 4967          move.b    #3,4194354
00002B32  0040 0032 
                    4968   clock_1:
                    4969   ; }
                    4970   ; return counter;
00002B36  2039 0803 4971          move.l    _counter.L,D0
00002B3A  076C      
00002B3C  4E75      4972          rts
                    4973   ; }
                    4974   ; void printw(const char* str,char* error_message) {
                    4975   _printw:
00002B3E  4E56 FFFC 4976          link      A6,#-4
00002B42  48E7 2030 4977          movem.l   D2/A2/A3,-(A7)
00002B46  45F9 0803 4978          lea       _printw_x.L,A2
00002B4A  0764      
00002B4C  47F9 0803 4979          lea       _printw_y.L,A3
00002B50  0768      
00002B52  242E 0008 4980          move.l    8(A6),D2
                    4981   ; //like "printf", just on the VGA screen
                    4982   ; //a newline character ("\n") causes the location
                    4983   ; //to move to the beginning of a new line
                    4984   ; //prints the string in the parameter "str", 
                    4985   ; //the parameter "error_message" can be used for debugging
                    4986   ; //hint: maybe this function could use the function  putcharxy(int x, int y, char ch,char* error_message)
                    4987   ; //write this function
                    4988   ; int i = 0;
00002B56  42AE FFFC 4989          clr.l     -4(A6)
                    4990   ; printw_x = VGA_X_CURSOR;
00002B5A  1039 0060 4991          move.b    6295056,D0
00002B5E  0E10      
00002B60  C0BC 0000 4992          and.l     #255,D0
00002B64  00FF      
00002B66  2480      4993          move.l    D0,(A2)
                    4994   ; printw_y = VGA_Y_CURSOR;
00002B68  1039 0060 4995          move.b    6295072,D0
00002B6C  0E20      
00002B6E  C0BC 0000 4996          and.l     #255,D0
00002B72  00FF      
00002B74  2680      4997          move.l    D0,(A3)
                    4998   ; while (*str != '\0') {
                    4999   printw_1:
00002B76  2042      5000          move.l    D2,A0
00002B78  1010      5001          move.b    (A0),D0
00002B7A  6700 004A 5002          beq       printw_3
                    5003   ; if (*str == '\n') {
00002B7E  2042      5004          move.l    D2,A0
00002B80  1010      5005          move.b    (A0),D0
00002B82  0C00 000A 5006          cmp.b     #10,D0
00002B86  6614      5007          bne.s     printw_4
                    5008   ; printw_x = 1;
00002B88  24BC 0000 5009          move.l    #1,(A2)
00002B8C  0001      
                    5010   ; printw_y ++;
00002B8E  5293      5011          addq.l    #1,(A3)
                    5012   ; gotoxy(printw_x, printw_y);
00002B90  2F13      5013          move.l    (A3),-(A7)
00002B92  2F12      5014          move.l    (A2),-(A7)
00002B94  4EB8 2AC0 5015          jsr       _gotoxy
00002B98  504F      5016          addq.w    #8,A7
00002B9A  6026      5017          bra.s     printw_5
                    5018   printw_4:
                    5019   ; }
                    5020   ; else{
                    5021   ; putcharxy(printw_x , printw_y, *str, error_message);
00002B9C  2F2E 000C 5022          move.l    12(A6),-(A7)
00002BA0  2042      5023          move.l    D2,A0
00002BA2  1210      5024          move.b    (A0),D1
00002BA4  4881      5025          ext.w     D1
00002BA6  48C1      5026          ext.l     D1
00002BA8  2F01      5027          move.l    D1,-(A7)
00002BAA  2F13      5028          move.l    (A3),-(A7)
00002BAC  2F12      5029          move.l    (A2),-(A7)
00002BAE  4EB8 2A3C 5030          jsr       _putcharxy
00002BB2  DEFC 0010 5031          add.w     #16,A7
                    5032   ; printw_x ++;
00002BB6  5292      5033          addq.l    #1,(A2)
                    5034   ; gotoxy(printw_x, printw_y);
00002BB8  2F13      5035          move.l    (A3),-(A7)
00002BBA  2F12      5036          move.l    (A2),-(A7)
00002BBC  4EB8 2AC0 5037          jsr       _gotoxy
00002BC0  504F      5038          addq.w    #8,A7
                    5039   printw_5:
                    5040   ; }
                    5041   ; str++;
00002BC2  5282      5042          addq.l    #1,D2
00002BC4  60B0      5043          bra       printw_1
                    5044   printw_3:
00002BC6  4CDF 0C04 5045          movem.l   (A7)+,D2/A2/A3
00002BCA  4E5E      5046          unlk      A6
00002BCC  4E75      5047          rts
                    5048   ; }
                    5049   ; }
                    5050   ; void gameOver() {
                    5051   _gameOver:
00002BCE  4E56 FFE8 5052          link      A6,#-24
00002BD2  48E7 303C 5053          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
00002BD6  45F8 2AC0 5054          lea       _gotoxy.L,A2
00002BDA  47F8 2A3C 5055          lea       _putcharxy.L,A3
00002BDE  49F9 0000 5056          lea       _delay_ms.L,A4
00002BE2  2E08      
00002BE4  4BEE FFFE 5057          lea       -2(A6),A5
                    5058   ; // Replicate the Game Over screen functionality of the solution
                    5059   ; int i = 0;
00002BE8  4282      5060          clr.l     D2
                    5061   ; int j ;
                    5062   ; char game_over[] = "Game over!";
00002BEA  41EE FFEA 5063          lea       -22(A6),A0
00002BEE  43F9 0000 5064          lea       gameOver_game_over.L,A1
00002BF2  4EE0      
00002BF4  20D9      5065          move.l    (A1)+,(A0)+
00002BF6  20D9      5066          move.l    (A1)+,(A0)+
00002BF8  30D9      5067          move.w    (A1)+,(A0)+
00002BFA  10D9      5068          move.b    (A1)+,(A0)+
                    5069   ; char score_text[] = "Score: ";
00002BFC  41EE FFF6 5070          lea       -10(A6),A0
00002C00  43F9 0000 5071          lea       gameOver_score_text.L,A1
00002C04  4EEC      
00002C06  20D9      5072          move.l    (A1)+,(A0)+
00002C08  20D9      5073          move.l    (A1)+,(A0)+
                    5074   ; char score[2];
                    5075   ; clear_screen();
00002C0A  4EB8 299C 5076          jsr       _clear_screen
                    5077   ; sprintf(score, "%d", tetris_score);
00002C0E  2F39 0803 5078          move.l    _tetris_score.L,-(A7)
00002C12  0672      
00002C14  4879 0000 5079          pea       @tetris~1_2.L
00002C18  4E26      
00002C1A  2F0D      5080          move.l    A5,-(A7)
00002C1C  4EB9 0000 5081          jsr       _sprintf
00002C20  38B0      
00002C22  DEFC 000C 5082          add.w     #12,A7
                    5083   ; clear_screen();
00002C26  4EB8 299C 5084          jsr       _clear_screen
                    5085   ; set_vga_control_reg(0xe4);
00002C2A  4878 00E4 5086          pea       228
00002C2E  4EB8 2ADC 5087          jsr       _set_vga_control_reg
00002C32  584F      5088          addq.w    #4,A7
                    5089   ; // Print "Game over!" in one loop
                    5090   ; for (i = 0; i < 10; i++) {
00002C34  4282      5091          clr.l     D2
                    5092   gameOver_1:
00002C36  0C82 0000 5093          cmp.l     #10,D2
00002C3A  000A      
00002C3C  6C00 0048 5094          bge       gameOver_3
                    5095   ; gotoxy(35+i, 20);
00002C40  4878 0014 5096          pea       20
00002C44  7223      5097          moveq     #35,D1
00002C46  4881      5098          ext.w     D1
00002C48  48C1      5099          ext.l     D1
00002C4A  D282      5100          add.l     D2,D1
00002C4C  2F01      5101          move.l    D1,-(A7)
00002C4E  4E92      5102          jsr       (A2)
00002C50  504F      5103          addq.w    #8,A7
                    5104   ; putcharxy(35 + i, 20, game_over[i], game_over[i]);
00002C52  1236 28EA 5105          move.b    -22(A6,D2.L),D1
00002C56  4881      5106          ext.w     D1
00002C58  48C1      5107          ext.l     D1
00002C5A  2F01      5108          move.l    D1,-(A7)
00002C5C  1236 28EA 5109          move.b    -22(A6,D2.L),D1
00002C60  4881      5110          ext.w     D1
00002C62  48C1      5111          ext.l     D1
00002C64  2F01      5112          move.l    D1,-(A7)
00002C66  4878 0014 5113          pea       20
00002C6A  7223      5114          moveq     #35,D1
00002C6C  4881      5115          ext.w     D1
00002C6E  48C1      5116          ext.l     D1
00002C70  D282      5117          add.l     D2,D1
00002C72  2F01      5118          move.l    D1,-(A7)
00002C74  4E93      5119          jsr       (A3)
00002C76  DEFC 0010 5120          add.w     #16,A7
                    5121   ; delay_ms(100);
00002C7A  4878 0064 5122          pea       100
00002C7E  4E94      5123          jsr       (A4)
00002C80  584F      5124          addq.w    #4,A7
00002C82  5282      5125          addq.l    #1,D2
00002C84  60B0      5126          bra       gameOver_1
                    5127   gameOver_3:
                    5128   ; }
                    5129   ; // Print "Score: " and the score in one loop
                    5130   ; for (i = 0; i < 7; i++) {
00002C86  4282      5131          clr.l     D2
                    5132   gameOver_4:
00002C88  0C82 0000 5133          cmp.l     #7,D2
00002C8C  0007      
00002C8E  6C00 0048 5134          bge       gameOver_6
                    5135   ; gotoxy(35+i, 22);
00002C92  4878 0016 5136          pea       22
00002C96  7223      5137          moveq     #35,D1
00002C98  4881      5138          ext.w     D1
00002C9A  48C1      5139          ext.l     D1
00002C9C  D282      5140          add.l     D2,D1
00002C9E  2F01      5141          move.l    D1,-(A7)
00002CA0  4E92      5142          jsr       (A2)
00002CA2  504F      5143          addq.w    #8,A7
                    5144   ; putcharxy(35 + i, 22, score_text[i], score_text[i]);
00002CA4  1236 28F6 5145          move.b    -10(A6,D2.L),D1
00002CA8  4881      5146          ext.w     D1
00002CAA  48C1      5147          ext.l     D1
00002CAC  2F01      5148          move.l    D1,-(A7)
00002CAE  1236 28F6 5149          move.b    -10(A6,D2.L),D1
00002CB2  4881      5150          ext.w     D1
00002CB4  48C1      5151          ext.l     D1
00002CB6  2F01      5152          move.l    D1,-(A7)
00002CB8  4878 0016 5153          pea       22
00002CBC  7223      5154          moveq     #35,D1
00002CBE  4881      5155          ext.w     D1
00002CC0  48C1      5156          ext.l     D1
00002CC2  D282      5157          add.l     D2,D1
00002CC4  2F01      5158          move.l    D1,-(A7)
00002CC6  4E93      5159          jsr       (A3)
00002CC8  DEFC 0010 5160          add.w     #16,A7
                    5161   ; delay_ms(100);
00002CCC  4878 0064 5162          pea       100
00002CD0  4E94      5163          jsr       (A4)
00002CD2  584F      5164          addq.w    #4,A7
00002CD4  5282      5165          addq.l    #1,D2
00002CD6  60B0      5166          bra       gameOver_4
                    5167   gameOver_6:
                    5168   ; }
                    5169   ; // Print the score value
                    5170   ; if(tetris_score >= 100){
00002CD8  2039 0803 5171          move.l    _tetris_score.L,D0
00002CDC  0672      
00002CDE  0C80 0000 5172          cmp.l     #100,D0
00002CE2  0064      
00002CE4  6D00 009E 5173          blt       gameOver_7
                    5174   ; putcharxy(42, 22, score[0], "score");
00002CE8  4879 0000 5175          pea       @tetris~1_3.L
00002CEC  4E2A      
00002CEE  1215      5176          move.b    (A5),D1
00002CF0  4881      5177          ext.w     D1
00002CF2  48C1      5178          ext.l     D1
00002CF4  2F01      5179          move.l    D1,-(A7)
00002CF6  4878 0016 5180          pea       22
00002CFA  4878 002A 5181          pea       42
00002CFE  4E93      5182          jsr       (A3)
00002D00  DEFC 0010 5183          add.w     #16,A7
                    5184   ; gotoxy(42,22);
00002D04  4878 0016 5185          pea       22
00002D08  4878 002A 5186          pea       42
00002D0C  4E92      5187          jsr       (A2)
00002D0E  504F      5188          addq.w    #8,A7
                    5189   ; delay_ms(100);
00002D10  4878 0064 5190          pea       100
00002D14  4E94      5191          jsr       (A4)
00002D16  584F      5192          addq.w    #4,A7
                    5193   ; putcharxy(43, 22, score[1], "score");
00002D18  4879 0000 5194          pea       @tetris~1_3.L
00002D1C  4E2A      
00002D1E  122D 0001 5195          move.b    1(A5),D1
00002D22  4881      5196          ext.w     D1
00002D24  48C1      5197          ext.l     D1
00002D26  2F01      5198          move.l    D1,-(A7)
00002D28  4878 0016 5199          pea       22
00002D2C  4878 002B 5200          pea       43
00002D30  4E93      5201          jsr       (A3)
00002D32  DEFC 0010 5202          add.w     #16,A7
                    5203   ; gotoxy(43,22);
00002D36  4878 0016 5204          pea       22
00002D3A  4878 002B 5205          pea       43
00002D3E  4E92      5206          jsr       (A2)
00002D40  504F      5207          addq.w    #8,A7
                    5208   ; delay_ms(100);
00002D42  4878 0064 5209          pea       100
00002D46  4E94      5210          jsr       (A4)
00002D48  584F      5211          addq.w    #4,A7
                    5212   ; putcharxy(44, 22, score[1], "score");
00002D4A  4879 0000 5213          pea       @tetris~1_3.L
00002D4E  4E2A      
00002D50  122D 0001 5214          move.b    1(A5),D1
00002D54  4881      5215          ext.w     D1
00002D56  48C1      5216          ext.l     D1
00002D58  2F01      5217          move.l    D1,-(A7)
00002D5A  4878 0016 5218          pea       22
00002D5E  4878 002C 5219          pea       44
00002D62  4E93      5220          jsr       (A3)
00002D64  DEFC 0010 5221          add.w     #16,A7
                    5222   ; gotoxy(44,22);
00002D68  4878 0016 5223          pea       22
00002D6C  4878 002C 5224          pea       44
00002D70  4E92      5225          jsr       (A2)
00002D72  504F      5226          addq.w    #8,A7
                    5227   ; gotoxy(46,22);
00002D74  4878 0016 5228          pea       22
00002D78  4878 002E 5229          pea       46
00002D7C  4E92      5230          jsr       (A2)
00002D7E  504F      5231          addq.w    #8,A7
00002D80  6000 0036 5232          bra       gameOver_8
                    5233   gameOver_7:
                    5234   ; } else {
                    5235   ; putcharxy(42, 22, score[0], "score");
00002D84  4879 0000 5236          pea       @tetris~1_3.L
00002D88  4E2A      
00002D8A  1215      5237          move.b    (A5),D1
00002D8C  4881      5238          ext.w     D1
00002D8E  48C1      5239          ext.l     D1
00002D90  2F01      5240          move.l    D1,-(A7)
00002D92  4878 0016 5241          pea       22
00002D96  4878 002A 5242          pea       42
00002D9A  4E93      5243          jsr       (A3)
00002D9C  DEFC 0010 5244          add.w     #16,A7
                    5245   ; gotoxy(42,22);
00002DA0  4878 0016 5246          pea       22
00002DA4  4878 002A 5247          pea       42
00002DA8  4E92      5248          jsr       (A2)
00002DAA  504F      5249          addq.w    #8,A7
                    5250   ; gotoxy(44,22);
00002DAC  4878 0016 5251          pea       22
00002DB0  4878 002C 5252          pea       44
00002DB4  4E92      5253          jsr       (A2)
00002DB6  504F      5254          addq.w    #8,A7
                    5255   gameOver_8:
                    5256   ; }
                    5257   ; //loops through colors of the game over screen 
                    5258   ; j=2;
00002DB8  7602      5259          moveq     #2,D3
                    5260   ; while (j!=0) {
                    5261   gameOver_9:
00002DBA  4A83      5262          tst.l     D3
00002DBC  6700 0030 5263          beq       gameOver_11
                    5264   ; for (i = 0; i < NUM_SHAPES; i++) {
00002DC0  4282      5265          clr.l     D2
                    5266   gameOver_12:
00002DC2  0C82 0000 5267          cmp.l     #7,D2
00002DC6  0007      
00002DC8  6C20      5268          bge.s     gameOver_14
                    5269   ; set_color(color_def[i]);
00002DCA  2202      5270          move.l    D2,D1
00002DCC  E589      5271          lsl.l     #2,D1
00002DCE  41F9 0000 5272          lea       _color_def.L,A0
00002DD2  4EC4      
00002DD4  2F30 1800 5273          move.l    0(A0,D1.L),-(A7)
00002DD8  4EB8 2B00 5274          jsr       _set_color
00002DDC  584F      5275          addq.w    #4,A7
                    5276   ; delay_ms(500);
00002DDE  4878 01F4 5277          pea       500
00002DE2  4E94      5278          jsr       (A4)
00002DE4  584F      5279          addq.w    #4,A7
00002DE6  5282      5280          addq.l    #1,D2
00002DE8  60D8      5281          bra       gameOver_12
                    5282   gameOver_14:
                    5283   ; }
                    5284   ; j--;
00002DEA  5383      5285          subq.l    #1,D3
00002DEC  60CC      5286          bra       gameOver_9
                    5287   gameOver_11:
                    5288   ; }
                    5289   ; printf("Press something to continue");
00002DEE  4879 0000 5290          pea       @tetris~1_4.L
00002DF2  4E30      
00002DF4  4EB9 0000 5291          jsr       _printf
00002DF8  3926      
00002DFA  584F      5292          addq.w    #4,A7
                    5293   ; menu();
00002DFC  4EB8 1F04 5294          jsr       _menu
00002E00  4CDF 3C0C 5295          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
00002E04  4E5E      5296          unlk      A6
00002E06  4E75      5297          rts
                    5298   ; }
                    5299   ; /////////////////////////////////////////////////////////////////////////////////////////////////////
                    5300   ; //
                    5301   ; //
                    5302   ; //                      end  functions to implement
                    5303   ; //
                    5304   ; //
                    5305   ; /////////////////////////////////////////////////////////////////////////////////////////////////////
                    5306   ; void delay_ms(int num_ms) {
                    5307   _delay_ms:
00002E08  4E56 0000 5308          link      A6,#0
00002E0C  48E7 3000 5309          movem.l   D2/D3,-(A7)
                    5310   ; int start_time;
                    5311   ; int current_time;
                    5312   ; start_time = clock();
00002E10  4EB8 2B18 5313          jsr       _clock
00002E14  2400      5314          move.l    D0,D2
                    5315   ; do {
                    5316   delay_ms_1:
                    5317   ; current_time = clock();
00002E16  4EB8 2B18 5318          jsr       _clock
00002E1A  2600      5319          move.l    D0,D3
                    5320   ; if (current_time < start_time) { //handle wraparound
00002E1C  B682      5321          cmp.l     D2,D3
00002E1E  6C0E      5322          bge.s     delay_ms_3
                    5323   ; num_ms = num_ms - (INT_MAX-start_time);
00002E20  203C 7FFF 5324          move.l    #2147483647,D0
00002E24  FFFF      
00002E26  9082      5325          sub.l     D2,D0
00002E28  91AE 0008 5326          sub.l     D0,8(A6)
                    5327   ; start_time = current_time;
00002E2C  2403      5328          move.l    D3,D2
                    5329   delay_ms_3:
00002E2E  2003      5330          move.l    D3,D0
00002E30  9082      5331          sub.l     D2,D0
00002E32  B0AE 0008 5332          cmp.l     8(A6),D0
00002E36  6DDE      5333          blt       delay_ms_1
00002E38  4CDF 000C 5334          movem.l   (A7)+,D2/D3
00002E3C  4E5E      5335          unlk      A6
00002E3E  4E75      5336          rts
                    5337   ; }
                    5338   ; } while ((current_time - start_time) < num_ms);
                    5339   ; }
                    5340   ; int tetris_rand() {
                    5341   _tetris_rand:
                    5342   ; return ((clock() >> 4)& 0xFFFF); //divide by 4 because clock increases by 10 every interrupt, ensure last digit is "random" too
00002E40  4EB8 2B18 5343          jsr       _clock
00002E44  E880      5344          asr.l     #4,D0
00002E46  C0BC 0000 5345          and.l     #65535,D0
00002E4A  FFFF      
00002E4C  4E75      5346          rts
                    5347   ; }
                    5348   ; void CopyShape(Shape* shape, Shape* new_shape){
                    5349   _CopyShape:
00002E4E  4E56 0000 5350          link      A6,#0
00002E52  48E7 3C00 5351          movem.l   D2/D3/D4/D5,-(A7)
00002E56  242E 000C 5352          move.l    12(A6),D2
00002E5A  2A2E 0008 5353          move.l    8(A6),D5
                    5354   ; int i;
                    5355   ; int j;
                    5356   ; new_shape->width = shape->width;
00002E5E  2045      5357          move.l    D5,A0
00002E60  2242      5358          move.l    D2,A1
00002E62  2368 0010 5359          move.l    16(A0),16(A1)
00002E66  0010      
                    5360   ; new_shape->row = shape->row;
00002E68  2045      5361          move.l    D5,A0
00002E6A  2242      5362          move.l    D2,A1
00002E6C  2368 0014 5363          move.l    20(A0),20(A1)
00002E70  0014      
                    5364   ; new_shape->col = shape->col;
00002E72  2045      5365          move.l    D5,A0
00002E74  2242      5366          move.l    D2,A1
00002E76  2368 0018 5367          move.l    24(A0),24(A1)
00002E7A  0018      
                    5368   ; for(i = 0; i < new_shape->width; i++){
00002E7C  4284      5369          clr.l     D4
                    5370   CopyShape_1:
00002E7E  2042      5371          move.l    D2,A0
00002E80  B8A8 0010 5372          cmp.l     16(A0),D4
00002E84  6C00 002A 5373          bge       CopyShape_3
                    5374   ; for(j=0; j < new_shape->width; j++) {
00002E88  4283      5375          clr.l     D3
                    5376   CopyShape_4:
00002E8A  2042      5377          move.l    D2,A0
00002E8C  B6A8 0010 5378          cmp.l     16(A0),D3
00002E90  6C1A      5379          bge.s     CopyShape_6
                    5380   ; new_shape->array[i][j] = shape->array[i][j];
00002E92  2045      5381          move.l    D5,A0
00002E94  2004      5382          move.l    D4,D0
00002E96  E588      5383          lsl.l     #2,D0
00002E98  D1C0      5384          add.l     D0,A0
00002E9A  2242      5385          move.l    D2,A1
00002E9C  2004      5386          move.l    D4,D0
00002E9E  E588      5387          lsl.l     #2,D0
00002EA0  D3C0      5388          add.l     D0,A1
00002EA2  13B0 3800 5389          move.b    0(A0,D3.L),0(A1,D3.L)
00002EA6  3800      
00002EA8  5283      5390          addq.l    #1,D3
00002EAA  60DE      5391          bra       CopyShape_4
                    5392   CopyShape_6:
00002EAC  5284      5393          addq.l    #1,D4
00002EAE  60CE      5394          bra       CopyShape_1
                    5395   CopyShape_3:
00002EB0  4CDF 003C 5396          movem.l   (A7)+,D2/D3/D4/D5
00002EB4  4E5E      5397          unlk      A6
00002EB6  4E75      5398          rts
                    5399   ; }
                    5400   ; }
                    5401   ; }
                    5402   ; int CheckPosition(Shape* shape){ //Check the position of the copied shape
                    5403   _CheckPosition:
00002EB8  4E56 0000 5404          link      A6,#0
00002EBC  48E7 3800 5405          movem.l   D2/D3/D4,-(A7)
00002EC0  242E 0008 5406          move.l    8(A6),D2
                    5407   ; int i, j;
                    5408   ; for(i = 0; i < shape->width;i++) {
00002EC4  4284      5409          clr.l     D4
                    5410   CheckPosition_1:
00002EC6  2042      5411          move.l    D2,A0
00002EC8  B8A8 0010 5412          cmp.l     16(A0),D4
00002ECC  6C00 0096 5413          bge       CheckPosition_3
                    5414   ; for(j = 0; j < shape->width ;j++){
00002ED0  4283      5415          clr.l     D3
                    5416   CheckPosition_4:
00002ED2  2042      5417          move.l    D2,A0
00002ED4  B6A8 0010 5418          cmp.l     16(A0),D3
00002ED8  6C00 0084 5419          bge       CheckPosition_6
                    5420   ; if((shape->col+j < 0 || shape->col+j >= TETRIS_COLS || shape->row+i >= TETRIS_ROWS)){ //Out of borders
00002EDC  2042      5421          move.l    D2,A0
00002EDE  2028 0018 5422          move.l    24(A0),D0
00002EE2  D083      5423          add.l     D3,D0
00002EE4  0C80 0000 5424          cmp.l     #0,D0
00002EE8  0000      
00002EEA  6D20      5425          blt.s     CheckPosition_9
00002EEC  2042      5426          move.l    D2,A0
00002EEE  2028 0018 5427          move.l    24(A0),D0
00002EF2  D083      5428          add.l     D3,D0
00002EF4  0C80 0000 5429          cmp.l     #15,D0
00002EF8  000F      
00002EFA  6C10      5430          bge.s     CheckPosition_9
00002EFC  2042      5431          move.l    D2,A0
00002EFE  2028 0014 5432          move.l    20(A0),D0
00002F02  D084      5433          add.l     D4,D0
00002F04  0C80 0000 5434          cmp.l     #20,D0
00002F08  0014      
00002F0A  6D18      5435          blt.s     CheckPosition_7
                    5436   CheckPosition_9:
                    5437   ; if(shape->array[i][j]) //but is it just a phantom?
00002F0C  2042      5438          move.l    D2,A0
00002F0E  2004      5439          move.l    D4,D0
00002F10  E588      5440          lsl.l     #2,D0
00002F12  D1C0      5441          add.l     D0,A0
00002F14  4A30 3800 5442          tst.b     0(A0,D3.L)
00002F18  6706      5443          beq.s     CheckPosition_10
                    5444   ; return FALSE;
00002F1A  4280      5445          clr.l     D0
00002F1C  6000 0048 5446          bra       CheckPosition_12
                    5447   CheckPosition_10:
00002F20  6000 0036 5448          bra       CheckPosition_13
                    5449   CheckPosition_7:
                    5450   ; }
                    5451   ; else if(Table[shape->row+i][shape->col+j] && shape->array[i][j])
00002F24  2042      5452          move.l    D2,A0
00002F26  2028 0014 5453          move.l    20(A0),D0
00002F2A  D084      5454          add.l     D4,D0
00002F2C  C1FC 000F 5455          muls      #15,D0
00002F30  41F9 0803 5456          lea       _Table.L,A0
00002F34  0546      
00002F36  D1C0      5457          add.l     D0,A0
00002F38  2242      5458          move.l    D2,A1
00002F3A  2029 0018 5459          move.l    24(A1),D0
00002F3E  D083      5460          add.l     D3,D0
00002F40  4A30 0800 5461          tst.b     0(A0,D0.L)
00002F44  6712      5462          beq.s     CheckPosition_13
00002F46  2042      5463          move.l    D2,A0
00002F48  2004      5464          move.l    D4,D0
00002F4A  E588      5465          lsl.l     #2,D0
00002F4C  D1C0      5466          add.l     D0,A0
00002F4E  4A30 3800 5467          tst.b     0(A0,D3.L)
00002F52  6704      5468          beq.s     CheckPosition_13
                    5469   ; return FALSE;
00002F54  4280      5470          clr.l     D0
00002F56  600E      5471          bra.s     CheckPosition_12
                    5472   CheckPosition_13:
00002F58  5283      5473          addq.l    #1,D3
00002F5A  6000 FF76 5474          bra       CheckPosition_4
                    5475   CheckPosition_6:
00002F5E  5284      5476          addq.l    #1,D4
00002F60  6000 FF64 5477          bra       CheckPosition_1
                    5478   CheckPosition_3:
                    5479   ; }
                    5480   ; }
                    5481   ; return TRUE;
00002F64  7001      5482          moveq     #1,D0
                    5483   CheckPosition_12:
00002F66  4CDF 001C 5484          movem.l   (A7)+,D2/D3/D4
00002F6A  4E5E      5485          unlk      A6
00002F6C  4E75      5486          rts
                    5487   ; }
                    5488   ; void SetNewRandomShape(){ //updates [current] with new shape
                    5489   _SetNewRandomShape:
00002F6E  4E56 FFFC 5490          link      A6,#-4
00002F72  2F0A      5491          move.l    A2,-(A7)
00002F74  45F9 0803 5492          lea       _current.L,A2
00002F78  067C      
                    5493   ; int shapeIndex = mod_bld(tetris_rand(), NUM_SHAPES);
00002F7A  4878 0007 5494          pea       7
00002F7E  2F00      5495          move.l    D0,-(A7)
00002F80  4EB8 2E40 5496          jsr       _tetris_rand
00002F84  2200      5497          move.l    D0,D1
00002F86  201F      5498          move.l    (A7)+,D0
00002F88  2F01      5499          move.l    D1,-(A7)
00002F8A  4EB8 2950 5500          jsr       _mod_bld
00002F8E  504F      5501          addq.w    #8,A7
00002F90  2D40 FFFC 5502          move.l    D0,-4(A6)
                    5503   ; CopyShape(&ShapesArray[shapeIndex], &current);
00002F94  2F0A      5504          move.l    A2,-(A7)
00002F96  41F9 0803 5505          lea       _ShapesArray.L,A0
00002F9A  0698      
00002F9C  222E FFFC 5506          move.l    -4(A6),D1
00002FA0  C3FC 001C 5507          muls      #28,D1
00002FA4  D1C1      5508          add.l     D1,A0
00002FA6  2F08      5509          move.l    A0,-(A7)
00002FA8  4EB8 2E4E 5510          jsr       _CopyShape
00002FAC  504F      5511          addq.w    #8,A7
                    5512   ; //CopyShape(&ShapesArray[mod_bld(tetris_rand(),NUM_SHAPES)],&current);
                    5513   ; current.col = mod_bld(tetris_rand(),(TETRIS_COLS-current.width+1));
00002FAE  720F      5514          moveq     #15,D1
00002FB0  4881      5515          ext.w     D1
00002FB2  48C1      5516          ext.l     D1
00002FB4  92AA 0010 5517          sub.l     16(A2),D1
00002FB8  5281      5518          addq.l    #1,D1
00002FBA  2F01      5519          move.l    D1,-(A7)
00002FBC  2F00      5520          move.l    D0,-(A7)
00002FBE  4EB8 2E40 5521          jsr       _tetris_rand
00002FC2  2200      5522          move.l    D0,D1
00002FC4  201F      5523          move.l    (A7)+,D0
00002FC6  2F01      5524          move.l    D1,-(A7)
00002FC8  4EB8 2950 5525          jsr       _mod_bld
00002FCC  504F      5526          addq.w    #8,A7
00002FCE  2540 0018 5527          move.l    D0,24(A2)
                    5528   ; current.row = 0;
00002FD2  42AA 0014 5529          clr.l     20(A2)
                    5530   ; if(!CheckPosition(&current)){
00002FD6  2F0A      5531          move.l    A2,-(A7)
00002FD8  4EB8 2EB8 5532          jsr       _CheckPosition
00002FDC  584F      5533          addq.w    #4,A7
00002FDE  4A80      5534          tst.l     D0
00002FE0  6606      5535          bne.s     SetNewRandomShape_1
                    5536   ; GameOn = FALSE;
00002FE2  4239 0803 5537          clr.b     _GameOn.L
00002FE6  0676      
                    5538   SetNewRandomShape_1:
00002FE8  245F      5539          move.l    (A7)+,A2
00002FEA  4E5E      5540          unlk      A6
00002FEC  4E75      5541          rts
                    5542   ; //printf("Game on = false\n");
                    5543   ; }
                    5544   ; }
                    5545   ; void RotateShape(Shape* shape){ //rotates clockwise
                    5546   _RotateShape:
00002FEE  4E56 FFE4 5547          link      A6,#-28
00002FF2  48E7 3E00 5548          movem.l   D2/D3/D4/D5/D6,-(A7)
00002FF6  2C2E 0008 5549          move.l    8(A6),D6
                    5550   ; Shape temp;
                    5551   ; int i, j, k, width;
                    5552   ; CopyShape(shape,&temp);
00002FFA  486E FFE4 5553          pea       -28(A6)
00002FFE  2F06      5554          move.l    D6,-(A7)
00003000  4EB8 2E4E 5555          jsr       _CopyShape
00003004  504F      5556          addq.w    #8,A7
                    5557   ; width = shape->width;
00003006  2046      5558          move.l    D6,A0
00003008  2828 0010 5559          move.l    16(A0),D4
                    5560   ; for(i = 0; i < width ; i++){
0000300C  4282      5561          clr.l     D2
                    5562   RotateShape_1:
0000300E  B484      5563          cmp.l     D4,D2
00003010  6C00 0030 5564          bge       RotateShape_3
                    5565   ; for(j = 0, k = width-1; j < width ; j++, k--){
00003014  4283      5566          clr.l     D3
00003016  2004      5567          move.l    D4,D0
00003018  5380      5568          subq.l    #1,D0
0000301A  2A00      5569          move.l    D0,D5
                    5570   RotateShape_4:
0000301C  B684      5571          cmp.l     D4,D3
0000301E  6C1E      5572          bge.s     RotateShape_6
                    5573   ; shape->array[i][j] = temp.array[k][i];
00003020  41EE FFE4 5574          lea       -28(A6),A0
00003024  2005      5575          move.l    D5,D0
00003026  E588      5576          lsl.l     #2,D0
00003028  D1C0      5577          add.l     D0,A0
0000302A  2246      5578          move.l    D6,A1
0000302C  2002      5579          move.l    D2,D0
0000302E  E588      5580          lsl.l     #2,D0
00003030  D3C0      5581          add.l     D0,A1
00003032  13B0 2800 5582          move.b    0(A0,D2.L),0(A1,D3.L)
00003036  3800      
00003038  5283      5583          addq.l    #1,D3
0000303A  5385      5584          subq.l    #1,D5
0000303C  60DE      5585          bra       RotateShape_4
                    5586   RotateShape_6:
0000303E  5282      5587          addq.l    #1,D2
00003040  60CC      5588          bra       RotateShape_1
                    5589   RotateShape_3:
00003042  4CDF 007C 5590          movem.l   (A7)+,D2/D3/D4/D5/D6
00003046  4E5E      5591          unlk      A6
00003048  4E75      5592          rts
                    5593   ; }
                    5594   ; }
                    5595   ; }
                    5596   ; void WriteToTable(){
                    5597   _WriteToTable:
0000304A  48E7 3020 5598          movem.l   D2/D3/A2,-(A7)
0000304E  45F9 0803 5599          lea       _current.L,A2
00003052  067C      
                    5600   ; int i, j;
                    5601   ; for(i = 0; i < current.width ;i++){
00003054  4283      5602          clr.l     D3
                    5603   WriteToTable_1:
00003056  B6AA 0010 5604          cmp.l     16(A2),D3
0000305A  6C00 0048 5605          bge       WriteToTable_3
                    5606   ; for(j = 0; j < current.width ; j++){
0000305E  4282      5607          clr.l     D2
                    5608   WriteToTable_4:
00003060  B4AA 0010 5609          cmp.l     16(A2),D2
00003064  6C00 003A 5610          bge       WriteToTable_6
                    5611   ; if(current.array[i][j])
00003068  2003      5612          move.l    D3,D0
0000306A  E588      5613          lsl.l     #2,D0
0000306C  41F2 0800 5614          lea       0(A2,D0.L),A0
00003070  4A30 2800 5615          tst.b     0(A0,D2.L)
00003074  6726      5616          beq.s     WriteToTable_7
                    5617   ; Table[current.row+i][current.col+j] = current.array[i][j];
00003076  2003      5618          move.l    D3,D0
00003078  E588      5619          lsl.l     #2,D0
0000307A  41F2 0800 5620          lea       0(A2,D0.L),A0
0000307E  202A 0014 5621          move.l    20(A2),D0
00003082  D083      5622          add.l     D3,D0
00003084  C1FC 000F 5623          muls      #15,D0
00003088  43F9 0803 5624          lea       _Table.L,A1
0000308C  0546      
0000308E  D3C0      5625          add.l     D0,A1
00003090  202A 0018 5626          move.l    24(A2),D0
00003094  D082      5627          add.l     D2,D0
00003096  13B0 2800 5628          move.b    0(A0,D2.L),0(A1,D0.L)
0000309A  0800      
                    5629   WriteToTable_7:
0000309C  5282      5630          addq.l    #1,D2
0000309E  60C0      5631          bra       WriteToTable_4
                    5632   WriteToTable_6:
000030A0  5283      5633          addq.l    #1,D3
000030A2  60B2      5634          bra       WriteToTable_1
                    5635   WriteToTable_3:
000030A4  4CDF 040C 5636          movem.l   (A7)+,D2/D3/A2
000030A8  4E75      5637          rts
                    5638   ; }
                    5639   ; }
                    5640   ; }
                    5641   ; void RemoveFullRowsAndUpdateScore(){
                    5642   _RemoveFullRowsAndUpdateScore:
000030AA  4E56 FFFC 5643          link      A6,#-4
000030AE  48E7 3F30 5644          movem.l   D2/D3/D4/D5/D6/D7/A2/A3,-(A7)
000030B2  45F9 0803 5645          lea       _Table.L,A2
000030B6  0546      
000030B8  47F9 0803 5646          lea       _Tetris_Speed.L,A3
000030BC  075C      
                    5647   ; int i, j, sum, count=0;
000030BE  7E00      5648          moveq     #0,D7
                    5649   ; int l, k;
                    5650   ; int compliment_to_say;
                    5651   ; for(i=0;i<TETRIS_ROWS;i++){
000030C0  4284      5652          clr.l     D4
                    5653   RemoveFullRowsAndUpdateScore_1:
000030C2  0C84 0000 5654          cmp.l     #20,D4
000030C6  0014      
000030C8  6C00 00E2 5655          bge       RemoveFullRowsAndUpdateScore_3
                    5656   ; sum = 0;
000030CC  4286      5657          clr.l     D6
                    5658   ; for(j=0;j< TETRIS_COLS;j++) {
000030CE  4285      5659          clr.l     D5
                    5660   RemoveFullRowsAndUpdateScore_4:
000030D0  0C85 0000 5661          cmp.l     #15,D5
000030D4  000F      
000030D6  6C18      5662          bge.s     RemoveFullRowsAndUpdateScore_6
                    5663   ; sum+=Table[i][j];
000030D8  2004      5664          move.l    D4,D0
000030DA  C1FC 000F 5665          muls      #15,D0
000030DE  41F2 0800 5666          lea       0(A2,D0.L),A0
000030E2  1030 5800 5667          move.b    0(A0,D5.L),D0
000030E6  4880      5668          ext.w     D0
000030E8  48C0      5669          ext.l     D0
000030EA  DC80      5670          add.l     D0,D6
000030EC  5285      5671          addq.l    #1,D5
000030EE  60E0      5672          bra       RemoveFullRowsAndUpdateScore_4
                    5673   RemoveFullRowsAndUpdateScore_6:
                    5674   ; }
                    5675   ; if(sum==TETRIS_COLS){
000030F0  0C86 0000 5676          cmp.l     #15,D6
000030F4  000F      
000030F6  6600 00AE 5677          bne       RemoveFullRowsAndUpdateScore_7
                    5678   ; count++;
000030FA  5287      5679          addq.l    #1,D7
                    5680   ; for(k = i;k >=1;k--)
000030FC  2604      5681          move.l    D4,D3
                    5682   RemoveFullRowsAndUpdateScore_9:
000030FE  0C83 0000 5683          cmp.l     #1,D3
00003102  0001      
00003104  6D2E      5684          blt.s     RemoveFullRowsAndUpdateScore_11
                    5685   ; for(l=0;l<TETRIS_COLS;l++)
00003106  4282      5686          clr.l     D2
                    5687   RemoveFullRowsAndUpdateScore_12:
00003108  0C82 0000 5688          cmp.l     #15,D2
0000310C  000F      
0000310E  6C20      5689          bge.s     RemoveFullRowsAndUpdateScore_14
                    5690   ; Table[k][l]=Table[k-1][l];
00003110  2003      5691          move.l    D3,D0
00003112  5380      5692          subq.l    #1,D0
00003114  C1FC 000F 5693          muls      #15,D0
00003118  41F2 0800 5694          lea       0(A2,D0.L),A0
0000311C  2003      5695          move.l    D3,D0
0000311E  C1FC 000F 5696          muls      #15,D0
00003122  43F2 0800 5697          lea       0(A2,D0.L),A1
00003126  13B0 2800 5698          move.b    0(A0,D2.L),0(A1,D2.L)
0000312A  2800      
0000312C  5282      5699          addq.l    #1,D2
0000312E  60D8      5700          bra       RemoveFullRowsAndUpdateScore_12
                    5701   RemoveFullRowsAndUpdateScore_14:
00003130  5383      5702          subq.l    #1,D3
00003132  60CA      5703          bra       RemoveFullRowsAndUpdateScore_9
                    5704   RemoveFullRowsAndUpdateScore_11:
                    5705   ; for(l=0;l<TETRIS_COLS;l++)
00003134  4282      5706          clr.l     D2
                    5707   RemoveFullRowsAndUpdateScore_15:
00003136  0C82 0000 5708          cmp.l     #15,D2
0000313A  000F      
0000313C  6C12      5709          bge.s     RemoveFullRowsAndUpdateScore_17
                    5710   ; Table[k][l]=0;
0000313E  2003      5711          move.l    D3,D0
00003140  C1FC 000F 5712          muls      #15,D0
00003144  41F2 0800 5713          lea       0(A2,D0.L),A0
00003148  4230 2800 5714          clr.b     0(A0,D2.L)
0000314C  5282      5715          addq.l    #1,D2
0000314E  60E6      5716          bra       RemoveFullRowsAndUpdateScore_15
                    5717   RemoveFullRowsAndUpdateScore_17:
                    5718   ; compliment_to_say = mod_bld(tetris_rand(),NUM_LINE_SUCCESS_MESSAGES);
00003150  4878 0003 5719          pea       3
00003154  2F00      5720          move.l    D0,-(A7)
00003156  4EB8 2E40 5721          jsr       _tetris_rand
0000315A  2200      5722          move.l    D0,D1
0000315C  201F      5723          move.l    (A7)+,D0
0000315E  2F01      5724          move.l    D1,-(A7)
00003160  4EB8 2950 5725          jsr       _mod_bld
00003164  504F      5726          addq.w    #8,A7
00003166  2D40 FFFC 5727          move.l    D0,-4(A6)
                    5728   ; switch (compliment_to_say) {
0000316A  202E FFFC 5729          move.l    -4(A6),D0
0000316E  0C80 0000 5730          cmp.l     #1,D0
00003172  0001      
00003174  6718      5731          beq.s     RemoveFullRowsAndUpdateScore_21
00003176  6E06      5732          bgt.s     RemoveFullRowsAndUpdateScore_24
00003178  4A80      5733          tst.l     D0
0000317A  670C      5734          beq.s     RemoveFullRowsAndUpdateScore_20
0000317C  601C      5735          bra.s     RemoveFullRowsAndUpdateScore_18
                    5736   RemoveFullRowsAndUpdateScore_24:
0000317E  0C80 0000 5737          cmp.l     #2,D0
00003182  0002      
00003184  670E      5738          beq.s     RemoveFullRowsAndUpdateScore_22
00003186  6012      5739          bra.s     RemoveFullRowsAndUpdateScore_18
                    5740   RemoveFullRowsAndUpdateScore_20:
                    5741   ; case 0:  say_awesome(); break;
00003188  4EB8 29D4 5742          jsr       _say_awesome
0000318C  6010      5743          bra.s     RemoveFullRowsAndUpdateScore_19
                    5744   RemoveFullRowsAndUpdateScore_21:
                    5745   ; case 1:  say_cool(); break;
0000318E  4EB8 29EE 5746          jsr       _say_cool
00003192  600A      5747          bra.s     RemoveFullRowsAndUpdateScore_19
                    5748   RemoveFullRowsAndUpdateScore_22:
                    5749   ; case 2:  say_yeah(); break;
00003194  4EB8 2A04 5750          jsr       _say_yeah
00003198  6004      5751          bra.s     RemoveFullRowsAndUpdateScore_19
                    5752   RemoveFullRowsAndUpdateScore_18:
                    5753   ; default: say_yeah(); break;
0000319A  4EB8 2A04 5754          jsr       _say_yeah
                    5755   RemoveFullRowsAndUpdateScore_19:
                    5756   ; }
                    5757   ; Tetris_Speed.speed = Tetris_Speed.speed + Tetris_Speed.speed_increase;
0000319E  2013      5758          move.l    (A3),D0
000031A0  D0AB 0004 5759          add.l     4(A3),D0
000031A4  2680      5760          move.l    D0,(A3)
                    5761   RemoveFullRowsAndUpdateScore_7:
000031A6  5284      5762          addq.l    #1,D4
000031A8  6000 FF18 5763          bra       RemoveFullRowsAndUpdateScore_1
                    5764   RemoveFullRowsAndUpdateScore_3:
                    5765   ; }
                    5766   ; }
                    5767   ; tetris_score += 100*count;
000031AC  2F07      5768          move.l    D7,-(A7)
000031AE  4878 0064 5769          pea       100
000031B2  4EB9 0000 5770          jsr       LMUL
000031B6  396A      
000031B8  2017      5771          move.l    (A7),D0
000031BA  504F      5772          addq.w    #8,A7
000031BC  D1B9 0803 5773          add.l     D0,_tetris_score.L
000031C0  0672      
000031C2  4CDF 0CFC 5774          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3
000031C6  4E5E      5775          unlk      A6
000031C8  4E75      5776          rts
                    5777   ; }
                    5778   ; void PrintTable(){
                    5779   _PrintTable:
000031CA  4E56 FE50 5780          link      A6,#-432
000031CE  48E7 3038 5781          movem.l   D2/D3/A2/A3/A4,-(A7)
000031D2  45F8 2B3E 5782          lea       _printw.L,A2
000031D6  47F9 0803 5783          lea       _current.L,A3
000031DA  067C      
000031DC  49EE FED4 5784          lea       -300(A6),A4
                    5785   ; int i, j;
                    5786   ; int shape_index;
                    5787   ; char score_str[128];
                    5788   ; char Buffer[TETRIS_ROWS][TETRIS_COLS];
                    5789   ; for(i = 0; i < TETRIS_ROWS ;i++){
000031E0  4282      5790          clr.l     D2
                    5791   PrintTable_1:
000031E2  0C82 0000 5792          cmp.l     #20,D2
000031E6  0014      
000031E8  6C20      5793          bge.s     PrintTable_3
                    5794   ; for(j = 0; j < TETRIS_COLS ; j++){
000031EA  4283      5795          clr.l     D3
                    5796   PrintTable_4:
000031EC  0C83 0000 5797          cmp.l     #15,D3
000031F0  000F      
000031F2  6C12      5798          bge.s     PrintTable_6
                    5799   ; Buffer[i][j] = 0;
000031F4  2002      5800          move.l    D2,D0
000031F6  C1FC 000F 5801          muls      #15,D0
000031FA  41F4 0800 5802          lea       0(A4,D0.L),A0
000031FE  4230 3800 5803          clr.b     0(A0,D3.L)
00003202  5283      5804          addq.l    #1,D3
00003204  60E6      5805          bra       PrintTable_4
                    5806   PrintTable_6:
00003206  5282      5807          addq.l    #1,D2
00003208  60D8      5808          bra       PrintTable_1
                    5809   PrintTable_3:
                    5810   ; }
                    5811   ; }
                    5812   ; for(i = 0; i < current.width ;i++){
0000320A  4282      5813          clr.l     D2
                    5814   PrintTable_7:
0000320C  B4AB 0010 5815          cmp.l     16(A3),D2
00003210  6C00 0044 5816          bge       PrintTable_9
                    5817   ; for(j = 0; j < current.width ; j++){
00003214  4283      5818          clr.l     D3
                    5819   PrintTable_10:
00003216  B6AB 0010 5820          cmp.l     16(A3),D3
0000321A  6C00 0036 5821          bge       PrintTable_12
                    5822   ; if(current.array[i][j])
0000321E  2002      5823          move.l    D2,D0
00003220  E588      5824          lsl.l     #2,D0
00003222  41F3 0800 5825          lea       0(A3,D0.L),A0
00003226  4A30 3800 5826          tst.b     0(A0,D3.L)
0000322A  6722      5827          beq.s     PrintTable_13
                    5828   ; Buffer[current.row+i][current.col+j] = current.array[i][j];
0000322C  2002      5829          move.l    D2,D0
0000322E  E588      5830          lsl.l     #2,D0
00003230  41F3 0800 5831          lea       0(A3,D0.L),A0
00003234  202B 0014 5832          move.l    20(A3),D0
00003238  D082      5833          add.l     D2,D0
0000323A  C1FC 000F 5834          muls      #15,D0
0000323E  43F4 0800 5835          lea       0(A4,D0.L),A1
00003242  202B 0018 5836          move.l    24(A3),D0
00003246  D083      5837          add.l     D3,D0
00003248  13B0 3800 5838          move.b    0(A0,D3.L),0(A1,D0.L)
0000324C  0800      
                    5839   PrintTable_13:
0000324E  5283      5840          addq.l    #1,D3
00003250  60C4      5841          bra       PrintTable_10
                    5842   PrintTable_12:
00003252  5282      5843          addq.l    #1,D2
00003254  60B6      5844          bra       PrintTable_7
                    5845   PrintTable_9:
                    5846   ; }
                    5847   ; }
                    5848   ; go_to_top_corner();
00003256  4EB8 298C 5849          jsr       _go_to_top_corner
                    5850   ; printw("\n\n\n","initial_newline");
0000325A  4879 0000 5851          pea       @tetris~1_6.L
0000325E  4E50      
00003260  4879 0000 5852          pea       @tetris~1_5.L
00003264  4E4C      
00003266  4E92      5853          jsr       (A2)
00003268  504F      5854          addq.w    #8,A7
                    5855   ; for(i=0; i<TETRIS_COLS-9; i++) {
0000326A  4282      5856          clr.l     D2
                    5857   PrintTable_15:
0000326C  0C82 0000 5858          cmp.l     #6,D2
00003270  0006      
00003272  6C14      5859          bge.s     PrintTable_17
                    5860   ; printw(" ","space");
00003274  4879 0000 5861          pea       @tetris~1_8.L
00003278  4E62      
0000327A  4879 0000 5862          pea       @tetris~1_7.L
0000327E  4E60      
00003280  4E92      5863          jsr       (A2)
00003282  504F      5864          addq.w    #8,A7
00003284  5282      5865          addq.l    #1,D2
00003286  60E4      5866          bra       PrintTable_15
                    5867   PrintTable_17:
                    5868   ; }
                    5869   ; printw("CPEN412 Tetris\n","title");
00003288  4879 0000 5870          pea       @tetris~1_10.L
0000328C  4E78      
0000328E  4879 0000 5871          pea       @tetris~1_9.L
00003292  4E68      
00003294  4E92      5872          jsr       (A2)
00003296  504F      5873          addq.w    #8,A7
                    5874   ; for(i = 0; i < TETRIS_ROWS ;i++){
00003298  4282      5875          clr.l     D2
                    5876   PrintTable_18:
0000329A  0C82 0000 5877          cmp.l     #20,D2
0000329E  0014      
000032A0  6C00 006A 5878          bge       PrintTable_20
                    5879   ; for(j = 0; j < TETRIS_COLS ; j++){
000032A4  4283      5880          clr.l     D3
                    5881   PrintTable_21:
000032A6  0C83 0000 5882          cmp.l     #15,D3
000032AA  000F      
000032AC  6C00 004A 5883          bge       PrintTable_23
                    5884   ; if (Table[i][j] + Buffer[i][j]) {
000032B0  2002      5885          move.l    D2,D0
000032B2  C1FC 000F 5886          muls      #15,D0
000032B6  41F9 0803 5887          lea       _Table.L,A0
000032BA  0546      
000032BC  D1C0      5888          add.l     D0,A0
000032BE  1030 3800 5889          move.b    0(A0,D3.L),D0
000032C2  2202      5890          move.l    D2,D1
000032C4  C3FC 000F 5891          muls      #15,D1
000032C8  41F4 1800 5892          lea       0(A4,D1.L),A0
000032CC  D030 3800 5893          add.b     0(A0,D3.L),D0
000032D0  6712      5894          beq.s     PrintTable_24
                    5895   ; printw("#","table#");
000032D2  4879 0000 5896          pea       @tetris~1_12.L
000032D6  4E80      
000032D8  4879 0000 5897          pea       @tetris~1_11.L
000032DC  4E7E      
000032DE  4E92      5898          jsr       (A2)
000032E0  504F      5899          addq.w    #8,A7
000032E2  6010      5900          bra.s     PrintTable_25
                    5901   PrintTable_24:
                    5902   ; } else {
                    5903   ; printw(".","table.");
000032E4  4879 0000 5904          pea       @tetris~1_14.L
000032E8  4E8A      
000032EA  4879 0000 5905          pea       @tetris~1_13.L
000032EE  4E88      
000032F0  4E92      5906          jsr       (A2)
000032F2  504F      5907          addq.w    #8,A7
                    5908   PrintTable_25:
000032F4  5283      5909          addq.l    #1,D3
000032F6  60AE      5910          bra       PrintTable_21
                    5911   PrintTable_23:
                    5912   ; }
                    5913   ; //printw(" ","space2");
                    5914   ; }
                    5915   ; printw("\n","newline1");
000032F8  4879 0000 5916          pea       @tetris~1_16.L
000032FC  4E94      
000032FE  4879 0000 5917          pea       @tetris~1_15.L
00003302  4E92      
00003304  4E92      5918          jsr       (A2)
00003306  504F      5919          addq.w    #8,A7
00003308  5282      5920          addq.l    #1,D2
0000330A  608E      5921          bra       PrintTable_18
                    5922   PrintTable_20:
                    5923   ; }
                    5924   ; sprintf(score_str,"\nScore: %d\n",tetris_score);
0000330C  2F39 0803 5925          move.l    _tetris_score.L,-(A7)
00003310  0672      
00003312  4879 0000 5926          pea       @tetris~1_17.L
00003316  4E9E      
00003318  486E FE54 5927          pea       -428(A6)
0000331C  4EB9 0000 5928          jsr       _sprintf
00003320  38B0      
00003322  DEFC 000C 5929          add.w     #12,A7
                    5930   ; printw(score_str,"scoreprint");
00003326  4879 0000 5931          pea       @tetris~1_18.L
0000332A  4EAA      
0000332C  486E FE54 5932          pea       -428(A6)
00003330  4E92      5933          jsr       (A2)
00003332  504F      5934          addq.w    #8,A7
00003334  4CDF 1C0C 5935          movem.l   (A7)+,D2/D3/A2/A3/A4
00003338  4E5E      5936          unlk      A6
0000333A  4E75      5937          rts
                    5938   ; }
                    5939   ; void ManipulateCurrent(int action){
                    5940   _ManipulateCurrent:
0000333C  4E56 FFE4 5941          link      A6,#-28
00003340  48E7 0038 5942          movem.l   A2/A3/A4,-(A7)
00003344  45EE FFE4 5943          lea       -28(A6),A2
00003348  47F9 0803 5944          lea       _current.L,A3
0000334C  067C      
0000334E  49F8 2EB8 5945          lea       _CheckPosition.L,A4
                    5946   ; Shape temp;
                    5947   ; CopyShape(&current,&temp);
00003352  2F0A      5948          move.l    A2,-(A7)
00003354  2F0B      5949          move.l    A3,-(A7)
00003356  4EB8 2E4E 5950          jsr       _CopyShape
0000335A  504F      5951          addq.w    #8,A7
                    5952   ; switch(action){
0000335C  202E 0008 5953          move.l    8(A6),D0
00003360  0C80 0000 5954          cmp.l     #115,D0
00003364  0073      
00003366  672C      5955          beq.s     ManipulateCurrent_3
00003368  6E1C      5956          bgt.s     ManipulateCurrent_7
0000336A  0C80 0000 5957          cmp.l     #100,D0
0000336E  0064      
00003370  6700 0056 5958          beq       ManipulateCurrent_4
00003374  6E00 00B6 5959          bgt       ManipulateCurrent_2
00003378  0C80 0000 5960          cmp.l     #97,D0
0000337C  0061      
0000337E  6700 006E 5961          beq       ManipulateCurrent_5
00003382  6000 00A8 5962          bra       ManipulateCurrent_2
                    5963   ManipulateCurrent_7:
00003386  0C80 0000 5964          cmp.l     #119,D0
0000338A  0077      
0000338C  6700 0084 5965          beq       ManipulateCurrent_6
00003390  6000 009A 5966          bra       ManipulateCurrent_2
                    5967   ManipulateCurrent_3:
                    5968   ; case 's':
                    5969   ; temp.row++;  //move down
00003394  200A      5970          move.l    A2,D0
00003396  0680 0000 5971          add.l     #20,D0
0000339A  0014      
0000339C  2040      5972          move.l    D0,A0
0000339E  5290      5973          addq.l    #1,(A0)
                    5974   ; if(CheckPosition(&temp)) {
000033A0  2F0A      5975          move.l    A2,-(A7)
000033A2  4E94      5976          jsr       (A4)
000033A4  584F      5977          addq.w    #4,A7
000033A6  4A80      5978          tst.l     D0
000033A8  670E      5979          beq.s     ManipulateCurrent_8
                    5980   ; current.row++;
000033AA  200B      5981          move.l    A3,D0
000033AC  0680 0000 5982          add.l     #20,D0
000033B0  0014      
000033B2  2040      5983          move.l    D0,A0
000033B4  5290      5984          addq.l    #1,(A0)
000033B6  600C      5985          bra.s     ManipulateCurrent_9
                    5986   ManipulateCurrent_8:
                    5987   ; } else {
                    5988   ; WriteToTable();
000033B8  4EB8 304A 5989          jsr       _WriteToTable
                    5990   ; RemoveFullRowsAndUpdateScore();
000033BC  4EB8 30AA 5991          jsr       _RemoveFullRowsAndUpdateScore
                    5992   ; SetNewRandomShape();
000033C0  4EB8 2F6E 5993          jsr       _SetNewRandomShape
                    5994   ManipulateCurrent_9:
                    5995   ; }
                    5996   ; break;
000033C4  6000 0066 5997          bra       ManipulateCurrent_2
                    5998   ManipulateCurrent_4:
                    5999   ; case 'd':
                    6000   ; temp.col++;  //move right
000033C8  200A      6001          move.l    A2,D0
000033CA  0680 0000 6002          add.l     #24,D0
000033CE  0018      
000033D0  2040      6003          move.l    D0,A0
000033D2  5290      6004          addq.l    #1,(A0)
                    6005   ; if(CheckPosition(&temp))
000033D4  2F0A      6006          move.l    A2,-(A7)
000033D6  4E94      6007          jsr       (A4)
000033D8  584F      6008          addq.w    #4,A7
000033DA  4A80      6009          tst.l     D0
000033DC  670C      6010          beq.s     ManipulateCurrent_10
                    6011   ; current.col++;
000033DE  200B      6012          move.l    A3,D0
000033E0  0680 0000 6013          add.l     #24,D0
000033E4  0018      
000033E6  2040      6014          move.l    D0,A0
000033E8  5290      6015          addq.l    #1,(A0)
                    6016   ManipulateCurrent_10:
                    6017   ; break;
000033EA  6000 0040 6018          bra       ManipulateCurrent_2
                    6019   ManipulateCurrent_5:
                    6020   ; case 'a':
                    6021   ; temp.col--;  //move left
000033EE  200A      6022          move.l    A2,D0
000033F0  0680 0000 6023          add.l     #24,D0
000033F4  0018      
000033F6  2040      6024          move.l    D0,A0
000033F8  5390      6025          subq.l    #1,(A0)
                    6026   ; if(CheckPosition(&temp))
000033FA  2F0A      6027          move.l    A2,-(A7)
000033FC  4E94      6028          jsr       (A4)
000033FE  584F      6029          addq.w    #4,A7
00003400  4A80      6030          tst.l     D0
00003402  670C      6031          beq.s     ManipulateCurrent_12
                    6032   ; current.col--;
00003404  200B      6033          move.l    A3,D0
00003406  0680 0000 6034          add.l     #24,D0
0000340A  0018      
0000340C  2040      6035          move.l    D0,A0
0000340E  5390      6036          subq.l    #1,(A0)
                    6037   ManipulateCurrent_12:
                    6038   ; break;
00003410  601A      6039          bra.s     ManipulateCurrent_2
                    6040   ManipulateCurrent_6:
                    6041   ; case 'w':
                    6042   ; RotateShape(&temp); // rotate clockwise
00003412  2F0A      6043          move.l    A2,-(A7)
00003414  4EB8 2FEE 6044          jsr       _RotateShape
00003418  584F      6045          addq.w    #4,A7
                    6046   ; if(CheckPosition(&temp))
0000341A  2F0A      6047          move.l    A2,-(A7)
0000341C  4E94      6048          jsr       (A4)
0000341E  584F      6049          addq.w    #4,A7
00003420  4A80      6050          tst.l     D0
00003422  6708      6051          beq.s     ManipulateCurrent_14
                    6052   ; RotateShape(&current);
00003424  2F0B      6053          move.l    A3,-(A7)
00003426  4EB8 2FEE 6054          jsr       _RotateShape
0000342A  584F      6055          addq.w    #4,A7
                    6056   ManipulateCurrent_14:
                    6057   ; break;
                    6058   ManipulateCurrent_2:
                    6059   ; }
                    6060   ; PrintTable();
0000342C  4EB8 31CA 6061          jsr       _PrintTable
00003430  4CDF 1C00 6062          movem.l   (A7)+,A2/A3/A4
00003434  4E5E      6063          unlk      A6
00003436  4E75      6064          rts
                    6065   ; }
                    6066   ; void initTetris_Speed()
                    6067   ; {
                    6068   _initTetris_Speed:
                    6069   ; Tetris_Speed.speed          = INITIAL_TETRIS_SPEED ;
00003438  23FC 0000 6070          move.l    #2,_Tetris_Speed.L
0000343C  0002 0803 
00003440  075C      
                    6071   ; Tetris_Speed.speed_increase = TETRIS_SPEED_INCREASE;
00003442  23FC 0000 6072          move.l    #1,_Tetris_Speed+4.L
00003446  0001 0803 
0000344A  0760      
0000344C  4E75      6073          rts
                    6074   ; }
                    6075   ; void tetris_mainloop()
                    6076   ; {
                    6077   _tetris_mainloop:
0000344E  4E56 FFFC 6078          link      A6,#-4
00003452  2F02      6079          move.l    D2,-(A7)
                    6080   ; int current_time;
                    6081   ; int got_game_over;
                    6082   ; while(1){
                    6083   tetris_mainloop_1:
                    6084   ; current_time = clock();
00003454  4EB8 2B18 6085          jsr       _clock
00003458  2400      6086          move.l    D0,D2
                    6087   ; if (kbhit()) {
0000345A  4EB8 0958 6088          jsr       _kbhit
0000345E  4A80      6089          tst.l     D0
00003460  6720      6090          beq.s     tetris_mainloop_6
                    6091   ; ManipulateCurrent(getch());
00003462  2F00      6092          move.l    D0,-(A7)
00003464  4EB9 0000 6093          jsr       _getch
00003468  39F8      
0000346A  2200      6094          move.l    D0,D1
0000346C  201F      6095          move.l    (A7)+,D0
0000346E  2F01      6096          move.l    D1,-(A7)
00003470  4EB8 333C 6097          jsr       _ManipulateCurrent
00003474  584F      6098          addq.w    #4,A7
                    6099   ; if (!GameOn) {
00003476  4A39 0803 6100          tst.b     _GameOn.L
0000347A  0676      
0000347C  6604      6101          bne.s     tetris_mainloop_6
                    6102   ; break;
0000347E  6000 003C 6103          bra       tetris_mainloop_3
                    6104   tetris_mainloop_6:
                    6105   ; }
                    6106   ; }
                    6107   ; if (current_time >= ((MILLISECONDS_PER_SEC/Tetris_Speed.speed) + tetris_timer)) {
00003482  4878 03E8 6108          pea       1000
00003486  2F39 0803 6109          move.l    _Tetris_Speed.L,-(A7)
0000348A  075C      
0000348C  4EB9 0000 6110          jsr       LDIV
00003490  3788      
00003492  2017      6111          move.l    (A7),D0
00003494  504F      6112          addq.w    #8,A7
00003496  D0B9 0803 6113          add.l     _tetris_timer.L,D0
0000349A  0678      
0000349C  B480      6114          cmp.l     D0,D2
0000349E  6D1A      6115          blt.s     tetris_mainloop_8
                    6116   ; ManipulateCurrent('s');
000034A0  4878 0073 6117          pea       115
000034A4  4EB8 333C 6118          jsr       _ManipulateCurrent
000034A8  584F      6119          addq.w    #4,A7
                    6120   ; if (!GameOn) {
000034AA  4A39 0803 6121          tst.b     _GameOn.L
000034AE  0676      
000034B0  6602      6122          bne.s     tetris_mainloop_10
                    6123   ; break;
000034B2  6008      6124          bra.s     tetris_mainloop_3
                    6125   tetris_mainloop_10:
                    6126   ; }
                    6127   ; tetris_timer = current_time;
000034B4  23C2 0803 6128          move.l    D2,_tetris_timer.L
000034B8  0678      
                    6129   tetris_mainloop_8:
000034BA  6098      6130          bra       tetris_mainloop_1
                    6131   tetris_mainloop_3:
000034BC  241F      6132          move.l    (A7)+,D2
000034BE  4E5E      6133          unlk      A6
000034C0  4E75      6134          rts
                    6135   ; }
                    6136   ; }
                    6137   ; }
                    6138   ; int tetris_main() {
                    6139   _tetris_main:
000034C2  4E56 FF7C 6140          link      A6,#-132
000034C6  48E7 3030 6141          movem.l   D2/D3/A2/A3,-(A7)
000034CA  45F9 0803 6142          lea       _ShapesArray.L,A2
000034CE  0698      
000034D0  47F9 0000 6143          lea       _printf.L,A3
000034D4  3926      
                    6144   ; int i, j;
                    6145   ; int test1;
                    6146   ; char score_str[128];
                    6147   ; printw_x = 0;
000034D6  42B9 0803 6148          clr.l     _printw_x.L
000034DA  0764      
                    6149   ; printw_y = 0;
000034DC  42B9 0803 6150          clr.l     _printw_y.L
000034E0  0768      
                    6151   ; GameOn = TRUE;
000034E2  13FC 0001 6152          move.b    #1,_GameOn.L
000034E6  0803 0676 
                    6153   ; counter = 0;
000034EA  42B9 0803 6154          clr.l     _counter.L
000034EE  076C      
                    6155   ; for(i = 0; i < TETRIS_ROWS ;i++){
000034F0  4283      6156          clr.l     D3
                    6157   tetris_main_1:
000034F2  0C83 0000 6158          cmp.l     #20,D3
000034F6  0014      
000034F8  6C24      6159          bge.s     tetris_main_3
                    6160   ; for(j = 0; j < TETRIS_COLS ; j++){
000034FA  4282      6161          clr.l     D2
                    6162   tetris_main_4:
000034FC  0C82 0000 6163          cmp.l     #15,D2
00003500  000F      
00003502  6C16      6164          bge.s     tetris_main_6
                    6165   ; Table[i][j] = 0;
00003504  2003      6166          move.l    D3,D0
00003506  C1FC 000F 6167          muls      #15,D0
0000350A  41F9 0803 6168          lea       _Table.L,A0
0000350E  0546      
00003510  D1C0      6169          add.l     D0,A0
00003512  4230 2800 6170          clr.b     0(A0,D2.L)
00003516  5282      6171          addq.l    #1,D2
00003518  60E2      6172          bra       tetris_main_4
                    6173   tetris_main_6:
0000351A  5283      6174          addq.l    #1,D3
0000351C  60D4      6175          bra       tetris_main_1
                    6176   tetris_main_3:
                    6177   ; }
                    6178   ; }
                    6179   ; InstallExceptionHandler(clock, 30) ;
0000351E  4878 001E 6180          pea       30
00003522  4878 2B18 6181          pea       _clock.L
00003526  4EB8 08C6 6182          jsr       _InstallExceptionHandler
0000352A  504F      6183          addq.w    #8,A7
                    6184   ; set_color(TETRIS_COLOR);
0000352C  4878 0002 6185          pea       2
00003530  4EB8 2B00 6186          jsr       _set_color
00003534  584F      6187          addq.w    #4,A7
                    6188   ; set_vga_control_reg(OCTL_TETRIS_DEFAULT);
00003536  4878 00A2 6189          pea       162
0000353A  4EB8 2ADC 6190          jsr       _set_vga_control_reg
0000353E  584F      6191          addq.w    #4,A7
                    6192   ; tetris_score = 0;
00003540  42B9 0803 6193          clr.l     _tetris_score.L
00003544  0672      
                    6194   ; initTetris_Speed();
00003546  4EB8 3438 6195          jsr       _initTetris_Speed
                    6196   ; clear_screen();
0000354A  4EB8 299C 6197          jsr       _clear_screen
                    6198   ; tetris_timer = clock();
0000354E  4EB8 2B18 6199          jsr       _clock
00003552  23C0 0803 6200          move.l    D0,_tetris_timer.L
00003556  0678      
                    6201   ; SetNewRandomShape();
00003558  4EB8 2F6E 6202          jsr       _SetNewRandomShape
                    6203   ; PrintTable();	
0000355C  4EB8 31CA 6204          jsr       _PrintTable
                    6205   ; tetris_mainloop();
00003560  4EB8 344E 6206          jsr       _tetris_mainloop
                    6207   ; for(i = 0; i < TETRIS_ROWS ;i++){
00003564  4283      6208          clr.l     D3
                    6209   tetris_main_7:
00003566  0C83 0000 6210          cmp.l     #20,D3
0000356A  0014      
0000356C  6C00 0048 6211          bge       tetris_main_9
                    6212   ; for(j = 0; j < TETRIS_COLS ; j++){
00003570  4282      6213          clr.l     D2
                    6214   tetris_main_10:
00003572  0C82 0000 6215          cmp.l     #15,D2
00003576  000F      
00003578  6C2E      6216          bge.s     tetris_main_12
                    6217   ; if (Table[i][j]) {
0000357A  2003      6218          move.l    D3,D0
0000357C  C1FC 000F 6219          muls      #15,D0
00003580  41F9 0803 6220          lea       _Table.L,A0
00003584  0546      
00003586  D1C0      6221          add.l     D0,A0
00003588  4A30 2800 6222          tst.b     0(A0,D2.L)
0000358C  670C      6223          beq.s     tetris_main_13
                    6224   ; printf("#");
0000358E  4879 0000 6225          pea       @tetris~1_11.L
00003592  4E7E      
00003594  4E93      6226          jsr       (A3)
00003596  584F      6227          addq.w    #4,A7
00003598  600A      6228          bra.s     tetris_main_14
                    6229   tetris_main_13:
                    6230   ; } else {
                    6231   ; printf(".");
0000359A  4879 0000 6232          pea       @tetris~1_13.L
0000359E  4E88      
000035A0  4E93      6233          jsr       (A3)
000035A2  584F      6234          addq.w    #4,A7
                    6235   tetris_main_14:
000035A4  5282      6236          addq.l    #1,D2
000035A6  60CA      6237          bra       tetris_main_10
                    6238   tetris_main_12:
                    6239   ; }
                    6240   ; }
                    6241   ; printf("\n");
000035A8  4879 0000 6242          pea       @tetris~1_15.L
000035AC  4E92      
000035AE  4E93      6243          jsr       (A3)
000035B0  584F      6244          addq.w    #4,A7
000035B2  5283      6245          addq.l    #1,D3
000035B4  60B0      6246          bra       tetris_main_7
                    6247   tetris_main_9:
                    6248   ; }
                    6249   ; printf("\nGame over!\n");
000035B6  4879 0000 6250          pea       @tetris~1_19.L
000035BA  4EB6      
000035BC  4E93      6251          jsr       (A3)
000035BE  584F      6252          addq.w    #4,A7
                    6253   ; sprintf(score_str,"\nScore: %d\n",tetris_score);
000035C0  2F39 0803 6254          move.l    _tetris_score.L,-(A7)
000035C4  0672      
000035C6  4879 0000 6255          pea       @tetris~1_17.L
000035CA  4E9E      
000035CC  486E FF80 6256          pea       -128(A6)
000035D0  4EB9 0000 6257          jsr       _sprintf
000035D4  38B0      
000035D6  DEFC 000C 6258          add.w     #12,A7
                    6259   ; printf(score_str);
000035DA  486E FF80 6260          pea       -128(A6)
000035DE  4E93      6261          jsr       (A3)
000035E0  584F      6262          addq.w    #4,A7
                    6263   ; say_gameover();
000035E2  4EB8 2A16 6264          jsr       _say_gameover
                    6265   ; gameOver();
000035E6  4EB8 2BCE 6266          jsr       _gameOver
                    6267   ; //S shape
                    6268   ; ShapesArray[0].array[0][0] = 	0;
000035EA  4212      6269          clr.b     (A2)
                    6270   ; ShapesArray[0].array[0][1] = 	1;
000035EC  157C 0001 6271          move.b    #1,1(A2)
000035F0  0001      
                    6272   ; ShapesArray[0].array[0][2] = 	1;
000035F2  157C 0001 6273          move.b    #1,2(A2)
000035F6  0002      
                    6274   ; ShapesArray[0].array[1][0] = 	1;
000035F8  157C 0001 6275          move.b    #1,4(A2)
000035FC  0004      
                    6276   ; ShapesArray[0].array[1][1] = 	1;
000035FE  157C 0001 6277          move.b    #1,4+1(A2)
00003602  0005      
                    6278   ; ShapesArray[0].array[1][2] = 	0;
00003604  422A 0006 6279          clr.b     4+2(A2)
                    6280   ; ShapesArray[0].array[2][0] = 	0;
00003608  422A 0008 6281          clr.b     8(A2)
                    6282   ; ShapesArray[0].array[2][1] = 	0;
0000360C  422A 0009 6283          clr.b     8+1(A2)
                    6284   ; ShapesArray[0].array[2][2] = 	0;
00003610  422A 000A 6285          clr.b     8+2(A2)
                    6286   ; ShapesArray[0].width       = 	3;
00003614  257C 0000 6287          move.l    #3,16(A2)
00003618  0003 0010 
                    6288   ; //Z shape
                    6289   ; ShapesArray[1].array[0][0] = 	1;
0000361C  157C 0001 6290          move.b    #1,28(A2)
00003620  001C      
                    6291   ; ShapesArray[1].array[0][1] = 	1;
00003622  157C 0001 6292          move.b    #1,28+1(A2)
00003626  001D      
                    6293   ; ShapesArray[1].array[0][2] = 	0;
00003628  422A 001E 6294          clr.b     28+2(A2)
                    6295   ; ShapesArray[1].array[1][0] = 	0;
0000362C  422A 0020 6296          clr.b     28+4(A2)
                    6297   ; ShapesArray[1].array[1][1] = 	1;
00003630  157C 0001 6298          move.b    #1,28+4+1(A2)
00003634  0021      
                    6299   ; ShapesArray[1].array[1][2] = 	1;
00003636  157C 0001 6300          move.b    #1,28+4+2(A2)
0000363A  0022      
                    6301   ; ShapesArray[1].array[2][0] = 	0;
0000363C  422A 0024 6302          clr.b     28+8(A2)
                    6303   ; ShapesArray[1].array[2][1] = 	0;
00003640  422A 0025 6304          clr.b     28+8+1(A2)
                    6305   ; ShapesArray[1].array[2][2] = 	0;
00003644  422A 0026 6306          clr.b     28+8+2(A2)
                    6307   ; ShapesArray[1].width       = 	3;
00003648  257C 0000 6308          move.l    #3,44(A2)
0000364C  0003 002C 
                    6309   ; //T shape
                    6310   ; ShapesArray[2].array[0][0] = 	0;
00003650  422A 0038 6311          clr.b     56(A2)
                    6312   ; ShapesArray[2].array[0][1] = 	1;
00003654  157C 0001 6313          move.b    #1,56+1(A2)
00003658  0039      
                    6314   ; ShapesArray[2].array[0][2] = 	0;
0000365A  422A 003A 6315          clr.b     56+2(A2)
                    6316   ; ShapesArray[2].array[1][0] = 	1;
0000365E  157C 0001 6317          move.b    #1,56+4(A2)
00003662  003C      
                    6318   ; ShapesArray[2].array[1][1] = 	1;
00003664  157C 0001 6319          move.b    #1,56+4+1(A2)
00003668  003D      
                    6320   ; ShapesArray[2].array[1][2] = 	1;
0000366A  157C 0001 6321          move.b    #1,56+4+2(A2)
0000366E  003E      
                    6322   ; ShapesArray[2].array[2][0] = 	0;
00003670  422A 0040 6323          clr.b     56+8(A2)
                    6324   ; ShapesArray[2].array[2][1] = 	0;
00003674  422A 0041 6325          clr.b     56+8+1(A2)
                    6326   ; ShapesArray[2].array[2][2] = 	0;
00003678  422A 0042 6327          clr.b     56+8+2(A2)
                    6328   ; ShapesArray[2].width       = 	3;
0000367C  257C 0000 6329          move.l    #3,72(A2)
00003680  0003 0048 
                    6330   ; //L shape
                    6331   ; ShapesArray[3].array[0][0] = 	0;
00003684  422A 0054 6332          clr.b     84(A2)
                    6333   ; ShapesArray[3].array[0][1] = 	0;
00003688  422A 0055 6334          clr.b     84+1(A2)
                    6335   ; ShapesArray[3].array[0][2] = 	1;
0000368C  157C 0001 6336          move.b    #1,84+2(A2)
00003690  0056      
                    6337   ; ShapesArray[3].array[1][0] = 	1;
00003692  157C 0001 6338          move.b    #1,84+4(A2)
00003696  0058      
                    6339   ; ShapesArray[3].array[1][1] = 	1;
00003698  157C 0001 6340          move.b    #1,84+4+1(A2)
0000369C  0059      
                    6341   ; ShapesArray[3].array[1][2] = 	1;
0000369E  157C 0001 6342          move.b    #1,84+4+2(A2)
000036A2  005A      
                    6343   ; ShapesArray[3].array[2][0] = 	0;
000036A4  422A 005C 6344          clr.b     84+8(A2)
                    6345   ; ShapesArray[3].array[2][1] = 	0;
000036A8  422A 005D 6346          clr.b     84+8+1(A2)
                    6347   ; ShapesArray[3].array[2][2] = 	0;
000036AC  422A 005E 6348          clr.b     84+8+2(A2)
                    6349   ; ShapesArray[3].width       = 	3;
000036B0  257C 0000 6350          move.l    #3,100(A2)
000036B4  0003 0064 
                    6351   ; //flipped L shape
                    6352   ; ShapesArray[4].array[0][0] = 	1;
000036B8  157C 0001 6353          move.b    #1,112(A2)
000036BC  0070      
                    6354   ; ShapesArray[4].array[0][1] = 	0;
000036BE  422A 0071 6355          clr.b     112+1(A2)
                    6356   ; ShapesArray[4].array[0][2] = 	0;
000036C2  422A 0072 6357          clr.b     112+2(A2)
                    6358   ; ShapesArray[4].array[1][0] = 	1;
000036C6  157C 0001 6359          move.b    #1,112+4(A2)
000036CA  0074      
                    6360   ; ShapesArray[4].array[1][1] = 	1;
000036CC  157C 0001 6361          move.b    #1,112+4+1(A2)
000036D0  0075      
                    6362   ; ShapesArray[4].array[1][2] = 	1;
000036D2  157C 0001 6363          move.b    #1,112+4+2(A2)
000036D6  0076      
                    6364   ; ShapesArray[4].array[2][0] = 	0;
000036D8  422A 0078 6365          clr.b     112+8(A2)
                    6366   ; ShapesArray[4].array[2][1] = 	0;
000036DC  422A 0079 6367          clr.b     112+8+1(A2)
                    6368   ; ShapesArray[4].array[2][2] = 	0;
000036E0  422A 007A 6369          clr.b     112+8+2(A2)
                    6370   ; ShapesArray[4].width       = 	3;
000036E4  257C 0000 6371          move.l    #3,128(A2)
000036E8  0003 0080 
                    6372   ; //square shape
                    6373   ; ShapesArray[5].array[0][0] = 	1;
000036EC  157C 0001 6374          move.b    #1,140(A2)
000036F0  008C      
                    6375   ; ShapesArray[5].array[0][1] = 	1;
000036F2  157C 0001 6376          move.b    #1,140+1(A2)
000036F6  008D      
                    6377   ; ShapesArray[5].array[1][0] = 	1;
000036F8  157C 0001 6378          move.b    #1,140+4(A2)
000036FC  0090      
                    6379   ; ShapesArray[5].array[1][1] = 	1;
000036FE  157C 0001 6380          move.b    #1,140+4+1(A2)
00003702  0091      
                    6381   ; ShapesArray[5].width       = 	2;
00003704  257C 0000 6382          move.l    #2,156(A2)
00003708  0002 009C 
                    6383   ; //long bar shape
                    6384   ; ShapesArray[6].array[0][0] = 	0;
0000370C  422A 00A8 6385          clr.b     168(A2)
                    6386   ; ShapesArray[6].array[0][1] = 	0;
00003710  422A 00A9 6387          clr.b     168+1(A2)
                    6388   ; ShapesArray[6].array[0][2] = 	0;
00003714  422A 00AA 6389          clr.b     168+2(A2)
                    6390   ; ShapesArray[6].array[0][3] = 	0;
00003718  422A 00AB 6391          clr.b     168+3(A2)
                    6392   ; ShapesArray[6].array[1][0] = 	1;
0000371C  157C 0001 6393          move.b    #1,168+4(A2)
00003720  00AC      
                    6394   ; ShapesArray[6].array[1][1] = 	1;
00003722  157C 0001 6395          move.b    #1,168+4+1(A2)
00003726  00AD      
                    6396   ; ShapesArray[6].array[1][2] = 	1;
00003728  157C 0001 6397          move.b    #1,168+4+2(A2)
0000372C  00AE      
                    6398   ; ShapesArray[6].array[1][3] = 	1;
0000372E  157C 0001 6399          move.b    #1,168+4+3(A2)
00003732  00AF      
                    6400   ; ShapesArray[6].array[2][0] = 	0;
00003734  422A 00B0 6401          clr.b     168+8(A2)
                    6402   ; ShapesArray[6].array[2][1] = 	0;
00003738  422A 00B1 6403          clr.b     168+8+1(A2)
                    6404   ; ShapesArray[6].array[2][2] = 	0;
0000373C  422A 00B2 6405          clr.b     168+8+2(A2)
                    6406   ; ShapesArray[6].array[2][3] = 	0;
00003740  422A 00B3 6407          clr.b     168+8+3(A2)
                    6408   ; ShapesArray[6].array[3][0] = 	0;
00003744  422A 00B4 6409          clr.b     168+12(A2)
                    6410   ; ShapesArray[6].array[3][1] = 	0;
00003748  422A 00B5 6411          clr.b     168+12+1(A2)
                    6412   ; ShapesArray[6].array[3][2] = 	0;
0000374C  422A 00B6 6413          clr.b     168+12+2(A2)
                    6414   ; ShapesArray[6].array[3][3] = 	0;
00003750  422A 00B7 6415          clr.b     168+12+3(A2)
                    6416   ; ShapesArray[6].width       = 	4;
00003754  257C 0000 6417          move.l    #4,184(A2)
00003758  0004 00B8 
                    6418   ; return 0;
0000375C  4280      6419          clr.l     D0
0000375E  4CDF 0C0C 6420          movem.l   (A7)+,D2/D3/A2/A3
00003762  4E5E      6421          unlk      A6
00003764  4E75      6422          rts
                    6423   ; }
                    6424   _strcpy:
00003766  206F 0004 6425          move.l    (4,A7),A0
0000376A  226F 0008 6426          move.l    (8,A7),A1
0000376E  2008      6427          move.l    A0,D0
                    6428   strcpy_1:
00003770  10D9      6429          move.b    (A1)+,(A0)+
00003772  66FC      6430          bne       strcpy_1
00003774  4E75      6431          rts
                    6432   ULDIV:
00003776  4E56 0000 6433          link    A6,#0
0000377A  48E7 C000 6434          movem.l D0/D1,-(A7)
0000377E  222E 0008 6435          move.l  8(A6),D1
00003782  202E 000C 6436          move.l  12(A6),D0
00003786  6036      6437          bra.s   ldiv_3
                    6438   LDIV:
00003788  4E56 0000 6439          link    A6,#0
0000378C  48E7 C000 6440          movem.l D0/D1,-(A7)
00003790  222E 0008 6441          move.l  8(A6),D1
00003794  202E 000C 6442          move.l  12(A6),D0
00003798  4A80      6443          tst.l   D0
0000379A  6A0E      6444          bpl.s   ldiv_1
0000379C  4480      6445          neg.l   D0
0000379E  4A81      6446          tst.l   D1
000037A0  6A14      6447          bpl.s   ldiv_2
000037A2  4481      6448          neg.l   D1
000037A4  612A      6449          bsr.s   dodiv
000037A6  4481      6450          neg.l   D1
000037A8  6016      6451          bra.s   ldiv_4
                    6452   ldiv_1:
000037AA  4A81      6453          tst.l   D1
000037AC  6A10      6454          bpl.s   ldiv_3
000037AE  4481      6455          neg.l   D1
000037B0  611E      6456          bsr.s   dodiv
000037B2  4480      6457          neg.l   D0
000037B4  600A      6458          bra.s   ldiv_4
                    6459   ldiv_2:
000037B6  6118      6460          bsr.s   dodiv
000037B8  4480      6461          neg.l   D0
000037BA  4481      6462          neg.l   D1
000037BC  6002      6463          bra.s   ldiv_4
                    6464   ldiv_3:
000037BE  6110      6465          bsr.s   dodiv
                    6466   ldiv_4:
000037C0  2D40 0008 6467          move.l  D0,8(A6)
000037C4  2D41 000C 6468          move.l  D1,12(A6)
000037C8  4CDF 0003 6469          movem.l (A7)+,D0/D1
000037CC  4E5E      6470          unlk    A6
000037CE  4E75      6471          rts
                    6472   dodiv:
000037D0  0C81 0000 6473          cmpi.l  #$FFFF,D1
000037D4  FFFF      
000037D6  6236      6474          bhi.s   dodiv_2
000037D8  0C80 0000 6475          cmpi.l  #$FFFF,D0
000037DC  FFFF      
000037DE  6210      6476          bhi.s   dodiv_1
000037E0  80C1      6477          divu    D1,D0
000037E2  2200      6478          move.l  D0,D1
000037E4  4241      6479          clr.w   D1
000037E6  4841      6480          swap    D1
000037E8  0280 0000 6481          andi.l  #$FFFF,D0
000037EC  FFFF      
000037EE  4E75      6482          rts
                    6483   dodiv_1:
000037F0  48A7 A000 6484          movem.w D0/D2,-(A7)
000037F4  4240      6485          clr.w   D0
000037F6  4840      6486          swap    D0
000037F8  80C1      6487          divu    D1,D0
000037FA  3400      6488          move.w  D0,D2
000037FC  301F      6489          move.w  (A7)+,D0
000037FE  80C1      6490          divu    D1,D0
00003800  4840      6491          swap    D0
00003802  4281      6492          clr.l   D1
00003804  3200      6493          move.w  D0,D1
00003806  3002      6494          move.w  D2,D0
00003808  4840      6495          swap    D0
0000380A  341F      6496          move.w  (A7)+,D2
0000380C  4E75      6497          rts
                    6498   dodiv_2:
0000380E  48E7 3800 6499          movem.l D2/D3/D4,-(A7)
00003812  2401      6500          move.l  D1,D2
00003814  4242      6501          clr.w   D2
00003816  4842      6502          swap    D2
00003818  5282      6503          addq.l  #1,D2
0000381A  2600      6504          move.l  D0,D3
0000381C  2801      6505          move.l  D1,D4
0000381E  2202      6506          move.l  D2,D1
00003820  61CE      6507          bsr.s   dodiv_1
00003822  2204      6508          move.l  D4,D1
00003824  82C2      6509          divu    D2,D1
00003826  80C1      6510          divu    D1,D0
00003828  0280 0000 6511          andi.l  #$FFFF,D0
0000382C  FFFF      
                    6512   dodiv_3:
0000382E  2204      6513          move.l  D4,D1
00003830  2404      6514          move.l  D4,D2
00003832  4842      6515          swap    D2
00003834  C2C0      6516          mulu    D0,D1
00003836  C4C0      6517          mulu    D0,D2
00003838  4842      6518          swap    D2
0000383A  D282      6519          add.l   D2,D1
0000383C  9283      6520          sub.l   D3,D1
0000383E  620A      6521          bhi.s   dodiv_4
00003840  4481      6522          neg.l   D1
00003842  B881      6523          cmp.l   D1,D4
00003844  6208      6524          bhi.s   dodiv_5
00003846  5280      6525          addq.l  #1,D0
00003848  60E4      6526          bra.s   dodiv_3
                    6527   dodiv_4:
0000384A  5380      6528          subq.l  #1,D0
0000384C  60E0      6529          bra.s   dodiv_3
                    6530   dodiv_5:
0000384E  4CDF 001C 6531          movem.l (A7)+,D2/D3/D4
00003852  4E75      6532          rts
                    6533   _putch:
00003854  4E56 0000 6534          link      A6,#0
00003858  48E7 2000 6535          movem.l   D2,-(A7)
0000385C  242E 0008 6536          move.l    8(A6),D2
00003860  0C82 0000 6537          cmp.l     #10,D2
00003864  000A      
00003866  660A      6538          bne.s     putch_1
00003868  4878 000D 6539          pea       13
0000386C  6100 D102 6540          bsr       __putch
00003870  584F      6541          addq.w    #4,A7
                    6542   putch_1:
00003872  2F02      6543          move.l    D2,-(A7)
00003874  6100 D0FA 6544          bsr       __putch
00003878  584F      6545          addq.w    #4,A7
0000387A  2002      6546          move.l    D2,D0
0000387C  4CDF 0004 6547          movem.l   (A7)+,D2
00003880  4E5E      6548          unlk      A6
00003882  4E75      6549          rts
                    6550   _tolower:
00003884  4E56 0000 6551          link      A6,#0
00003888  48E7 2000 6552          movem.l   D2,-(A7)
0000388C  242E 0008 6553          move.l    8(A6),D2
00003890  0C82 0000 6554          cmp.l     #65,D2
00003894  0041      
00003896  6D0E      6555          blt.s     tolower_1
00003898  0C82 0000 6556          cmp.l     #90,D2
0000389C  005A      
0000389E  6E06      6557          bgt.s     tolower_1
000038A0  84BC 0000 6558          or.l      #32,D2
000038A4  0020      
                    6559   tolower_1:
000038A6  2002      6560          move.l    D2,D0
000038A8  4CDF 0004 6561          movem.l   (A7)+,D2
000038AC  4E5E      6562          unlk      A6
000038AE  4E75      6563          rts
                    6564   _sprintf:
000038B0  4E56 FFFC 6565          link      A6,#-4
000038B4  48E7 2000 6566          movem.l   D2,-(A7)
000038B8  41EE 000C 6567          lea       12(A6),A0
000038BC  5848      6568          addq.w    #4,A0
000038BE  2408      6569          move.l    A0,D2
000038C0  2F02      6570          move.l    D2,-(A7)
000038C2  2F2E 000C 6571          move.l    12(A6),-(A7)
000038C6  2F2E 0008 6572          move.l    8(A6),-(A7)
000038CA  6100 021A 6573          bsr       _vsprintf
000038CE  DEFC 000C 6574          add.w     #12,A7
000038D2  2D40 FFFC 6575          move.l    D0,-4(A6)
000038D6  4282      6576          clr.l     D2
000038D8  202E FFFC 6577          move.l    -4(A6),D0
000038DC  4CDF 0004 6578          movem.l   (A7)+,D2
000038E0  4E5E      6579          unlk      A6
000038E2  4E75      6580          rts
                    6581   _strcat:
000038E4  206F 0004 6582          move.l    (4,A7),A0	
000038E8  226F 0008 6583          move.l    (8,A7),A1	
000038EC  2008      6584          move.l    A0,D0		
                    6585   strcat_0:
000038EE  4A18      6586          tst.b     (A0)+
000038F0  66FC      6587          bne       strcat_0
000038F2  5348      6588          subq      #1,A0
                    6589   strcat_1:
000038F4  10D9      6590          move.b    (A1)+,(A0)+
000038F6  66FC      6591          bne       strcat_1
000038F8  4E75      6592          rts
                    6593   _toupper:
000038FA  4E56 0000 6594          link      A6,#0
000038FE  48E7 2000 6595          movem.l   D2,-(A7)
00003902  242E 0008 6596          move.l    8(A6),D2
00003906  0C82 0000 6597          cmp.l     #97,D2
0000390A  0061      
0000390C  6D0E      6598          blt.s     toupper_1
0000390E  0C82 0000 6599          cmp.l     #122,D2
00003912  007A      
00003914  6E06      6600          bgt.s     toupper_1
00003916  C4BC 0000 6601          and.l     #95,D2
0000391A  005F      
                    6602   toupper_1:
0000391C  2002      6603          move.l    D2,D0
0000391E  4CDF 0004 6604          movem.l   (A7)+,D2
00003922  4E5E      6605          unlk      A6
00003924  4E75      6606          rts
                    6607   _printf:
00003926  4E56 FFFC 6608          link      A6,#-4
0000392A  48E7 2000 6609          movem.l   D2,-(A7)
0000392E  41EE 0008 6610          lea       8(A6),A0
00003932  5848      6611          addq.w    #4,A0
00003934  2408      6612          move.l    A0,D2
00003936  2F02      6613          move.l    D2,-(A7)
00003938  2F2E 0008 6614          move.l    8(A6),-(A7)
0000393C  42A7      6615          clr.l     -(A7)
0000393E  6100 01A6 6616          bsr       _vsprintf
00003942  DEFC 000C 6617          add.w     #12,A7
00003946  2D40 FFFC 6618          move.l    D0,-4(A6)
0000394A  4282      6619          clr.l     D2
0000394C  202E FFFC 6620          move.l    -4(A6),D0
00003950  4CDF 0004 6621          movem.l   (A7)+,D2
00003954  4E5E      6622          unlk      A6
00003956  4E75      6623          rts
                    6624   ULMUL:
00003958  4E56 0000 6625          link    A6,#0
0000395C  48E7 C000 6626          movem.l D0/D1,-(A7)
00003960  222E 0008 6627          move.l  8(A6),D1
00003964  202E 000C 6628          move.l  12(A6),D0
00003968  602C      6629          bra.s   lmul_3
                    6630   LMUL:
0000396A  4E56 0000 6631          link    A6,#0
0000396E  48E7 C000 6632          movem.l D0/D1,-(A7)
00003972  222E 0008 6633          move.l  8(A6),D1
00003976  202E 000C 6634          move.l  12(A6),D0
0000397A  4A80      6635          tst.l   D0
0000397C  6A0A      6636          bpl.s   lmul_1
0000397E  4480      6637          neg.l   D0
00003980  4A81      6638          tst.l   D1
00003982  6A0A      6639          bpl.s   lmul_2
00003984  4481      6640          neg.l   D1
00003986  600E      6641          bra.s   lmul_3
                    6642   lmul_1:
00003988  4A81      6643          tst.l   D1
0000398A  6A0A      6644          bpl.s   lmul_3
0000398C  4481      6645          neg.l   D1
                    6646   lmul_2:
0000398E  6114      6647          bsr.s   domul
00003990  4481      6648          neg.l   D1
00003992  4080      6649          negx.l  D0
00003994  6002      6650          bra.s   lmul_4
                    6651   lmul_3:
00003996  610C      6652          bsr.s   domul
                    6653   lmul_4:
00003998  2D41 0008 6654          move.l  D1,8(A6)
0000399C  4CDF 0003 6655          movem.l (A7)+,D0/D1
000039A0  4E5E      6656          unlk    A6
000039A2  4E75      6657          rts
                    6658   domul:
000039A4  0C81 0000 6659          cmpi.l  #$FFFF,D1
000039A8  FFFF      
000039AA  620C      6660          bhi.s   domul_1
000039AC  0C80 0000 6661          cmpi.l  #$FFFF,D0
000039B0  FFFF      
000039B2  620E      6662          bhi.s   domul_2
000039B4  C2C0      6663          mulu    D0,D1
000039B6  4E75      6664          rts
                    6665   domul_1:
000039B8  0C80 0000 6666          cmpi.l  #$FFFF,D0
000039BC  FFFF      
000039BE  6218      6667          bhi.s   domul_4
000039C0  6002      6668          bra.s   domul_3
                    6669   domul_2
000039C2  C141      6670          exg     D0,D1
                    6671   domul_3:
000039C4  2F02      6672          move.l  D2,-(A7)
000039C6  2401      6673          move.l  D1,D2
000039C8  4842      6674          swap    D2
000039CA  C2C0      6675          mulu    D0,D1
000039CC  C4C0      6676          mulu    D0,D2
000039CE  4842      6677          swap    D2
000039D0  4242      6678          clr.w   D2
000039D2  D282      6679          add.l   D2,D1
000039D4  241F      6680          move.l  (A7)+,D2
000039D6  4E75      6681          rts
                    6682   domul_4:
000039D8  48E7 3000 6683          movem.l D2/D3,-(A7)
000039DC  2401      6684          move.l  D1,D2
000039DE  2601      6685          move.l  D1,D3
000039E0  C2C0      6686          mulu    D0,D1
000039E2  4842      6687          swap    D2
000039E4  C4C0      6688          mulu    D0,D2
000039E6  4840      6689          swap    D0
000039E8  C6C0      6690          mulu    D0,D3
000039EA  D483      6691          add.l   D3,D2
000039EC  4842      6692          swap    D2
000039EE  4242      6693          clr.w   D2
000039F0  D282      6694          add.l   D2,D1
000039F2  4CDF 000C 6695          movem.l (A7)+,D2/D3
000039F6  4E75      6696          rts
                    6697   _getch:
000039F8  48E7 2000 6698          movem.l   D2,-(A7)
000039FC  2439 0803 6699          move.l    __ungetbuf,D2
00003A00  00C0      
00003A02  2039 0803 6700          move.l    __ungetbuf,D0
00003A06  00C0      
00003A08  0C80 FFFF 6701          cmp.l     #-1,D0
00003A0C  FFFF      
00003A0E  670C      6702          beq.s     getch_1
00003A10  23FC FFFF 6703          move.l    #-1,__ungetbuf
00003A14  FFFF 0803 
00003A18  00C0      
00003A1A  6010      6704          bra.s     getch_3
                    6705   getch_1:
00003A1C  6100 CF7E 6706          bsr       __getch
00003A20  2400      6707          move.l    D0,D2
00003A22  0C80 0000 6708          cmp.l     #13,D0
00003A26  000D      
00003A28  6602      6709          bne.s     getch_3
00003A2A  740A      6710          moveq     #10,D2
                    6711   getch_3:
00003A2C  2002      6712          move.l    D2,D0
00003A2E  4CDF 0004 6713          movem.l   (A7)+,D2
00003A32  4E75      6714          rts
                    6715   @vsprintf_copy:
00003A34  4E56 0000 6716          link      A6,#0
00003A38  206E 0008 6717          move.l    8(A6),A0
00003A3C  4A90      6718          tst.l     (A0)
00003A3E  6710      6719          beq.s     @vsprintf_copy_1
00003A40  202E 000C 6720          move.l    12(A6),D0
00003A44  206E 0008 6721          move.l    8(A6),A0
00003A48  2250      6722          move.l    (A0),A1
00003A4A  5290      6723          addq.l    #1,(A0)
00003A4C  1280      6724          move.b    D0,(A1)
00003A4E  600A      6725          bra.s     @vsprintf_copy_2
                    6726   @vsprintf_copy_1:
00003A50  2F2E 000C 6727          move.l    12(A6),-(A7)
00003A54  6100 FDFE 6728          bsr       _putch
00003A58  584F      6729          addq.w    #4,A7
                    6730   @vsprintf_copy_2:
00003A5A  4E5E      6731          unlk      A6
00003A5C  4E75      6732          rts
                    6733   @vsprintf_getval:
00003A5E  4E56 0000 6734          link      A6,#0
00003A62  48E7 3000 6735          movem.l   D2/D3,-(A7)
00003A66  242E 0008 6736          move.l    8(A6),D2
00003A6A  4283      6737          clr.l     D3
00003A6C  2042      6738          move.l    D2,A0
00003A6E  2050      6739          move.l    (A0),A0
00003A70  1010      6740          move.b    (A0),D0
00003A72  4880      6741          ext.w     D0
00003A74  48C0      6742          ext.l     D0
00003A76  0C80 0000 6743          cmp.l     #42,D0
00003A7A  002A      
00003A7C  6612      6744          bne.s     @vsprintf_getval_1
00003A7E  206E 000C 6745          move.l    12(A6),A0
00003A82  2250      6746          move.l    (A0),A1
00003A84  5890      6747          addq.l    #4,(A0)
00003A86  2611      6748          move.l    (A1),D3
00003A88  2042      6749          move.l    D2,A0
00003A8A  5290      6750          addq.l    #1,(A0)
00003A8C  6000 004E 6751          bra       @vsprintf_getval_5
                    6752   @vsprintf_getval_1:
00003A90  2042      6753          move.l    D2,A0
00003A92  2050      6754          move.l    (A0),A0
00003A94  1010      6755          move.b    (A0),D0
00003A96  4880      6756          ext.w     D0
00003A98  48C0      6757          ext.l     D0
00003A9A  0C80 0000 6758          cmp.l     #48,D0
00003A9E  0030      
00003AA0  6D00 003A 6759          blt       @vsprintf_getval_5
00003AA4  2042      6760          move.l    D2,A0
00003AA6  2050      6761          move.l    (A0),A0
00003AA8  1010      6762          move.b    (A0),D0
00003AAA  4880      6763          ext.w     D0
00003AAC  48C0      6764          ext.l     D0
00003AAE  0C80 0000 6765          cmp.l     #57,D0
00003AB2  0039      
00003AB4  6E26      6766          bgt.s     @vsprintf_getval_5
00003AB6  2F03      6767          move.l    D3,-(A7)
00003AB8  4878 000A 6768          pea       10
00003ABC  6100 FEAC 6769          bsr       LMUL
00003AC0  2017      6770          move.l    (A7),D0
00003AC2  504F      6771          addq.w    #8,A7
00003AC4  2042      6772          move.l    D2,A0
00003AC6  2250      6773          move.l    (A0),A1
00003AC8  5290      6774          addq.l    #1,(A0)
00003ACA  1211      6775          move.b    (A1),D1
00003ACC  4881      6776          ext.w     D1
00003ACE  48C1      6777          ext.l     D1
00003AD0  D081      6778          add.l     D1,D0
00003AD2  0480 0000 6779          sub.l     #48,D0
00003AD6  0030      
00003AD8  2600      6780          move.l    D0,D3
00003ADA  60B4      6781          bra       @vsprintf_getval_1
                    6782   @vsprintf_getval_5:
00003ADC  2003      6783          move.l    D3,D0
00003ADE  4CDF 000C 6784          movem.l   (A7)+,D2/D3
00003AE2  4E5E      6785          unlk      A6
00003AE4  4E75      6786          rts
                    6787   _vsprintf:
00003AE6  4E56 FFCC 6788          link      A6,#-52
00003AEA  48E7 3F3C 6789          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00003AEE  45EE 0008 6790          lea       8(A6),A2
00003AF2  47F8 3A34 6791          lea       @vsprintf_copy,A3
00003AF6  49F9 0000 6792          lea       _ultoa,A4
00003AFA  423E      
00003AFC  4286      6793          clr.l     D6
                    6794   vsprintf_1:
00003AFE  206E 000C 6795          move.l    12(A6),A0
00003B02  4A10      6796          tst.b     (A0)
00003B04  6700 0624 6797          beq       vsprintf_3
00003B08  206E 000C 6798          move.l    12(A6),A0
00003B0C  1010      6799          move.b    (A0),D0
00003B0E  4880      6800          ext.w     D0
00003B10  48C0      6801          ext.l     D0
00003B12  0C80 0000 6802          cmp.l     #37,D0
00003B16  0025      
00003B18  671C      6803          beq.s     vsprintf_4
00003B1A  206E 000C 6804          move.l    12(A6),A0
00003B1E  52AE 000C 6805          addq.l    #1,12(A6)
00003B22  1210      6806          move.b    (A0),D1
00003B24  4881      6807          ext.w     D1
00003B26  48C1      6808          ext.l     D1
00003B28  2F01      6809          move.l    D1,-(A7)
00003B2A  2F0A      6810          move.l    A2,-(A7)
00003B2C  4E93      6811          jsr       (A3)
00003B2E  504F      6812          addq.w    #8,A7
00003B30  5286      6813          addq.l    #1,D6
00003B32  6000 05F2 6814          bra       vsprintf_2
                    6815   vsprintf_4:
00003B36  52AE 000C 6816          addq.l    #1,12(A6)
00003B3A  422E FFD3 6817          clr.b     -45(A6)
00003B3E  422E FFD2 6818          clr.b     -46(A6)
00003B42  422E FFD0 6819          clr.b     -48(A6)
00003B46  422E FFCF 6820          clr.b     -49(A6)
00003B4A  422E FFCE 6821          clr.b     -50(A6)
00003B4E  422E FFCD 6822          clr.b     -51(A6)
00003B52  42AE FFFC 6823          clr.l     -4(A6)
00003B56  7AFF      6824          moveq     #-1,D5
00003B58  41EE FFDC 6825          lea       -36(A6),A0
00003B5C  2608      6826          move.l    A0,D3
00003B5E  2408      6827          move.l    A0,D2
                    6828   vsprintf_6:
00003B60  206E 000C 6829          move.l    12(A6),A0
00003B64  1010      6830          move.b    (A0),D0
00003B66  4880      6831          ext.w     D0
00003B68  48C0      6832          ext.l     D0
00003B6A  0C80 0000 6833          cmp.l     #43,D0
00003B6E  002B      
00003B70  6730      6834          beq.s     vsprintf_12
00003B72  6E18      6835          bgt.s     vsprintf_15
00003B74  0C80 0000 6836          cmp.l     #35,D0
00003B78  0023      
00003B7A  6700 003E 6837          beq       vsprintf_14
00003B7E  6E00 0046 6838          bgt       vsprintf_9
00003B82  0C80 0000 6839          cmp.l     #32,D0
00003B86  0020      
00003B88  6724      6840          beq.s     vsprintf_13
00003B8A  603A      6841          bra.s     vsprintf_9
                    6842   vsprintf_15:
00003B8C  0C80 0000 6843          cmp.l     #45,D0
00003B90  002D      
00003B92  6702      6844          beq.s     vsprintf_11
00003B94  6030      6845          bra.s     vsprintf_9
                    6846   vsprintf_11:
00003B96  1D7C 0001 6847          move.b    #1,-51(A6)
00003B9A  FFCD      
00003B9C  52AE 000C 6848          addq.l    #1,12(A6)
00003BA0  6026      6849          bra.s     vsprintf_7
                    6850   vsprintf_12:
00003BA2  1D7C 0001 6851          move.b    #1,-50(A6)
00003BA6  FFCE      
00003BA8  52AE 000C 6852          addq.l    #1,12(A6)
00003BAC  601A      6853          bra.s     vsprintf_7
                    6854   vsprintf_13:
00003BAE  1D7C 0001 6855          move.b    #1,-49(A6)
00003BB2  FFCF      
00003BB4  52AE 000C 6856          addq.l    #1,12(A6)
00003BB8  600E      6857          bra.s     vsprintf_7
                    6858   vsprintf_14:
00003BBA  1D7C 0001 6859          move.b    #1,-48(A6)
00003BBE  FFD0      
00003BC0  52AE 000C 6860          addq.l    #1,12(A6)
00003BC4  6002      6861          bra.s     vsprintf_7
                    6862   vsprintf_9:
00003BC6  6002      6863          bra.s     vsprintf_8
                    6864   vsprintf_7:
00003BC8  6096      6865          bra       vsprintf_6
                    6866   vsprintf_8:
00003BCA  206E 000C 6867          move.l    12(A6),A0
00003BCE  1010      6868          move.b    (A0),D0
00003BD0  4880      6869          ext.w     D0
00003BD2  48C0      6870          ext.l     D0
00003BD4  0C80 0000 6871          cmp.l     #48,D0
00003BD8  0030      
00003BDA  660A      6872          bne.s     vsprintf_16
00003BDC  52AE 000C 6873          addq.l    #1,12(A6)
00003BE0  1D7C 0001 6874          move.b    #1,-46(A6)
00003BE4  FFD2      
                    6875   vsprintf_16:
00003BE6  486E 0010 6876          pea       16(A6)
00003BEA  486E 000C 6877          pea       12(A6)
00003BEE  6100 FE6E 6878          bsr       @vsprintf_getval
00003BF2  504F      6879          addq.w    #8,A7
00003BF4  2A40      6880          move.l    D0,A5
00003BF6  206E 000C 6881          move.l    12(A6),A0
00003BFA  1010      6882          move.b    (A0),D0
00003BFC  4880      6883          ext.w     D0
00003BFE  48C0      6884          ext.l     D0
00003C00  0C80 0000 6885          cmp.l     #46,D0
00003C04  002E      
00003C06  6614      6886          bne.s     vsprintf_18
00003C08  52AE 000C 6887          addq.l    #1,12(A6)
00003C0C  486E 0010 6888          pea       16(A6)
00003C10  486E 000C 6889          pea       12(A6)
00003C14  6100 FE48 6890          bsr       @vsprintf_getval
00003C18  504F      6891          addq.w    #8,A7
00003C1A  2A00      6892          move.l    D0,D5
                    6893   vsprintf_18:
00003C1C  206E 000C 6894          move.l    12(A6),A0
00003C20  1010      6895          move.b    (A0),D0
00003C22  4880      6896          ext.w     D0
00003C24  48C0      6897          ext.l     D0
00003C26  0C80 0000 6898          cmp.l     #108,D0
00003C2A  006C      
00003C2C  660A      6899          bne.s     vsprintf_20
00003C2E  52AE 000C 6900          addq.l    #1,12(A6)
00003C32  1D7C 0001 6901          move.b    #1,-45(A6)
00003C36  FFD3      
                    6902   vsprintf_20:
00003C38  206E 000C 6903          move.l    12(A6),A0
00003C3C  1010      6904          move.b    (A0),D0
00003C3E  4880      6905          ext.w     D0
00003C40  48C0      6906          ext.l     D0
00003C42  0C80 0000 6907          cmp.l     #111,D0
00003C46  006F      
00003C48  6700 00D4 6908          beq       vsprintf_27
00003C4C  6E34      6909          bgt.s     vsprintf_33
00003C4E  0C80 0000 6910          cmp.l     #100,D0
00003C52  0064      
00003C54  6700 0054 6911          beq       vsprintf_24
00003C58  6E1C      6912          bgt.s     vsprintf_34
00003C5A  0C80 0000 6913          cmp.l     #99,D0
00003C5E  0063      
00003C60  6700 012C 6914          beq       vsprintf_30
00003C64  6E00 016A 6915          bgt       vsprintf_22
00003C68  0C80 0000 6916          cmp.l     #88,D0
00003C6C  0058      
00003C6E  6700 00E6 6917          beq       vsprintf_28
00003C72  6000 015C 6918          bra       vsprintf_22
                    6919   vsprintf_34:
00003C76  0C80 0000 6920          cmp.l     #105,D0
00003C7A  0069      
00003C7C  672C      6921          beq.s     vsprintf_24
00003C7E  6000 0150 6922          bra       vsprintf_22
                    6923   vsprintf_33:
00003C82  0C80 0000 6924          cmp.l     #117,D0
00003C86  0075      
00003C88  6700 005C 6925          beq       vsprintf_26
00003C8C  6E0E      6926          bgt.s     vsprintf_35
00003C8E  0C80 0000 6927          cmp.l     #115,D0
00003C92  0073      
00003C94  6700 011C 6928          beq       vsprintf_31
00003C98  6000 0136 6929          bra       vsprintf_22
                    6930   vsprintf_35:
00003C9C  0C80 0000 6931          cmp.l     #120,D0
00003CA0  0078      
00003CA2  6700 00B2 6932          beq       vsprintf_28
00003CA6  6000 0128 6933          bra       vsprintf_22
                    6934   vsprintf_24:
00003CAA  4A2E FFD3 6935          tst.b     -45(A6)
00003CAE  671A      6936          beq.s     vsprintf_36
00003CB0  4878 000A 6937          pea       10
00003CB4  2F03      6938          move.l    D3,-(A7)
00003CB6  206E 0010 6939          move.l    16(A6),A0
00003CBA  58AE 0010 6940          addq.l    #4,16(A6)
00003CBE  2F10      6941          move.l    (A0),-(A7)
00003CC0  6100 04F8 6942          bsr       _ltoa
00003CC4  DEFC 000C 6943          add.w     #12,A7
00003CC8  6018      6944          bra.s     vsprintf_37
                    6945   vsprintf_36:
00003CCA  4878 000A 6946          pea       10
00003CCE  2F03      6947          move.l    D3,-(A7)
00003CD0  206E 0010 6948          move.l    16(A6),A0
00003CD4  58AE 0010 6949          addq.l    #4,16(A6)
00003CD8  2F10      6950          move.l    (A0),-(A7)
00003CDA  6100 04DE 6951          bsr       _ltoa
00003CDE  DEFC 000C 6952          add.w     #12,A7
                    6953   vsprintf_37:
00003CE2  6000 00FA 6954          bra       vsprintf_23
                    6955   vsprintf_26:
00003CE6  4A2E FFD3 6956          tst.b     -45(A6)
00003CEA  6718      6957          beq.s     vsprintf_38
00003CEC  4878 000A 6958          pea       10
00003CF0  2F03      6959          move.l    D3,-(A7)
00003CF2  206E 0010 6960          move.l    16(A6),A0
00003CF6  58AE 0010 6961          addq.l    #4,16(A6)
00003CFA  2F10      6962          move.l    (A0),-(A7)
00003CFC  4E94      6963          jsr       (A4)
00003CFE  DEFC 000C 6964          add.w     #12,A7
00003D02  6016      6965          bra.s     vsprintf_39
                    6966   vsprintf_38:
00003D04  4878 000A 6967          pea       10
00003D08  2F03      6968          move.l    D3,-(A7)
00003D0A  206E 0010 6969          move.l    16(A6),A0
00003D0E  58AE 0010 6970          addq.l    #4,16(A6)
00003D12  2F10      6971          move.l    (A0),-(A7)
00003D14  4E94      6972          jsr       (A4)
00003D16  DEFC 000C 6973          add.w     #12,A7
                    6974   vsprintf_39:
00003D1A  6000 00C2 6975          bra       vsprintf_23
                    6976   vsprintf_27:
00003D1E  4A2E FFD3 6977          tst.b     -45(A6)
00003D22  6718      6978          beq.s     vsprintf_40
00003D24  4878 0008 6979          pea       8
00003D28  2F03      6980          move.l    D3,-(A7)
00003D2A  206E 0010 6981          move.l    16(A6),A0
00003D2E  58AE 0010 6982          addq.l    #4,16(A6)
00003D32  2F10      6983          move.l    (A0),-(A7)
00003D34  4E94      6984          jsr       (A4)
00003D36  DEFC 000C 6985          add.w     #12,A7
00003D3A  6016      6986          bra.s     vsprintf_41
                    6987   vsprintf_40:
00003D3C  4878 0008 6988          pea       8
00003D40  2F03      6989          move.l    D3,-(A7)
00003D42  206E 0010 6990          move.l    16(A6),A0
00003D46  58AE 0010 6991          addq.l    #4,16(A6)
00003D4A  2F10      6992          move.l    (A0),-(A7)
00003D4C  4E94      6993          jsr       (A4)
00003D4E  DEFC 000C 6994          add.w     #12,A7
                    6995   vsprintf_41:
00003D52  6000 008A 6996          bra       vsprintf_23
                    6997   vsprintf_28:
00003D56  4A2E FFD3 6998          tst.b     -45(A6)
00003D5A  6718      6999          beq.s     vsprintf_42
00003D5C  4878 0010 7000          pea       16
00003D60  2F03      7001          move.l    D3,-(A7)
00003D62  206E 0010 7002          move.l    16(A6),A0
00003D66  58AE 0010 7003          addq.l    #4,16(A6)
00003D6A  2F10      7004          move.l    (A0),-(A7)
00003D6C  4E94      7005          jsr       (A4)
00003D6E  DEFC 000C 7006          add.w     #12,A7
00003D72  6016      7007          bra.s     vsprintf_43
                    7008   vsprintf_42:
00003D74  4878 0010 7009          pea       16
00003D78  2F03      7010          move.l    D3,-(A7)
00003D7A  206E 0010 7011          move.l    16(A6),A0
00003D7E  58AE 0010 7012          addq.l    #4,16(A6)
00003D82  2F10      7013          move.l    (A0),-(A7)
00003D84  4E94      7014          jsr       (A4)
00003D86  DEFC 000C 7015          add.w     #12,A7
                    7016   vsprintf_43:
00003D8A  6000 0052 7017          bra       vsprintf_23
                    7018   vsprintf_30:
00003D8E  206E 0010 7019          move.l    16(A6),A0
00003D92  58AE 0010 7020          addq.l    #4,16(A6)
00003D96  2010      7021          move.l    (A0),D0
00003D98  2042      7022          move.l    D2,A0
00003D9A  5282      7023          addq.l    #1,D2
00003D9C  1080      7024          move.b    D0,(A0)
00003D9E  2042      7025          move.l    D2,A0
00003DA0  4210      7026          clr.b     (A0)
00003DA2  200D      7027          move.l    A5,D0
00003DA4  6704      7028          beq.s     vsprintf_44
00003DA6  200D      7029          move.l    A5,D0
00003DA8  6002      7030          bra.s     vsprintf_45
                    7031   vsprintf_44:
00003DAA  7001      7032          moveq     #1,D0
                    7033   vsprintf_45:
00003DAC  2A00      7034          move.l    D0,D5
00003DAE  6000 002E 7035          bra       vsprintf_23
                    7036   vsprintf_31:
00003DB2  206E 0010 7037          move.l    16(A6),A0
00003DB6  58AE 0010 7038          addq.l    #4,16(A6)
00003DBA  2610      7039          move.l    (A0),D3
00003DBC  0C85 FFFF 7040          cmp.l     #-1,D5
00003DC0  FFFF      
00003DC2  660A      7041          bne.s     vsprintf_46
00003DC4  2F03      7042          move.l    D3,-(A7)
00003DC6  6100 04D8 7043          bsr       _strlen
00003DCA  584F      7044          addq.w    #4,A7
00003DCC  2A00      7045          move.l    D0,D5
                    7046   vsprintf_46:
00003DCE  600E      7047          bra.s     vsprintf_23
                    7048   vsprintf_22:
00003DD0  206E 000C 7049          move.l    12(A6),A0
00003DD4  2242      7050          move.l    D2,A1
00003DD6  5282      7051          addq.l    #1,D2
00003DD8  1290      7052          move.b    (A0),(A1)
00003DDA  2042      7053          move.l    D2,A0
00003DDC  4210      7054          clr.b     (A0)
                    7055   vsprintf_23:
00003DDE  2F03      7056          move.l    D3,-(A7)
00003DE0  6100 04BE 7057          bsr       _strlen
00003DE4  584F      7058          addq.w    #4,A7
00003DE6  1800      7059          move.b    D0,D4
00003DE8  206E 000C 7060          move.l    12(A6),A0
00003DEC  1010      7061          move.b    (A0),D0
00003DEE  4880      7062          ext.w     D0
00003DF0  48C0      7063          ext.l     D0
00003DF2  0C80 0000 7064          cmp.l     #115,D0
00003DF6  0073      
00003DF8  6618      7065          bne.s     vsprintf_48
00003DFA  0C85 0000 7066          cmp.l     #0,D5
00003DFE  0000      
00003E00  6D10      7067          blt.s     vsprintf_48
00003E02  4884      7068          ext.w     D4
00003E04  48C4      7069          ext.l     D4
00003E06  B885      7070          cmp.l     D5,D4
00003E08  6F04      7071          ble.s     vsprintf_50
00003E0A  1005      7072          move.b    D5,D0
00003E0C  6002      7073          bra.s     vsprintf_51
                    7074   vsprintf_50:
00003E0E  1004      7075          move.b    D4,D0
                    7076   vsprintf_51:
00003E10  1800      7077          move.b    D0,D4
                    7078   vsprintf_48:
00003E12  206E 000C 7079          move.l    12(A6),A0
00003E16  1010      7080          move.b    (A0),D0
00003E18  4880      7081          ext.w     D0
00003E1A  48C0      7082          ext.l     D0
00003E1C  0C80 0000 7083          cmp.l     #88,D0
00003E20  0058      
00003E22  6600 0026 7084          bne       vsprintf_56
00003E26  41EE FFDC 7085          lea       -36(A6),A0
00003E2A  2408      7086          move.l    A0,D2
                    7087   vsprintf_54:
00003E2C  2042      7088          move.l    D2,A0
00003E2E  4A10      7089          tst.b     (A0)
00003E30  6718      7090          beq.s     vsprintf_56
00003E32  2042      7091          move.l    D2,A0
00003E34  1210      7092          move.b    (A0),D1
00003E36  4881      7093          ext.w     D1
00003E38  48C1      7094          ext.l     D1
00003E3A  2F01      7095          move.l    D1,-(A7)
00003E3C  6100 FABC 7096          bsr       _toupper
00003E40  584F      7097          addq.w    #4,A7
00003E42  2042      7098          move.l    D2,A0
00003E44  1080      7099          move.b    D0,(A0)
00003E46  5282      7100          addq.l    #1,D2
00003E48  60E2      7101          bra       vsprintf_54
                    7102   vsprintf_56:
00003E4A  7E00      7103          moveq     #0,D7
00003E4C  41EE FFD4 7104          lea       -44(A6),A0
00003E50  2408      7105          move.l    A0,D2
00003E52  206E 000C 7106          move.l    12(A6),A0
00003E56  1010      7107          move.b    (A0),D0
00003E58  4880      7108          ext.w     D0
00003E5A  48C0      7109          ext.l     D0
00003E5C  0C80 0000 7110          cmp.l     #100,D0
00003E60  0064      
00003E62  6714      7111          beq.s     vsprintf_59
00003E64  206E 000C 7112          move.l    12(A6),A0
00003E68  1010      7113          move.b    (A0),D0
00003E6A  4880      7114          ext.w     D0
00003E6C  48C0      7115          ext.l     D0
00003E6E  0C80 0000 7116          cmp.l     #105,D0
00003E72  0069      
00003E74  6600 0076 7117          bne       vsprintf_65
                    7118   vsprintf_59:
00003E78  4A2E FFCE 7119          tst.b     -50(A6)
00003E7C  6612      7120          bne.s     vsprintf_62
00003E7E  2043      7121          move.l    D3,A0
00003E80  1010      7122          move.b    (A0),D0
00003E82  4880      7123          ext.w     D0
00003E84  48C0      7124          ext.l     D0
00003E86  0C80 0000 7125          cmp.l     #45,D0
00003E8A  002D      
00003E8C  6600 002E 7126          bne       vsprintf_60
                    7127   vsprintf_62:
00003E90  2043      7128          move.l    D3,A0
00003E92  1010      7129          move.b    (A0),D0
00003E94  4880      7130          ext.w     D0
00003E96  48C0      7131          ext.l     D0
00003E98  0C80 0000 7132          cmp.l     #45,D0
00003E9C  002D      
00003E9E  660E      7133          bne.s     vsprintf_63
00003EA0  2043      7134          move.l    D3,A0
00003EA2  5283      7135          addq.l    #1,D3
00003EA4  2242      7136          move.l    D2,A1
00003EA6  5282      7137          addq.l    #1,D2
00003EA8  1290      7138          move.b    (A0),(A1)
00003EAA  5304      7139          subq.b    #1,D4
00003EAC  6008      7140          bra.s     vsprintf_64
                    7141   vsprintf_63:
00003EAE  2042      7142          move.l    D2,A0
00003EB0  5282      7143          addq.l    #1,D2
00003EB2  10BC 002B 7144          move.b    #43,(A0)
                    7145   vsprintf_64:
00003EB6  5287      7146          addq.l    #1,D7
00003EB8  6000 0032 7147          bra       vsprintf_65
                    7148   vsprintf_60:
00003EBC  4A2E FFCF 7149          tst.b     -49(A6)
00003EC0  6700 002A 7150          beq       vsprintf_65
00003EC4  2043      7151          move.l    D3,A0
00003EC6  1010      7152          move.b    (A0),D0
00003EC8  4880      7153          ext.w     D0
00003ECA  48C0      7154          ext.l     D0
00003ECC  0C80 0000 7155          cmp.l     #45,D0
00003ED0  002D      
00003ED2  660E      7156          bne.s     vsprintf_67
00003ED4  2043      7157          move.l    D3,A0
00003ED6  5283      7158          addq.l    #1,D3
00003ED8  2242      7159          move.l    D2,A1
00003EDA  5282      7160          addq.l    #1,D2
00003EDC  1290      7161          move.b    (A0),(A1)
00003EDE  5304      7162          subq.b    #1,D4
00003EE0  6008      7163          bra.s     vsprintf_68
                    7164   vsprintf_67:
00003EE2  2042      7165          move.l    D2,A0
00003EE4  5282      7166          addq.l    #1,D2
00003EE6  10BC 0020 7167          move.b    #32,(A0)
                    7168   vsprintf_68:
00003EEA  5287      7169          addq.l    #1,D7
                    7170   vsprintf_65:
00003EEC  4A2E FFD0 7171          tst.b     -48(A6)
00003EF0  6700 0066 7172          beq       vsprintf_77
00003EF4  206E 000C 7173          move.l    12(A6),A0
00003EF8  1010      7174          move.b    (A0),D0
00003EFA  4880      7175          ext.w     D0
00003EFC  48C0      7176          ext.l     D0
00003EFE  0C80 0000 7177          cmp.l     #111,D0
00003F02  006F      
00003F04  671A      7178          beq.s     vsprintf_73
00003F06  6E0C      7179          bgt.s     vsprintf_76
00003F08  0C80 0000 7180          cmp.l     #88,D0
00003F0C  0058      
00003F0E  6710      7181          beq.s     vsprintf_73
00003F10  6000 0046 7182          bra       vsprintf_77
                    7183   vsprintf_76:
00003F14  0C80 0000 7184          cmp.l     #120,D0
00003F18  0078      
00003F1A  6704      7185          beq.s     vsprintf_73
00003F1C  6000 003A 7186          bra       vsprintf_77
                    7187   vsprintf_73:
00003F20  2042      7188          move.l    D2,A0
00003F22  5282      7189          addq.l    #1,D2
00003F24  10BC 0030 7190          move.b    #48,(A0)
00003F28  5287      7191          addq.l    #1,D7
00003F2A  206E 000C 7192          move.l    12(A6),A0
00003F2E  1010      7193          move.b    (A0),D0
00003F30  4880      7194          ext.w     D0
00003F32  48C0      7195          ext.l     D0
00003F34  0C80 0000 7196          cmp.l     #120,D0
00003F38  0078      
00003F3A  6712      7197          beq.s     vsprintf_79
00003F3C  206E 000C 7198          move.l    12(A6),A0
00003F40  1010      7199          move.b    (A0),D0
00003F42  4880      7200          ext.w     D0
00003F44  48C0      7201          ext.l     D0
00003F46  0C80 0000 7202          cmp.l     #88,D0
00003F4A  0058      
00003F4C  660A      7203          bne.s     vsprintf_77
                    7204   vsprintf_79:
00003F4E  2042      7205          move.l    D2,A0
00003F50  5282      7206          addq.l    #1,D2
00003F52  10BC 0078 7207          move.b    #120,(A0)
00003F56  5287      7208          addq.l    #1,D7
                    7209   vsprintf_77:
00003F58  2042      7210          move.l    D2,A0
00003F5A  4210      7211          clr.b     (A0)
00003F5C  206E 000C 7212          move.l    12(A6),A0
00003F60  1010      7213          move.b    (A0),D0
00003F62  4880      7214          ext.w     D0
00003F64  48C0      7215          ext.l     D0
00003F66  0C80 0000 7216          cmp.l     #105,D0
00003F6A  0069      
00003F6C  6700 0076 7217          beq       vsprintf_82
00003F70  6E42      7218          bgt.s     vsprintf_93
00003F72  0C80 0000 7219          cmp.l     #99,D0
00003F76  0063      
00003F78  6700 0084 7220          beq       vsprintf_96
00003F7C  6E1C      7221          bgt.s     vsprintf_94
00003F7E  0C80 0000 7222          cmp.l     #88,D0
00003F82  0058      
00003F84  6700 005E 7223          beq       vsprintf_82
00003F88  6E00 0184 7224          bgt       vsprintf_80
00003F8C  0C80 0000 7225          cmp.l     #69,D0
00003F90  0045      
00003F92  6700 0050 7226          beq       vsprintf_82
00003F96  6000 0176 7227          bra       vsprintf_80
                    7228   vsprintf_94:
00003F9A  0C80 0000 7229          cmp.l     #101,D0
00003F9E  0065      
00003FA0  6700 0042 7230          beq       vsprintf_82
00003FA4  6E00 0168 7231          bgt       vsprintf_80
00003FA8  0C80 0000 7232          cmp.l     #100,D0
00003FAC  0064      
00003FAE  6734      7233          beq.s     vsprintf_82
00003FB0  6000 015C 7234          bra       vsprintf_80
                    7235   vsprintf_93:
00003FB4  0C80 0000 7236          cmp.l     #117,D0
00003FB8  0075      
00003FBA  6728      7237          beq.s     vsprintf_82
00003FBC  6E1A      7238          bgt.s     vsprintf_95
00003FBE  0C80 0000 7239          cmp.l     #115,D0
00003FC2  0073      
00003FC4  6700 0038 7240          beq       vsprintf_96
00003FC8  6E00 0144 7241          bgt       vsprintf_80
00003FCC  0C80 0000 7242          cmp.l     #111,D0
00003FD0  006F      
00003FD2  6710      7243          beq.s     vsprintf_82
00003FD4  6000 0138 7244          bra       vsprintf_80
                    7245   vsprintf_95:
00003FD8  0C80 0000 7246          cmp.l     #120,D0
00003FDC  0078      
00003FDE  6704      7247          beq.s     vsprintf_82
00003FE0  6000 012C 7248          bra       vsprintf_80
                    7249   vsprintf_82:
00003FE4  4A2E FFD2 7250          tst.b     -46(A6)
00003FE8  6714      7251          beq.s     vsprintf_96
00003FEA  4A2E FFCD 7252          tst.b     -51(A6)
00003FEE  660E      7253          bne.s     vsprintf_96
00003FF0  200D      7254          move.l    A5,D0
00003FF2  9087      7255          sub.l     D7,D0
00003FF4  4884      7256          ext.w     D4
00003FF6  48C4      7257          ext.l     D4
00003FF8  9084      7258          sub.l     D4,D0
00003FFA  2D40 FFFC 7259          move.l    D0,-4(A6)
                    7260   vsprintf_96:
00003FFE  202E FFFC 7261          move.l    -4(A6),D0
00004002  0C80 0000 7262          cmp.l     #0,D0
00004006  0000      
00004008  6C04      7263          bge.s     vsprintf_98
0000400A  42AE FFFC 7264          clr.l     -4(A6)
                    7265   vsprintf_98:
0000400E  4A2E FFCD 7266          tst.b     -51(A6)
00004012  6600 0030 7267          bne       vsprintf_104
00004016  4884      7268          ext.w     D4
00004018  48C4      7269          ext.l     D4
0000401A  2004      7270          move.l    D4,D0
0000401C  D0AE FFFC 7271          add.l     -4(A6),D0
00004020  D087      7272          add.l     D7,D0
00004022  1D40 FFD1 7273          move.b    D0,-47(A6)
                    7274   vsprintf_102:
00004026  102E FFD1 7275          move.b    -47(A6),D0
0000402A  4880      7276          ext.w     D0
0000402C  48C0      7277          ext.l     D0
0000402E  220D      7278          move.l    A5,D1
00004030  534D      7279          subq.w    #1,A5
00004032  B081      7280          cmp.l     D1,D0
00004034  6C0E      7281          bge.s     vsprintf_104
00004036  4878 0020 7282          pea       32
0000403A  2F0A      7283          move.l    A2,-(A7)
0000403C  4E93      7284          jsr       (A3)
0000403E  504F      7285          addq.w    #8,A7
00004040  5286      7286          addq.l    #1,D6
00004042  60E2      7287          bra       vsprintf_102
                    7288   vsprintf_104:
00004044  41EE FFD4 7289          lea       -44(A6),A0
00004048  2408      7290          move.l    A0,D2
                    7291   vsprintf_105:
0000404A  2042      7292          move.l    D2,A0
0000404C  4A10      7293          tst.b     (A0)
0000404E  6716      7294          beq.s     vsprintf_107
00004050  2042      7295          move.l    D2,A0
00004052  5282      7296          addq.l    #1,D2
00004054  1210      7297          move.b    (A0),D1
00004056  4881      7298          ext.w     D1
00004058  48C1      7299          ext.l     D1
0000405A  2F01      7300          move.l    D1,-(A7)
0000405C  2F0A      7301          move.l    A2,-(A7)
0000405E  4E93      7302          jsr       (A3)
00004060  504F      7303          addq.w    #8,A7
00004062  5286      7304          addq.l    #1,D6
00004064  60E4      7305          bra       vsprintf_105
                    7306   vsprintf_107:
00004066  202E FFFC 7307          move.l    -4(A6),D0
0000406A  1D40 FFD1 7308          move.b    D0,-47(A6)
                    7309   vsprintf_108:
0000406E  102E FFD1 7310          move.b    -47(A6),D0
00004072  532E FFD1 7311          subq.b    #1,-47(A6)
00004076  4A00      7312          tst.b     D0
00004078  670E      7313          beq.s     vsprintf_110
0000407A  4878 0030 7314          pea       48
0000407E  2F0A      7315          move.l    A2,-(A7)
00004080  4E93      7316          jsr       (A3)
00004082  504F      7317          addq.w    #8,A7
00004084  5286      7318          addq.l    #1,D6
00004086  60E6      7319          bra       vsprintf_108
                    7320   vsprintf_110:
00004088  2043      7321          move.l    D3,A0
0000408A  4A10      7322          tst.b     (A0)
0000408C  6700 0048 7323          beq       vsprintf_113
00004090  206E 000C 7324          move.l    12(A6),A0
00004094  1010      7325          move.b    (A0),D0
00004096  4880      7326          ext.w     D0
00004098  48C0      7327          ext.l     D0
0000409A  0C80 0000 7328          cmp.l     #115,D0
0000409E  0073      
000040A0  670C      7329          beq.s     vsprintf_116
000040A2  6E18      7330          bgt.s     vsprintf_119
000040A4  0C80 0000 7331          cmp.l     #99,D0
000040A8  0063      
000040AA  6702      7332          beq.s     vsprintf_116
000040AC  600E      7333          bra.s     vsprintf_119
                    7334   vsprintf_116:
000040AE  2005      7335          move.l    D5,D0
000040B0  5385      7336          subq.l    #1,D5
000040B2  0C80 0000 7337          cmp.l     #0,D0
000040B6  0000      
000040B8  6E02      7338          bgt.s     vsprintf_119
000040BA  6016      7339          bra.s     vsprintf_115
                    7340   vsprintf_119:
000040BC  2043      7341          move.l    D3,A0
000040BE  5283      7342          addq.l    #1,D3
000040C0  1210      7343          move.b    (A0),D1
000040C2  4881      7344          ext.w     D1
000040C4  48C1      7345          ext.l     D1
000040C6  2F01      7346          move.l    D1,-(A7)
000040C8  2F0A      7347          move.l    A2,-(A7)
000040CA  4E93      7348          jsr       (A3)
000040CC  504F      7349          addq.w    #8,A7
000040CE  5286      7350          addq.l    #1,D6
000040D0  6002      7351          bra.s     vsprintf_112
                    7352   vsprintf_115:
000040D2  6002      7353          bra.s     vsprintf_113
                    7354   vsprintf_112:
000040D4  60B2      7355          bra       vsprintf_110
                    7356   vsprintf_113:
000040D6  4A2E FFCD 7357          tst.b     -51(A6)
000040DA  6700 0030 7358          beq       vsprintf_125
000040DE  4884      7359          ext.w     D4
000040E0  48C4      7360          ext.l     D4
000040E2  2004      7361          move.l    D4,D0
000040E4  D0AE FFFC 7362          add.l     -4(A6),D0
000040E8  D087      7363          add.l     D7,D0
000040EA  1D40 FFD1 7364          move.b    D0,-47(A6)
                    7365   vsprintf_123:
000040EE  102E FFD1 7366          move.b    -47(A6),D0
000040F2  4880      7367          ext.w     D0
000040F4  48C0      7368          ext.l     D0
000040F6  220D      7369          move.l    A5,D1
000040F8  534D      7370          subq.w    #1,A5
000040FA  B081      7371          cmp.l     D1,D0
000040FC  6C0E      7372          bge.s     vsprintf_125
000040FE  4878 0020 7373          pea       32
00004102  2F0A      7374          move.l    A2,-(A7)
00004104  4E93      7375          jsr       (A3)
00004106  504F      7376          addq.w    #8,A7
00004108  5386      7377          subq.l    #1,D6
0000410A  60E2      7378          bra       vsprintf_123
                    7379   vsprintf_125:
0000410C  6014      7380          bra.s     vsprintf_81
                    7381   vsprintf_80:
0000410E  206E 000C 7382          move.l    12(A6),A0
00004112  1210      7383          move.b    (A0),D1
00004114  4881      7384          ext.w     D1
00004116  48C1      7385          ext.l     D1
00004118  2F01      7386          move.l    D1,-(A7)
0000411A  2F0A      7387          move.l    A2,-(A7)
0000411C  4E93      7388          jsr       (A3)
0000411E  504F      7389          addq.w    #8,A7
00004120  5286      7390          addq.l    #1,D6
                    7391   vsprintf_81:
00004122  52AE 000C 7392          addq.l    #1,12(A6)
                    7393   vsprintf_2:
00004126  6000 F9D6 7394          bra       vsprintf_1
                    7395   vsprintf_3:
0000412A  4A92      7396          tst.l     (A2)
0000412C  6710      7397          beq.s     vsprintf_126
0000412E  4201      7398          clr.b     D1
00004130  C2BC 0000 7399          and.l     #255,D1
00004134  00FF      
00004136  2F01      7400          move.l    D1,-(A7)
00004138  2F0A      7401          move.l    A2,-(A7)
0000413A  4E93      7402          jsr       (A3)
0000413C  504F      7403          addq.w    #8,A7
                    7404   vsprintf_126:
0000413E  2006      7405          move.l    D6,D0
00004140  4CDF 3CFC 7406          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00004144  4E5E      7407          unlk      A6
00004146  4E75      7408          rts
                    7409   @itoa_convert:
00004148  4E56 0000 7410          link      A6,#0
0000414C  48E7 3C00 7411          movem.l   D2/D3/D4/D5,-(A7)
00004150  242E 0008 7412          move.l    8(A6),D2
00004154  262E 0010 7413          move.l    16(A6),D3
00004158  2A2E 000C 7414          move.l    12(A6),D5
0000415C  2F05      7415          move.l    D5,-(A7)
0000415E  2F03      7416          move.l    D3,-(A7)
00004160  6100 F614 7417          bsr       ULDIV
00004164  202F 0004 7418          move.l    4(A7),D0
00004168  504F      7419          addq.w    #8,A7
0000416A  2800      7420          move.l    D0,D4
0000416C  BA83      7421          cmp.l     D3,D5
0000416E  651A      7422          blo.s     @itoa_convert_1
00004170  2F03      7423          move.l    D3,-(A7)
00004172  2F05      7424          move.l    D5,-(A7)
00004174  2F03      7425          move.l    D3,-(A7)
00004176  6100 F5FE 7426          bsr       ULDIV
0000417A  2217      7427          move.l    (A7),D1
0000417C  504F      7428          addq.w    #8,A7
0000417E  2F01      7429          move.l    D1,-(A7)
00004180  2F02      7430          move.l    D2,-(A7)
00004182  61C4      7431          bsr       @itoa_convert
00004184  DEFC 000C 7432          add.w     #12,A7
00004188  2400      7433          move.l    D0,D2
                    7434   @itoa_convert_1:
0000418A  0C84 0000 7435          cmp.l     #9,D4
0000418E  0009      
00004190  6E0A      7436          bgt.s     @itoa_convert_3
00004192  2004      7437          move.l    D4,D0
00004194  0680 0000 7438          add.l     #48,D0
00004198  0030      
0000419A  600E      7439          bra.s     @itoa_convert_4
                    7440   @itoa_convert_3:
0000419C  2004      7441          move.l    D4,D0
0000419E  0680 0000 7442          add.l     #97,D0
000041A2  0061      
000041A4  0480 0000 7443          sub.l     #10,D0
000041A8  000A      
                    7444   @itoa_convert_4:
000041AA  2042      7445          move.l    D2,A0
000041AC  1080      7446          move.b    D0,(A0)
000041AE  2002      7447          move.l    D2,D0
000041B0  5280      7448          addq.l    #1,D0
000041B2  4CDF 003C 7449          movem.l   (A7)+,D2/D3/D4/D5
000041B6  4E5E      7450          unlk      A6
000041B8  4E75      7451          rts
                    7452   _ltoa:
000041BA  4E56 0000 7453          link      A6,#0
000041BE  48E7 3C00 7454          movem.l   D2/D3/D4/D5,-(A7)
000041C2  242E 0008 7455          move.l    8(A6),D2
000041C6  262E 000C 7456          move.l    12(A6),D3
000041CA  2A2E 0010 7457          move.l    16(A6),D5
000041CE  2803      7458          move.l    D3,D4
000041D0  0C85 0000 7459          cmp.l     #2,D5
000041D4  0002      
000041D6  6D08      7460          blt.s     ltoa_3
000041D8  0C85 0000 7461          cmp.l     #36,D5
000041DC  0024      
000041DE  6F06      7462          ble.s     ltoa_1
                    7463   ltoa_3:
000041E0  2003      7464          move.l    D3,D0
000041E2  6000 0052 7465          bra       ltoa_4
                    7466   ltoa_1:
000041E6  0C85 0000 7467          cmp.l     #10,D5
000041EA  000A      
000041EC  6600 0032 7468          bne       ltoa_5
000041F0  0C82 0000 7469          cmp.l     #0,D2
000041F4  0000      
000041F6  6C28      7470          bge.s     ltoa_5
000041F8  2002      7471          move.l    D2,D0
000041FA  4480      7472          neg.l     D0
000041FC  2400      7473          move.l    D0,D2
000041FE  0C82 0000 7474          cmp.l     #0,D2
00004202  0000      
00004204  6C12      7475          bge.s     ltoa_7
00004206  4879 0000 7476          pea       @itoa_1
0000420A  4EF4      
0000420C  2F03      7477          move.l    D3,-(A7)
0000420E  6100 F556 7478          bsr       _strcpy
00004212  504F      7479          addq.w    #8,A7
00004214  2003      7480          move.l    D3,D0
00004216  601E      7481          bra.s     ltoa_4
                    7482   ltoa_7:
00004218  2044      7483          move.l    D4,A0
0000421A  5284      7484          addq.l    #1,D4
0000421C  10BC 002D 7485          move.b    #45,(A0)
                    7486   ltoa_5:
00004220  2F05      7487          move.l    D5,-(A7)
00004222  2F02      7488          move.l    D2,-(A7)
00004224  2F04      7489          move.l    D4,-(A7)
00004226  6100 FF20 7490          bsr       @itoa_convert
0000422A  DEFC 000C 7491          add.w     #12,A7
0000422E  2800      7492          move.l    D0,D4
00004230  2044      7493          move.l    D4,A0
00004232  4210      7494          clr.b     (A0)
00004234  2003      7495          move.l    D3,D0
                    7496   ltoa_4:
00004236  4CDF 003C 7497          movem.l   (A7)+,D2/D3/D4/D5
0000423A  4E5E      7498          unlk      A6
0000423C  4E75      7499          rts
                    7500   _ultoa:
0000423E  4E56 0000 7501          link      A6,#0
00004242  48E7 3800 7502          movem.l   D2/D3/D4,-(A7)
00004246  262E 0010 7503          move.l    16(A6),D3
0000424A  282E 000C 7504          move.l    12(A6),D4
0000424E  2404      7505          move.l    D4,D2
00004250  0C83 0000 7506          cmp.l     #2,D3
00004254  0002      
00004256  6D08      7507          blt.s     ultoa_3
00004258  0C83 0000 7508          cmp.l     #36,D3
0000425C  0024      
0000425E  6F04      7509          ble.s     ultoa_1
                    7510   ultoa_3:
00004260  2004      7511          move.l    D4,D0
00004262  6018      7512          bra.s     ultoa_4
                    7513   ultoa_1:
00004264  2F03      7514          move.l    D3,-(A7)
00004266  2F2E 0008 7515          move.l    8(A6),-(A7)
0000426A  2F02      7516          move.l    D2,-(A7)
0000426C  6100 FEDA 7517          bsr       @itoa_convert
00004270  DEFC 000C 7518          add.w     #12,A7
00004274  2400      7519          move.l    D0,D2
00004276  2042      7520          move.l    D2,A0
00004278  4210      7521          clr.b     (A0)
0000427A  2004      7522          move.l    D4,D0
                    7523   ultoa_4:
0000427C  4CDF 001C 7524          movem.l   (A7)+,D2/D3/D4
00004280  4E5E      7525          unlk      A6
00004282  4E75      7526          rts
                    7527   _itoa:
00004284  4E56 0000 7528          link      A6,#0
00004288  2F2E 0010 7529          move.l    16(A6),-(A7)
0000428C  2F2E 000C 7530          move.l    12(A6),-(A7)
00004290  2F2E 0008 7531          move.l    8(A6),-(A7)
00004294  6100 FF24 7532          bsr       _ltoa
00004298  DEFC 000C 7533          add.w     #12,A7
0000429C  4E5E      7534          unlk      A6
0000429E  4E75      7535          rts
                    7536   _strlen:
000042A0  206F 0004 7537          move.l    (4,A7),A0
000042A4  2248      7538          move.l    A0,A1
                    7539   strlen_1:
000042A6  4A19      7540          tst.b     (A1)+
000042A8  66FC      7541          bne       strlen_1
000042AA  2009      7542          move.l    A1,D0
000042AC  9088      7543          sub.l     A0,D0
000042AE  5380      7544          subq.l    #1,D0
000042B0  4E75      7545          rts
                    7546          section   const
                    7547   
                    7548   @m68kde~1_1:
000042B2  0D0A 4475 7549          dc.b      13,10,68,117,109,112,32,77,101,109,111,114,121
000042B6  6D70 204D 
000042BA  656D 6F72 
000042BE  79        
000042BF  2042 6C6F 7550          dc.b      32,66,108,111,99,107,58,32,60,69,83,67,62,32
000042C3  636B 3A20 
000042C7  3C45 5343 
000042CB  3E20      
000042CD  746F 2041 7551          dc.b      116,111,32,65,98,111,114,116,44,32,60,83,80
000042D1  626F 7274 
000042D5  2C20 3C53 
000042D9  50        
000042DA  4143 453E 7552          dc.b      65,67,69,62,32,116,111,32,67,111,110,116,105
000042DE  2074 6F20 
000042E2  436F 6E74 
000042E6  69        
000042E7  6E75 6500 7553          dc.b      110,117,101,0
                    7554   @m68kde~1_2:
000042EC  0D0A 456E 7555          dc.b      13,10,69,110,116,101,114,32,83,116,97,114,116
000042F0  7465 7220 
000042F4  5374 6172 
000042F8  74        
000042F9  2041 6464 7556          dc.b      32,65,100,100,114,101,115,115,58,32,0
000042FD  7265 7373 
00004301  3A20 00   
                    7557   @m68kde~1_3:
00004304  0D0A 2530 7558          dc.b      13,10,37,48,56,120,32,0
00004308  3878 2000 
                    7559   @m68kde~1_4:
0000430C  2530 3258 7560          dc.b      37,48,50,88,0
00004310  00        
                    7561   @m68kde~1_5:
00004312  2020 00   7562          dc.b      32,32,0
                    7563   @m68kde~1_6:
00004316  0D0A 00   7564          dc.b      13,10,0
                    7565   @m68kde~1_7:
0000431A  0D0A 4669 7566          dc.b      13,10,70,105,108,108,32,77,101,109,111,114,121
0000431E  6C6C 204D 
00004322  656D 6F72 
00004326  79        
00004327  2042 6C6F 7567          dc.b      32,66,108,111,99,107,0
0000432B  636B 00   
                    7568   @m68kde~1_8:
0000432E  0D0A 456E 7569          dc.b      13,10,69,110,116,101,114,32,69,110,100,32,65
00004332  7465 7220 
00004336  456E 6420 
0000433A  41        
0000433B  6464 7265 7570          dc.b      100,100,114,101,115,115,58,32,0
0000433F  7373 3A20 
00004343  00        
                    7571   @m68kde~1_9:
00004344  0D0A 456E 7572          dc.b      13,10,69,110,116,101,114,32,70,105,108,108,32
00004348  7465 7220 
0000434C  4669 6C6C 
00004350  20        
00004351  4461 7461 7573          dc.b      68,97,116,97,58,32,0
00004355  3A20 00   
                    7574   @m68kde~1_10:
00004358  0D0A 4669 7575          dc.b      13,10,70,105,108,108,105,110,103,32,65,100,100
0000435C  6C6C 696E 
00004360  6720 4164 
00004364  64        
00004365  7265 7373 7576          dc.b      114,101,115,115,101,115,32,91,36,37,48,56,88
00004369  6573 205B 
0000436D  2425 3038 
00004371  58        
00004372  202D 2024 7577          dc.b      32,45,32,36,37,48,56,88,93,32,119,105,116,104
00004376  2530 3858 
0000437A  5D20 7769 
0000437E  7468      
00004380  2024 2530 7578          dc.b      32,36,37,48,50,88,0
00004384  3258 00   
                    7579   @m68kde~1_11:
00004388  0D0A 5573 7580          dc.b      13,10,85,115,101,32,72,121,112,101,114,84,101
0000438C  6520 4879 
00004390  7065 7254 
00004394  65        
00004395  726D 696E 7581          dc.b      114,109,105,110,97,108,32,116,111,32,83,101
00004399  616C 2074 
0000439D  6F20 5365 
000043A1  6E64 2054 7582          dc.b      110,100,32,84,101,120,116,32,70,105,108,101
000043A5  6578 7420 
000043A9  4669 6C65 
000043AD  2028 2E68 7583          dc.b      32,40,46,104,101,120,41,13,10,0
000043B1  6578 290D 
000043B5  0A00      
                    7584   @m68kde~1_12:
000043B8  0D0A 4C6F 7585          dc.b      13,10,76,111,97,100,32,70,97,105,108,101,100
000043BC  6164 2046 
000043C0  6169 6C65 
000043C4  64        
000043C5  2061 7420 7586          dc.b      32,97,116,32,65,100,100,114,101,115,115,32,61
000043C9  4164 6472 
000043CD  6573 7320 
000043D1  3D        
000043D2  205B 2425 7587          dc.b      32,91,36,37,48,56,88,93,13,10,0
000043D6  3038 585D 
000043DA  0D0A 00   
                    7588   @m68kde~1_13:
000043DE  0D0A 5375 7589          dc.b      13,10,83,117,99,99,101,115,115,58,32,68,111
000043E2  6363 6573 
000043E6  733A 2044 
000043EA  6F        
000043EB  776E 6C6F 7590          dc.b      119,110,108,111,97,100,101,100,32,37,100,32
000043EF  6164 6564 
000043F3  2025 6420 
000043F7  6279 7465 7591          dc.b      98,121,116,101,115,13,10,0
000043FB  730D 0A00 
                    7592   @m68kde~1_14:
00004400  0D0A 4578 7593          dc.b      13,10,69,120,97,109,105,110,101,32,97,110,100
00004404  616D 696E 
00004408  6520 616E 
0000440C  64        
0000440D  2043 6861 7594          dc.b      32,67,104,97,110,103,101,32,77,101,109,111,114
00004411  6E67 6520 
00004415  4D65 6D6F 
00004419  72        
0000441A  7900      7595          dc.b      121,0
                    7596   @m68kde~1_15:
0000441C  0D0A 3C45 7597          dc.b      13,10,60,69,83,67,62,32,116,111,32,83,116,111
00004420  5343 3E20 
00004424  746F 2053 
00004428  746F      
0000442A  702C 203C 7598          dc.b      112,44,32,60,83,80,65,67,69,62,32,116,111,32
0000442E  5350 4143 
00004432  453E 2074 
00004436  6F20      
00004438  4164 7661 7599          dc.b      65,100,118,97,110,99,101,44,32,39,45,39,32,116
0000443C  6E63 652C 
00004440  2027 2D27 
00004444  2074      
00004446  6F20 476F 7600          dc.b      111,32,71,111,32,66,97,99,107,44,32,60,68,65
0000444A  2042 6163 
0000444E  6B2C 203C 
00004452  4441      
00004454  5441 3E20 7601          dc.b      84,65,62,32,116,111,32,99,104,97,110,103,101
00004458  746F 2063 
0000445C  6861 6E67 
00004460  65        
00004461  00        7602          dc.b      0
                    7603   @m68kde~1_16:
00004462  0D0A 456E 7604          dc.b      13,10,69,110,116,101,114,32,65,100,100,114,101
00004466  7465 7220 
0000446A  4164 6472 
0000446E  65        
0000446F  7373 3A20 7605          dc.b      115,115,58,32,0
00004473  00        
                    7606   @m68kde~1_17:
00004474  0D0A 5B25 7607          dc.b      13,10,91,37,48,56,120,93,32,58,32,37,48,50,120
00004478  3038 785D 
0000447C  203A 2025 
00004480  3032 78   
00004483  2020 00   7608          dc.b      32,32,0
                    7609   @m68kde~1_18:
00004486  0D0A 5761 7610          dc.b      13,10,87,97,114,110,105,110,103,32,67,104,97
0000448A  726E 696E 
0000448E  6720 4368 
00004492  61        
00004493  6E67 6520 7611          dc.b      110,103,101,32,70,97,105,108,101,100,58,32,87
00004497  4661 696C 
0000449B  6564 3A20 
0000449F  57        
000044A0  726F 7465 7612          dc.b      114,111,116,101,32,91,37,48,50,120,93,44,32
000044A4  205B 2530 
000044A8  3278 5D2C 
000044AC  20        
000044AD  5265 6164 7613          dc.b      82,101,97,100,32,91,37,48,50,120,93,0
000044B1  205B 2530 
000044B5  3278 5D00 
                    7614   @m68kde~1_19:
000044BA  2425 3038 7615          dc.b      36,37,48,56,88,32,32,0
000044BE  5820 2000 
                    7616   @m68kde~1_20:
000044C2  2000      7617          dc.b      32,0
                    7618   @m68kde~1_21:
000044C4  2E00      7619          dc.b      46,0
                    7620   @m68kde~1_22:
000044C6  2563 00   7621          dc.b      37,99,0
                    7622   @m68kde~1_23:
000044CA  00        7623          dc.b      0
                    7624   @m68kde~1_24:
000044CC  0D0A 0D0A 7625          dc.b      13,10,13,10,32,68,48,32,61,32,36,37,48,56,88
000044D0  2044 3020 
000044D4  3D20 2425 
000044D8  3038 58   
000044DB  2020 4130 7626          dc.b      32,32,65,48,32,61,32,36,37,48,56,88,0
000044DF  203D 2024 
000044E3  2530 3858 
000044E7  00        
                    7627   @m68kde~1_25:
000044E8  0D0A 2044 7628          dc.b      13,10,32,68,49,32,61,32,36,37,48,56,88,32,32
000044EC  3120 3D20 
000044F0  2425 3038 
000044F4  5820 20   
000044F7  4131 203D 7629          dc.b      65,49,32,61,32,36,37,48,56,88,0
000044FB  2024 2530 
000044FF  3858 00   
                    7630   @m68kde~1_26:
00004502  0D0A 2044 7631          dc.b      13,10,32,68,50,32,61,32,36,37,48,56,88,32,32
00004506  3220 3D20 
0000450A  2425 3038 
0000450E  5820 20   
00004511  4132 203D 7632          dc.b      65,50,32,61,32,36,37,48,56,88,0
00004515  2024 2530 
00004519  3858 00   
                    7633   @m68kde~1_27:
0000451C  0D0A 2044 7634          dc.b      13,10,32,68,51,32,61,32,36,37,48,56,88,32,32
00004520  3320 3D20 
00004524  2425 3038 
00004528  5820 20   
0000452B  4133 203D 7635          dc.b      65,51,32,61,32,36,37,48,56,88,0
0000452F  2024 2530 
00004533  3858 00   
                    7636   @m68kde~1_28:
00004536  0D0A 2044 7637          dc.b      13,10,32,68,52,32,61,32,36,37,48,56,88,32,32
0000453A  3420 3D20 
0000453E  2425 3038 
00004542  5820 20   
00004545  4134 203D 7638          dc.b      65,52,32,61,32,36,37,48,56,88,0
00004549  2024 2530 
0000454D  3858 00   
                    7639   @m68kde~1_29:
00004550  0D0A 2044 7640          dc.b      13,10,32,68,53,32,61,32,36,37,48,56,88,32,32
00004554  3520 3D20 
00004558  2425 3038 
0000455C  5820 20   
0000455F  4135 203D 7641          dc.b      65,53,32,61,32,36,37,48,56,88,0
00004563  2024 2530 
00004567  3858 00   
                    7642   @m68kde~1_30:
0000456A  0D0A 2044 7643          dc.b      13,10,32,68,54,32,61,32,36,37,48,56,88,32,32
0000456E  3620 3D20 
00004572  2425 3038 
00004576  5820 20   
00004579  4136 203D 7644          dc.b      65,54,32,61,32,36,37,48,56,88,0
0000457D  2024 2530 
00004581  3858 00   
                    7645   @m68kde~1_31:
00004584  0D0A 2044 7646          dc.b      13,10,32,68,55,32,61,32,36,37,48,56,88,32,32
00004588  3720 3D20 
0000458C  2425 3038 
00004590  5820 20   
00004593  4137 203D 7647          dc.b      65,55,32,61,32,36,37,48,56,88,0
00004597  2024 2530 
0000459B  3858 00   
                    7648   @m68kde~1_32:
0000459E  0D0A 0D0A 7649          dc.b      13,10,13,10,85,83,80,32,61,32,36,37,48,56,88
000045A2  5553 5020 
000045A6  3D20 2425 
000045AA  3038 58   
000045AD  2020 2841 7650          dc.b      32,32,40,65,55,41,32,85,115,101,114,32,83,80
000045B1  3729 2055 
000045B5  7365 7220 
000045B9  5350      
000045BB  00        7651          dc.b      0
                    7652   @m68kde~1_33:
000045BC  0D0A 5353 7653          dc.b      13,10,83,83,80,32,61,32,36,37,48,56,88,32,32
000045C0  5020 3D20 
000045C4  2425 3038 
000045C8  5820 20   
000045CB  2841 3729 7654          dc.b      40,65,55,41,32,83,117,112,101,114,118,105,115
000045CF  2053 7570 
000045D3  6572 7669 
000045D7  73        
000045D8  6F72 2053 7655          dc.b      111,114,32,83,80,0
000045DC  5000      
                    7656   @m68kde~1_34:
000045DE  0D0A 2053 7657          dc.b      13,10,32,83,82,32,61,32,36,37,48,52,88,32,32
000045E2  5220 3D20 
000045E6  2425 3034 
000045EA  5820 20   
000045ED  2000      7658          dc.b      32,0
                    7659   @m68kde~1_35:
000045F0  2020 205B 7660          dc.b      32,32,32,91,0
000045F4  00        
                    7661   @m68kde~1_36:
000045F6  0D0A 2050 7662          dc.b      13,10,32,80,67,32,61,32,36,37,48,56,88,32,32
000045FA  4320 3D20 
000045FE  2425 3038 
00004602  5820 20   
00004605  00        7663          dc.b      0
                    7664   @m68kde~1_37:
00004606  5B40 2042 7665          dc.b      91,64,32,66,82,69,65,75,80,79,73,78,84,93,0
0000460A  5245 414B 
0000460E  504F 494E 
00004612  545D 00   
                    7666   @m68kde~1_38:
00004616  0D0A 5750 7667          dc.b      13,10,87,80,37,100,32,61,32,37,115,0
0000461A  2564 203D 
0000461E  2025 7300 
                    7668   @m68kde~1_39:
00004622  0D0A 0D0A 7669          dc.b      13,10,13,10,13,10,13,10,13,10,13,10,83,105,110
00004626  0D0A 0D0A 
0000462A  0D0A 0D0A 
0000462E  5369 6E   
00004631  676C 6520 7670          dc.b      103,108,101,32,83,116,101,112,32,32,58,91,79
00004635  5374 6570 
00004639  2020 3A5B 
0000463D  4F        
0000463E  4E5D 00   7671          dc.b      78,93,0
                    7672   @m68kde~1_40:
00004642  0D0A 4272 7673          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004646  6561 6B20 
0000464A  506F 696E 
0000464E  74        
0000464F  7320 3A5B 7674          dc.b      115,32,58,91,68,105,115,97,98,108,101,100,93
00004653  4469 7361 
00004657  626C 6564 
0000465B  5D        
0000465C  00        7675          dc.b      0
                    7676   @m68kde~1_41:
0000465E  0D0A 5072 7677          dc.b      13,10,80,114,101,115,115,32,60,83,80,65,67,69
00004662  6573 7320 
00004666  3C53 5041 
0000466A  4345      
0000466C  3E20 746F 7678          dc.b      62,32,116,111,32,69,120,101,99,117,116,101,32
00004670  2045 7865 
00004674  6375 7465 
00004678  20        
00004679  4E65 7874 7679          dc.b      78,101,120,116,32,73,110,115,116,114,117,99
0000467D  2049 6E73 
00004681  7472 7563 
00004685  7469 6F6E 7680          dc.b      116,105,111,110,0
00004689  00        
                    7681   @m68kde~1_42:
0000468A  0D0A 5072 7682          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
0000468E  6573 7320 
00004692  3C45 5343 
00004696  3E20      
00004698  746F 2052 7683          dc.b      116,111,32,82,101,115,117,109,101,32,80,114
0000469C  6573 756D 
000046A0  6520 5072 
000046A4  6F67 7261 7684          dc.b      111,103,114,97,109,0
000046A8  6D00      
                    7685   @m68kde~1_43:
000046AA  0D0A 496C 7686          dc.b      13,10,73,108,108,101,103,97,108,32,68,97,116
000046AE  6C65 6761 
000046B2  6C20 4461 
000046B6  74        
000046B7  6120 5265 7687          dc.b      97,32,82,101,103,105,115,116,101,114,32,58,32
000046BB  6769 7374 
000046BF  6572 203A 
000046C3  20        
000046C4  5573 6520 7688          dc.b      85,115,101,32,68,48,45,68,55,46,46,46,46,46
000046C8  4430 2D44 
000046CC  372E 2E2E 
000046D0  2E2E      
000046D2  0D0A 00   7689          dc.b      13,10,0
                    7690   @m68kde~1_44:
000046D6  0D0A 4425 7691          dc.b      13,10,68,37,99,32,61,32,0
000046DA  6320 3D20 
000046DE  00        
                    7692   @m68kde~1_45:
000046E0  0D0A 496C 7693          dc.b      13,10,73,108,108,101,103,97,108,32,65,100,100
000046E4  6C65 6761 
000046E8  6C20 4164 
000046EC  64        
000046ED  7265 7373 7694          dc.b      114,101,115,115,32,82,101,103,105,115,116,101
000046F1  2052 6567 
000046F5  6973 7465 
000046F9  7220 3A20 7695          dc.b      114,32,58,32,85,115,101,32,65,48,45,65,55,46
000046FD  5573 6520 
00004701  4130 2D41 
00004705  372E      
00004707  2E2E 2E2E 7696          dc.b      46,46,46,46,13,10,0
0000470B  0D0A 00   
                    7697   @m68kde~1_46:
0000470E  0D0A 4125 7698          dc.b      13,10,65,37,99,32,61,32,0
00004712  6320 3D20 
00004716  00        
                    7699   @m68kde~1_47:
00004718  0D0A 5573 7700          dc.b      13,10,85,115,101,114,32,83,80,32,61,32,0
0000471C  6572 2053 
00004720  5020 3D20 
00004724  00        
                    7701   @m68kde~1_48:
00004726  0D0A 496C 7702          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
0000472A  6C65 6761 
0000472E  6C20 5265 
00004732  67        
00004733  6973 7465 7703          dc.b      105,115,116,101,114,46,46,46,46,0
00004737  722E 2E2E 
0000473B  2E00      
                    7704   @m68kde~1_49:
0000473E  0D0A 5379 7705          dc.b      13,10,83,121,115,116,101,109,32,83,80,32,61
00004742  7374 656D 
00004746  2053 5020 
0000474A  3D        
0000474B  2000      7706          dc.b      32,0
                    7707   @m68kde~1_50:
0000474E  0D0A 5043 7708          dc.b      13,10,80,67,32,61,32,0
00004752  203D 2000 
                    7709   @m68kde~1_51:
00004756  0D0A 5352 7710          dc.b      13,10,83,82,32,61,32,0
0000475A  203D 2000 
                    7711   @m68kde~1_52:
0000475E  0D0A 496C 7712          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
00004762  6C65 6761 
00004766  6C20 5265 
0000476A  67        
0000476B  6973 7465 7713          dc.b      105,115,116,101,114,58,32,85,115,101,32,65,48
0000476F  723A 2055 
00004773  7365 2041 
00004777  30        
00004778  2D41 372C 7714          dc.b      45,65,55,44,32,68,48,45,68,55,44,32,83,83,80
0000477C  2044 302D 
00004780  4437 2C20 
00004784  5353 50   
00004787  2C20 5553 7715          dc.b      44,32,85,83,80,44,32,80,67,32,111,114,32,83
0000478B  502C 2050 
0000478F  4320 6F72 
00004793  2053      
00004795  520D 0A00 7716          dc.b      82,13,10,0
                    7717   @m68kde~1_53:
0000479A  0D0A 0D0A 7718          dc.b      13,10,13,10,78,117,109,32,32,32,32,32,65,100
0000479E  4E75 6D20 
000047A2  2020 2020 
000047A6  4164      
000047A8  6472 6573 7719          dc.b      100,114,101,115,115,32,32,32,32,32,32,73,110
000047AC  7320 2020 
000047B0  2020 2049 
000047B4  6E        
000047B5  7374 7275 7720          dc.b      115,116,114,117,99,116,105,111,110,0
000047B9  6374 696F 
000047BD  6E00      
                    7721   @m68kde~1_54:
000047C0  0D0A 2D2D 7722          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
000047C4  2D20 2020 
000047C8  2020 2D2D 
000047CC  2D2D 2D   
000047CF  2D2D 2D2D 7723          dc.b      45,45,45,45,32,32,32,32,45,45,45,45,45,45,45
000047D3  2020 2020 
000047D7  2D2D 2D2D 
000047DB  2D2D 2D   
000047DE  2D2D 2D2D 7724          dc.b      45,45,45,45,0
000047E2  00        
                    7725   @m68kde~1_55:
000047E4  0D0A 4E6F 7726          dc.b      13,10,78,111,32,66,114,101,97,107,80,111,105
000047E8  2042 7265 
000047EC  616B 506F 
000047F0  69        
000047F1  6E74 7320 7727          dc.b      110,116,115,32,83,101,116,0
000047F5  5365 7400 
                    7728   @m68kde~1_56:
000047FA  0D0A 2533 7729          dc.b      13,10,37,51,100,32,32,32,32,32,36,37,48,56,120
000047FE  6420 2020 
00004802  2020 2425 
00004806  3038 78   
00004809  00        7730          dc.b      0
                    7731   @m68kde~1_57:
0000480A  0D0A 4E75 7732          dc.b      13,10,78,117,109,32,32,32,32,32,65,100,100,114
0000480E  6D20 2020 
00004812  2020 4164 
00004816  6472      
00004818  6573 7300 7733          dc.b      101,115,115,0
                    7734   @m68kde~1_58:
0000481C  0D0A 2D2D 7735          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
00004820  2D20 2020 
00004824  2020 2D2D 
00004828  2D2D 2D   
0000482B  2D2D 2D2D 7736          dc.b      45,45,45,45,0
0000482F  00        
                    7737   @m68kde~1_59:
00004830  0D0A 4E6F 7738          dc.b      13,10,78,111,32,87,97,116,99,104,80,111,105
00004834  2057 6174 
00004838  6368 506F 
0000483C  69        
0000483D  6E74 7320 7739          dc.b      110,116,115,32,83,101,116,0
00004841  5365 7400 
                    7740   @m68kde~1_60:
00004846  0D0A 456E 7741          dc.b      13,10,69,110,116,101,114,32,66,114,101,97,107
0000484A  7465 7220 
0000484E  4272 6561 
00004852  6B        
00004853  2050 6F69 7742          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
00004857  6E74 204E 
0000485B  756D 6265 
0000485F  72        
00004860  3A20 00   7743          dc.b      58,32,0
                    7744   @m68kde~1_61:
00004864  0D0A 496C 7745          dc.b      13,10,73,108,108,101,103,97,108,32,82,97,110
00004868  6C65 6761 
0000486C  6C20 5261 
00004870  6E        
00004871  6765 203A 7746          dc.b      103,101,32,58,32,85,115,101,32,48,32,45,32,55
00004875  2055 7365 
00004879  2030 202D 
0000487D  2037      
0000487F  00        7747          dc.b      0
                    7748   @m68kde~1_62:
00004880  0D0A 4272 7749          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004884  6561 6B20 
00004888  506F 696E 
0000488C  74        
0000488D  2043 6C65 7750          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
00004891  6172 6564 
00004895  2E2E 2E2E 
00004899  2E        
0000489A  0D0A 00   7751          dc.b      13,10,0
                    7752   @m68kde~1_63:
0000489E  0D0A 4272 7753          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
000048A2  6561 6B20 
000048A6  506F 696E 
000048AA  74        
000048AB  2077 6173 7754          dc.b      32,119,97,115,110,39,116,32,83,101,116,46,46
000048AF  6E27 7420 
000048B3  5365 742E 
000048B7  2E        
000048B8  2E2E 2E00 7755          dc.b      46,46,46,0
                    7756   @m68kde~1_64:
000048BC  0D0A 456E 7757          dc.b      13,10,69,110,116,101,114,32,87,97,116,99,104
000048C0  7465 7220 
000048C4  5761 7463 
000048C8  68        
000048C9  2050 6F69 7758          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
000048CD  6E74 204E 
000048D1  756D 6265 
000048D5  72        
000048D6  3A20 00   7759          dc.b      58,32,0
                    7760   @m68kde~1_65:
000048DA  0D0A 5761 7761          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
000048DE  7463 6820 
000048E2  506F 696E 
000048E6  74        
000048E7  2043 6C65 7762          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
000048EB  6172 6564 
000048EF  2E2E 2E2E 
000048F3  2E        
000048F4  0D0A 00   7763          dc.b      13,10,0
                    7764   @m68kde~1_66:
000048F8  0D0A 5761 7765          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
000048FC  7463 6820 
00004900  506F 696E 
00004904  74        
00004905  2057 6173 7766          dc.b      32,87,97,115,32,110,111,116,32,83,101,116,46
00004909  206E 6F74 
0000490D  2053 6574 
00004911  2E        
00004912  2E2E 2E2E 7767          dc.b      46,46,46,46,0
00004916  00        
                    7768   @m68kde~1_67:
00004918  0D0A 4E6F 7769          dc.b      13,10,78,111,32,70,82,69,69,32,66,114,101,97
0000491C  2046 5245 
00004920  4520 4272 
00004924  6561      
00004926  6B20 506F 7770          dc.b      107,32,80,111,105,110,116,115,46,46,46,46,46
0000492A  696E 7473 
0000492E  2E2E 2E2E 
00004932  2E        
00004933  00        7771          dc.b      0
                    7772   @m68kde~1_68:
00004934  0D0A 4272 7773          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004938  6561 6B20 
0000493C  506F 696E 
00004940  74        
00004941  2041 6464 7774          dc.b      32,65,100,100,114,101,115,115,58,32,0
00004945  7265 7373 
00004949  3A20 00   
                    7775   @m68kde~1_69:
0000494C  0D0A 4572 7776          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
00004950  726F 7220 
00004954  3A20 4272 
00004958  65        
00004959  616B 2050 7777          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
0000495D  6F69 6E74 
00004961  7320 4341 
00004965  4E        
00004966  4E4F 5420 7778          dc.b      78,79,84,32,98,101,32,115,101,116,32,97,116
0000496A  6265 2073 
0000496E  6574 2061 
00004972  74        
00004973  204F 4444 7779          dc.b      32,79,68,68,32,97,100,100,114,101,115,115,101
00004977  2061 6464 
0000497B  7265 7373 
0000497F  65        
00004980  7300      7780          dc.b      115,0
                    7781   @m68kde~1_70:
00004982  0D0A 4572 7782          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
00004986  726F 7220 
0000498A  3A20 4272 
0000498E  65        
0000498F  616B 2050 7783          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
00004993  6F69 6E74 
00004997  7320 4341 
0000499B  4E        
0000499C  4E4F 5420 7784          dc.b      78,79,84,32,98,101,32,115,101,116,32,102,111
000049A0  6265 2073 
000049A4  6574 2066 
000049A8  6F        
000049A9  7220 524F 7785          dc.b      114,32,82,79,77,32,105,110,32,82,97,110,103
000049AD  4D20 696E 
000049B1  2052 616E 
000049B5  67        
000049B6  6520 3A20 7786          dc.b      101,32,58,32,91,36,48,45,36,48,48,48,48,55,70
000049BA  5B24 302D 
000049BE  2430 3030 
000049C2  3037 46   
000049C5  4646 5D00 7787          dc.b      70,70,93,0
                    7788   @m68kde~1_71:
000049CA  0D0A 4572 7789          dc.b      13,10,69,114,114,111,114,58,32,66,114,101,97
000049CE  726F 723A 
000049D2  2042 7265 
000049D6  61        
000049D7  6B20 506F 7790          dc.b      107,32,80,111,105,110,116,32,65,108,114,101
000049DB  696E 7420 
000049DF  416C 7265 
000049E3  6164 7920 7791          dc.b      97,100,121,32,69,120,105,115,116,115,32,97,116
000049E7  4578 6973 
000049EB  7473 2061 
000049EF  74        
000049F0  2041 6464 7792          dc.b      32,65,100,100,114,101,115,115,32,58,32,37,48
000049F4  7265 7373 
000049F8  203A 2025 
000049FC  30        
000049FD  3878 0D0A 7793          dc.b      56,120,13,10,0
00004A01  00        
                    7794   @m68kde~1_72:
00004A02  0D0A 4272 7795          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004A06  6561 6B20 
00004A0A  506F 696E 
00004A0E  74        
00004A0F  2053 6574 7796          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
00004A13  2061 7420 
00004A17  4164 6472 
00004A1B  65        
00004A1C  7373 3A20 7797          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
00004A20  5B24 2530 
00004A24  3878 5D00 
                    7798   @m68kde~1_73:
00004A28  0D0A 4E6F 7799          dc.b      13,10,78,111,32,70,82,69,69,32,87,97,116,99
00004A2C  2046 5245 
00004A30  4520 5761 
00004A34  7463      
00004A36  6820 506F 7800          dc.b      104,32,80,111,105,110,116,115,46,46,46,46,46
00004A3A  696E 7473 
00004A3E  2E2E 2E2E 
00004A42  2E        
00004A43  00        7801          dc.b      0
                    7802   @m68kde~1_74:
00004A44  0D0A 5761 7803          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00004A48  7463 6820 
00004A4C  506F 696E 
00004A50  74        
00004A51  2041 6464 7804          dc.b      32,65,100,100,114,101,115,115,58,32,0
00004A55  7265 7373 
00004A59  3A20 00   
                    7805   @m68kde~1_75:
00004A5C  0D0A 4572 7806          dc.b      13,10,69,114,114,111,114,58,32,87,97,116,99
00004A60  726F 723A 
00004A64  2057 6174 
00004A68  63        
00004A69  6820 506F 7807          dc.b      104,32,80,111,105,110,116,32,65,108,114,101
00004A6D  696E 7420 
00004A71  416C 7265 
00004A75  6164 7920 7808          dc.b      97,100,121,32,83,101,116,32,97,116,32,65,100
00004A79  5365 7420 
00004A7D  6174 2041 
00004A81  64        
00004A82  6472 6573 7809          dc.b      100,114,101,115,115,32,58,32,37,48,56,120,13
00004A86  7320 3A20 
00004A8A  2530 3878 
00004A8E  0D        
00004A8F  0A00      7810          dc.b      10,0
                    7811   @m68kde~1_76:
00004A92  0D0A 5761 7812          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00004A96  7463 6820 
00004A9A  506F 696E 
00004A9E  74        
00004A9F  2053 6574 7813          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
00004AA3  2061 7420 
00004AA7  4164 6472 
00004AAB  65        
00004AAC  7373 3A20 7814          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
00004AB0  5B24 2530 
00004AB4  3878 5D00 
                    7815   @m68kde~1_77:
00004AB8  0D0A 0D0A 7816          dc.b      13,10,13,10,13,10,13,10,64,66,82,69,65,75,80
00004ABC  0D0A 0D0A 
00004AC0  4042 5245 
00004AC4  414B 50   
00004AC7  4F49 4E54 7817          dc.b      79,73,78,84,0
00004ACB  00        
                    7818   @m68kde~1_78:
00004ACC  0D0A 5369 7819          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00004AD0  6E67 6C65 
00004AD4  2053 7465 
00004AD8  70        
00004AD9  203A 205B 7820          dc.b      32,58,32,91,79,78,93,0
00004ADD  4F4E 5D00 
                    7821   @m68kde~1_79:
00004AE2  0D0A 4272 7822          dc.b      13,10,66,114,101,97,107,80,111,105,110,116,115
00004AE6  6561 6B50 
00004AEA  6F69 6E74 
00004AEE  73        
00004AEF  203A 205B 7823          dc.b      32,58,32,91,69,110,97,98,108,101,100,93,0
00004AF3  456E 6162 
00004AF7  6C65 645D 
00004AFB  00        
                    7824   @m68kde~1_80:
00004AFC  0D0A 5072 7825          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00004B00  6573 7320 
00004B04  3C45 5343 
00004B08  3E20      
00004B0A  746F 2052 7826          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
00004B0E  6573 756D 
00004B12  6520 5573 
00004B16  6572 2050 7827          dc.b      101,114,32,80,114,111,103,114,97,109,13,10,0
00004B1A  726F 6772 
00004B1E  616D 0D0A 
00004B22  00        
                    7828   @m68kde~1_81:
00004B24  0D0A 556E 7829          dc.b      13,10,85,110,107,110,111,119,110,32,67,111,109
00004B28  6B6E 6F77 
00004B2C  6E20 436F 
00004B30  6D        
00004B31  6D61 6E64 7830          dc.b      109,97,110,100,46,46,46,46,46,13,10,0
00004B35  2E2E 2E2E 
00004B39  2E0D 0A00 
                    7831   @m68kde~1_82:
00004B3E  0D0A 5072 7832          dc.b      13,10,80,114,111,103,114,97,109,32,69,110,100
00004B42  6F67 7261 
00004B46  6D20 456E 
00004B4A  64        
00004B4B  6564 2028 7833          dc.b      101,100,32,40,84,82,65,80,32,35,49,53,41,46
00004B4F  5452 4150 
00004B53  2023 3135 
00004B57  292E      
00004B59  2E2E 2E00 7834          dc.b      46,46,46,0
                    7835   @m68kde~1_83:
00004B5E  0D0A 4B69 7836          dc.b      13,10,75,105,108,108,32,65,108,108,32,66,114
00004B62  6C6C 2041 
00004B66  6C6C 2042 
00004B6A  72        
00004B6B  6561 6B20 7837          dc.b      101,97,107,32,80,111,105,110,116,115,46,46,46
00004B6F  506F 696E 
00004B73  7473 2E2E 
00004B77  2E        
00004B78  2879 2F6E 7838          dc.b      40,121,47,110,41,63,0
00004B7C  293F 00   
                    7839   @m68kde~1_84:
00004B80  0D0A 4B69 7840          dc.b      13,10,75,105,108,108,32,65,108,108,32,87,97
00004B84  6C6C 2041 
00004B88  6C6C 2057 
00004B8C  61        
00004B8D  7463 6820 7841          dc.b      116,99,104,32,80,111,105,110,116,115,46,46,46
00004B91  506F 696E 
00004B95  7473 2E2E 
00004B99  2E        
00004B9A  2879 2F6E 7842          dc.b      40,121,47,110,41,63,0
00004B9E  293F 00   
                    7843   @m68kde~1_85:
00004BA2  0D0A 2D2D 7844          dc.b      13,10,45,45,45,45,45,45,45,45,45,45,45,45,45
00004BA6  2D2D 2D2D 
00004BAA  2D2D 2D2D 
00004BAE  2D2D 2D   
00004BB1  2D2D 2D2D 7845          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00004BB5  2D2D 2D2D 
00004BB9  2D2D 2D2D 
00004BBD  2D2D 2D   
00004BC0  2D2D 2D2D 7846          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00004BC4  2D2D 2D2D 
00004BC8  2D2D 2D2D 
00004BCC  2D2D 2D   
00004BCF  2D2D 2D2D 7847          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00004BD3  2D2D 2D2D 
00004BD7  2D2D 2D2D 
00004BDB  2D2D 2D   
00004BDE  2D2D 2D2D 7848          dc.b      45,45,45,45,45,45,0
00004BE2  2D2D 00   
                    7849   @m68kde~1_86:
00004BE6  0D0A 2020 7850          dc.b      13,10,32,32,70,105,110,97,108,32,80,114,111
00004BEA  4669 6E61 
00004BEE  6C20 5072 
00004BF2  6F        
00004BF3  6A65 6374 7851          dc.b      106,101,99,116,0
00004BF7  00        
                    7852   @m68kde~1_87:
00004BF8  0D0A 2020 7853          dc.b      13,10,32,32,72,32,32,32,32,45,32,83,97,121,32
00004BFC  4820 2020 
00004C00  202D 2053 
00004C04  6179 20   
00004C07  4865 6C6C 7854          dc.b      72,101,108,108,111,32,87,111,114,108,100,0
00004C0B  6F20 576F 
00004C0F  726C 6400 
                    7855   @m68kde~1_88:
00004C14  0D0A 2020 7856          dc.b      13,10,32,32,84,32,32,32,32,45,32,82,117,110
00004C18  5420 2020 
00004C1C  202D 2052 
00004C20  756E      
00004C22  2054 6574 7857          dc.b      32,84,101,116,114,105,115,32,71,97,109,101,0
00004C26  7269 7320 
00004C2A  4761 6D65 
00004C2E  00        
                    7858   @m68kde~1_89:
00004C30  0D0A 2300 7859          dc.b      13,10,35,0
                    7860   @m68kde~1_90:
00004C34  0A52 756E 7861          dc.b      10,82,117,110,110,105,110,103,32,84,101,116
00004C38  6E69 6E67 
00004C3C  2054 6574 
00004C40  7269 7320 7862          dc.b      114,105,115,32,71,97,109,101,10,0
00004C44  4761 6D65 
00004C48  0A00      
                    7863   @m68kde~1_91:
00004C4A  0A53 6179 7864          dc.b      10,83,97,121,105,110,103,32,72,101,108,108,111
00004C4E  696E 6720 
00004C52  4865 6C6C 
00004C56  6F        
00004C57  2057 6F72 7865          dc.b      32,87,111,114,108,100,10,0
00004C5B  6C64 0A00 
                    7866   @m68kde~1_92:
00004C60  0D0A 0D0A 7867          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
00004C64  5072 6F67 
00004C68  7261 6D20 
00004C6C  41        
00004C6D  424F 5254 7868          dc.b      66,79,82,84,32,33,33,33,33,33,33,13,10,0
00004C71  2021 2121 
00004C75  2121 210D 
00004C79  0A00      
                    7869   @m68kde~1_93:
00004C7C  2573 0D0A 7870          dc.b      37,115,13,10,0
00004C80  00        
                    7871   @m68kde~1_94:
00004C82  0D0A 0D0A 7872          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
00004C86  5072 6F67 
00004C8A  7261 6D20 
00004C8E  41        
00004C8F  424F 5254 7873          dc.b      66,79,82,84,32,33,33,33,33,33,0
00004C93  2021 2121 
00004C97  2121 00   
                    7874   @m68kde~1_95:
00004C9A  0D0A 556E 7875          dc.b      13,10,85,110,104,97,110,100,108,101,100,32,73
00004C9E  6861 6E64 
00004CA2  6C65 6420 
00004CA6  49        
00004CA7  6E74 6572 7876          dc.b      110,116,101,114,114,117,112,116,58,32,73,82
00004CAB  7275 7074 
00004CAF  3A20 4952 
00004CB3  5125 6420 7877          dc.b      81,37,100,32,33,33,33,33,33,0
00004CB7  2121 2121 
00004CBB  2100      
                    7878   @m68kde~1_96:
00004CBE  4144 4452 7879          dc.b      65,68,68,82,69,83,83,32,69,82,82,79,82,58,32
00004CC2  4553 5320 
00004CC6  4552 524F 
00004CCA  523A 20   
00004CCD  3136 206F 7880          dc.b      49,54,32,111,114,32,51,50,32,66,105,116,32,84
00004CD1  7220 3332 
00004CD5  2042 6974 
00004CD9  2054      
00004CDB  7261 6E73 7881          dc.b      114,97,110,115,102,101,114,32,116,111,47,102
00004CDF  6665 7220 
00004CE3  746F 2F66 
00004CE7  726F 6D20 7882          dc.b      114,111,109,32,97,110,32,79,68,68,32,65,100
00004CEB  616E 204F 
00004CEF  4444 2041 
00004CF3  64        
00004CF4  6472 6573 7883          dc.b      100,114,101,115,115,46,46,46,46,0
00004CF8  732E 2E2E 
00004CFC  2E00      
                    7884   @m68kde~1_97:
00004CFE  556E 6861 7885          dc.b      85,110,104,97,110,100,108,101,100,32,84,114
00004D02  6E64 6C65 
00004D06  6420 5472 
00004D0A  6170 2021 7886          dc.b      97,112,32,33,33,33,33,33,0
00004D0E  2121 2121 
00004D12  00        
                    7887   @m68kde~1_98:
00004D14  4255 5320 7888          dc.b      66,85,83,32,69,114,114,111,114,33,0
00004D18  4572 726F 
00004D1C  7221 00   
                    7889   @m68kde~1_99:
00004D20  4144 4452 7890          dc.b      65,68,68,82,69,83,83,32,69,114,114,111,114,33
00004D24  4553 5320 
00004D28  4572 726F 
00004D2C  7221      
00004D2E  00        7891          dc.b      0
                    7892   @m68kde~1_100:
00004D30  494C 4C45 7893          dc.b      73,76,76,69,71,65,76,32,73,78,83,84,82,85,67
00004D34  4741 4C20 
00004D38  494E 5354 
00004D3C  5255 43   
00004D3F  5449 4F4E 7894          dc.b      84,73,79,78,0
00004D43  00        
                    7895   @m68kde~1_101:
00004D44  4449 5649 7896          dc.b      68,73,86,73,68,69,32,66,89,32,90,69,82,79,0
00004D48  4445 2042 
00004D4C  5920 5A45 
00004D50  524F 00   
                    7897   @m68kde~1_102:
00004D54  2743 484B 7898          dc.b      39,67,72,75,39,32,73,78,83,84,82,85,67,84,73
00004D58  2720 494E 
00004D5C  5354 5255 
00004D60  4354 49   
00004D63  4F4E 00   7899          dc.b      79,78,0
                    7900   @m68kde~1_103:
00004D66  5452 4150 7901          dc.b      84,82,65,80,86,32,73,78,83,84,82,85,67,84,73
00004D6A  5620 494E 
00004D6E  5354 5255 
00004D72  4354 49   
00004D75  4F4E 00   7902          dc.b      79,78,0
                    7903   @m68kde~1_104:
00004D78  5052 4956 7904          dc.b      80,82,73,86,73,76,69,71,69,32,86,73,79,76,65
00004D7C  494C 4547 
00004D80  4520 5649 
00004D84  4F4C 41   
00004D87  5449 4F4E 7905          dc.b      84,73,79,78,0
00004D8B  00        
                    7906   @m68kde~1_105:
00004D8C  554E 494E 7907          dc.b      85,78,73,78,73,84,73,65,76,73,83,69,68,32,73
00004D90  4954 4941 
00004D94  4C49 5345 
00004D98  4420 49   
00004D9B  5251 00   7908          dc.b      82,81,0
                    7909   @m68kde~1_106:
00004D9E  5350 5552 7910          dc.b      83,80,85,82,73,79,85,83,32,73,82,81,0
00004DA2  494F 5553 
00004DA6  2049 5251 
00004DAA  00        
                    7911   @m68kde~1_107:
00004DAC  4445 312D 7912          dc.b      68,69,49,45,54,56,107,32,66,117,103,32,86,49
00004DB0  3638 6B20 
00004DB4  4275 6720 
00004DB8  5631      
00004DBA  2E37 370D 7913          dc.b      46,55,55,13,10,83,116,117,100,101,110,116,32
00004DBE  0A53 7475 
00004DC2  6465 6E74 
00004DC6  20        
00004DC7  536F 6C75 7914          dc.b      83,111,108,117,116,105,111,110,32,70,105,110
00004DCB  7469 6F6E 
00004DCF  2046 696E 
00004DD3  616C 2050 7915          dc.b      97,108,32,80,114,111,106,101,99,116,32,50,48
00004DD7  726F 6A65 
00004DDB  6374 2032 
00004DDF  30        
00004DE0  3233 5732 7916          dc.b      50,51,87,50,0
00004DE4  00        
                    7917   @m68kde~1_108:
00004DE6  436F 7079 7918          dc.b      67,111,112,121,114,105,103,104,116,32,40,67
00004DEA  7269 6768 
00004DEE  7420 2843 
00004DF2  2920 4161 7919          dc.b      41,32,65,97,114,97,110,32,80,111,111,110,44
00004DF6  7261 6E20 
00004DFA  506F 6F6E 
00004DFE  2C        
00004DFF  2033 3632 7920          dc.b      32,51,54,50,50,56,50,48,51,0
00004E03  3238 3230 
00004E07  3300      
                    7921   @m68kde~1_109:
00004E0A  0D0A 2573 7922          dc.b      13,10,37,115,0
00004E0E  00        
                    7923   @tetris~1_1:
00004E10  4572 726F 7924          dc.b      69,114,114,111,114,58,32,120,58,32,37,100,44
00004E14  723A 2078 
00004E18  3A20 2564 
00004E1C  2C        
00004E1D  2079 3A20 7925          dc.b      32,121,58,32,37,100,10,0
00004E21  2564 0A00 
                    7926   @tetris~1_2:
00004E26  2564 00   7927          dc.b      37,100,0
                    7928   @tetris~1_3:
00004E2A  7363 6F72 7929          dc.b      115,99,111,114,101,0
00004E2E  6500      
                    7930   @tetris~1_4:
00004E30  5072 6573 7931          dc.b      80,114,101,115,115,32,115,111,109,101,116,104
00004E34  7320 736F 
00004E38  6D65 7468 
00004E3C  696E 6720 7932          dc.b      105,110,103,32,116,111,32,99,111,110,116,105
00004E40  746F 2063 
00004E44  6F6E 7469 
00004E48  6E75 6500 7933          dc.b      110,117,101,0
                    7934   @tetris~1_5:
00004E4C  0A0A 0A00 7935          dc.b      10,10,10,0
                    7936   @tetris~1_6:
00004E50  696E 6974 7937          dc.b      105,110,105,116,105,97,108,95,110,101,119,108
00004E54  6961 6C5F 
00004E58  6E65 776C 
00004E5C  696E 6500 7938          dc.b      105,110,101,0
                    7939   @tetris~1_7:
00004E60  2000      7940          dc.b      32,0
                    7941   @tetris~1_8:
00004E62  7370 6163 7942          dc.b      115,112,97,99,101,0
00004E66  6500      
                    7943   @tetris~1_9:
00004E68  4350 454E 7944          dc.b      67,80,69,78,52,49,50,32,84,101,116,114,105,115
00004E6C  3431 3220 
00004E70  5465 7472 
00004E74  6973      
00004E76  0A00      7945          dc.b      10,0
                    7946   @tetris~1_10:
00004E78  7469 746C 7947          dc.b      116,105,116,108,101,0
00004E7C  6500      
                    7948   @tetris~1_11:
00004E7E  2300      7949          dc.b      35,0
                    7950   @tetris~1_12:
00004E80  7461 626C 7951          dc.b      116,97,98,108,101,35,0
00004E84  6523 00   
                    7952   @tetris~1_13:
00004E88  2E00      7953          dc.b      46,0
                    7954   @tetris~1_14:
00004E8A  7461 626C 7955          dc.b      116,97,98,108,101,46,0
00004E8E  652E 00   
                    7956   @tetris~1_15:
00004E92  0A00      7957          dc.b      10,0
                    7958   @tetris~1_16:
00004E94  6E65 776C 7959          dc.b      110,101,119,108,105,110,101,49,0
00004E98  696E 6531 
00004E9C  00        
                    7960   @tetris~1_17:
00004E9E  0A53 636F 7961          dc.b      10,83,99,111,114,101,58,32,37,100,10,0
00004EA2  7265 3A20 
00004EA6  2564 0A00 
                    7962   @tetris~1_18:
00004EAA  7363 6F72 7963          dc.b      115,99,111,114,101,112,114,105,110,116,0
00004EAE  6570 7269 
00004EB2  6E74 00   
                    7964   @tetris~1_19:
00004EB6  0A47 616D 7965          dc.b      10,71,97,109,101,32,111,118,101,114,33,10,0
00004EBA  6520 6F76 
00004EBE  6572 210A 
00004EC2  00        
                    7966          section   data
00004EC4            7967                   align
          0000 4EC4 7968   DataStart       equ       *
                    7969   
                    7970   *********************************************************************************************************
                    7971   * Data Section for Initialised Data - these will be placed in rom as constants and have to be copied
                    7972   * to ram as part of the CStart routine in this file
                    7973   *********************************************************************************************************
                    7974   
                    7975   _color_def:
00004EC4  0000 0004 7976          dc.l      4,1,2,6,5,7,3
00004EC8  0000 0001 
00004ECC  0000 0002 
00004ED0  0000 0006 
00004ED4  0000 0005 
00004ED8  0000 0007 
00004EDC  0000 0003 
                    7977   gameOver_game_over:
00004EE0  4761 6D65 7978          dc.b      71,97,109,101,32,111,118,101,114,33,0
00004EE4  206F 7665 
00004EE8  7221 00   
                    7979   gameOver_score_text:
00004EEC  5363 6F72 7980          dc.b      83,99,111,114,101,58,32,0
00004EF0  653A 2000 
                    7981   @itoa_1:
00004EF4  2D32 3134 7982          dc.b      45,50,49,52,55,52,56,51,54,52,56,0
00004EF8  3734 3833 
00004EFC  3634 3800 
                    7983          section   bss
00004F00            7984                   align
          0000 4F00 7985   DataEnd         equ     *                       this label will equate to the address of the last byte of global variable in it
                    7986   
                    7987   *********************************************************************************************************
                    7988   * Section for Uninitialised Data held in ROM as constants
                    7989   *********************************************************************************************************
                    7990   
08030000            7991                   org     RamVectorTable          Ram based vector table must be stored here otherwise InstallException Handler will not work
          0000 003C 7992   DataLength      equ     DataEnd-DataStart       length of data needed to copy to Ram on bootup
                    7993   
                    7994   
08030000            7995   bss             org       bss
                    7996   
                    7997   *********************************************************************************************************
                    7998   * Build a ram based vector table for interrupts so we can install our own Exception Handlers in C code at run time
                    7999   * install the exception handler using the C function InstallExceptionHandler()
                    8000   *********************************************************************************************************
                    8001   
                    8002   
                    8003   
08030000            8004   VInitialSP       ds.l    1      dummy as we can't really install a handler for this
08030004            8005   VInitialPC       ds.l    1      dummy as we can't reallin install a handler for this
08030008            8006   VBusError        ds.l    1      storage for address of Bus Error Handler
0803000C            8007   VAddressError    ds.l    1      storage for address of Address Error Handler
08030010            8008   VIllegalInstr    ds.l    1      storage for address of Illegal Instruction handler
08030014            8009   VDividebyZero    ds.l    1      storage for address of divide by zero handler
08030018            8010   VCheck           ds.l    1      ditto
0803001C            8011   VTrapV           ds.l    1      ditto
08030020            8012   VPrivilege       ds.l    1      ditto
08030024            8013   VTrace           ds.l    1
08030028            8014   VLine1010emul    ds.l    1
0803002C            8015   VLine1111emul    ds.l    1
08030030            8016   VUnassigned1     ds.l    1
08030034            8017   VUnassigned2     ds.l    1
08030038            8018   VUnassigned3     ds.l    1
0803003C            8019   VUninit_IRQ      ds.l    1
08030040            8020   VUnassigned4     ds.l    1
08030044            8021   VUnassigned5     ds.l    1
08030048            8022   VUnassigned6     ds.l    1
0803004C            8023   VUnassigned7     ds.l    1
08030050            8024   VUnassigned8     ds.l    1
08030054            8025   VUnassigned9     ds.l    1
08030058            8026   VUnassigned10    ds.l    1
0803005C            8027   VUnassigned11    ds.l    1
08030060            8028   VSpuriousIRQ     ds.l    1
                    8029   
                    8030   * Interrupt handlers Vector 25-31
08030064            8031   VL1IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030068            8032   VL2IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0803006C            8033   VL3IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030070            8034   VL4IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030074            8035   VL5IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030078            8036   VL6IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0803007C            8037   VL7IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
                    8038   
                    8039   * Trap Handler vectors 32-47
08030080            8040   VTrap0           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030084            8041   VTrap1           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030088            8042   VTrap2           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0803008C            8043   VTrap3           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030090            8044   VTrap4           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030094            8045   VTrap5           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030098            8046   VTrap6           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0803009C            8047   VTrap7           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300A0            8048   VTrap8           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300A4            8049   VTrap9           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300A8            8050   VTrap10          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300AC            8051   VTrap11          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300B0            8052   VTrap12          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300B4            8053   VTrap13          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300B8            8054   VTrap14          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300BC            8055   VTrap15          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
                    8056   
                    8057   * the remaining exceptions are unassigned in the 68000 so no need to allocate storage for them here
                    8058   
                    8059   ***********************************************************************************************************
                    8060   * Other Variables
                    8061   ***********************************************************************************************************
                    8062   *__DebugA5       ds.l    1
                    8063   *__UserA5        ds.l    1
                    8064   
                    8065   ***********************************************************************************************************
080300C0            8066   __ungetbuf:     ds.l    1       ; ungetbuffer for stdio functions
080300C4            8067   __allocp:       ds.l    0       ; start of allocation units
080300C4            8068   __heap:         ds.l    0       ; pointers for malloc functions
                    8069   
                    8070   *__himem:       ds.l    himem            ; highest memory location + 1
                    8071   *__stklen:      ds.l    stklen           ; default stack size
                    8072   
                    8073   *********************************************************************************************************
                    8074   * Section for Heap
                    8075   *********************************************************************************************************
                    8076   
                    8077   _i:
080300C4            8078          ds.b      4
                    8079   _x:
080300C8            8080          ds.b      4
                    8081   _y:
080300CC            8082          ds.b      4
                    8083   _z:
080300D0            8084          ds.b      4
                    8085   _PortA_Count:
080300D4            8086          ds.b      4
                    8087   _Trace:
080300D8            8088          ds.b      4
                    8089   _GoFlag:
080300DC            8090          ds.b      4
                    8091   _Echo:
080300E0            8092          ds.b      4
                    8093   _d0:
080300E4            8094          ds.b      4
                    8095   _d1:
080300E8            8096          ds.b      4
                    8097   _d2:
080300EC            8098          ds.b      4
                    8099   _d3:
080300F0            8100          ds.b      4
                    8101   _d4:
080300F4            8102          ds.b      4
                    8103   _d5:
080300F8            8104          ds.b      4
                    8105   _d6:
080300FC            8106          ds.b      4
                    8107   _d7:
08030100            8108          ds.b      4
                    8109   _a0:
08030104            8110          ds.b      4
                    8111   _a1:
08030108            8112          ds.b      4
                    8113   _a2:
0803010C            8114          ds.b      4
                    8115   _a3:
08030110            8116          ds.b      4
                    8117   _a4:
08030114            8118          ds.b      4
                    8119   _a5:
08030118            8120          ds.b      4
                    8121   _a6:
0803011C            8122          ds.b      4
                    8123   _PC:
08030120            8124          ds.b      4
                    8125   _SSP:
08030124            8126          ds.b      4
                    8127   _USP:
08030128            8128          ds.b      4
                    8129   _SR:
0803012C            8130          ds.b      2
                    8131   _BreakPointAddress:
0803012E            8132          ds.b      32
                    8133   _BreakPointInstruction:
0803014E            8134          ds.b      16
                    8135   _BreakPointSetOrCleared:
0803015E            8136          ds.b      32
                    8137   _InstructionSize:
0803017E            8138          ds.b      4
                    8139   _WatchPointAddress:
08030182            8140          ds.b      32
                    8141   _WatchPointSetOrCleared:
080301A2            8142          ds.b      32
                    8143   _WatchPointString:
080301C2            8144          ds.b      800
                    8145   _TempString:
080304E2            8146          ds.b      100
                    8147   _Table:
08030546            8148          ds.b      300
                    8149   _tetris_score:
08030672            8150          ds.b      4
                    8151   _GameOn:
08030676            8152          ds.b      1
                    8153   _tetris_timer:
08030678            8154          ds.b      4
                    8155   _current:
0803067C            8156          ds.b      28
                    8157   _ShapesArray:
08030698            8158          ds.b      196
                    8159   _Tetris_Speed:
0803075C            8160          ds.b      8
                    8161   _printw_x:
08030764            8162          ds.b      4
                    8163   _printw_y:
08030768            8164          ds.b      4
                    8165   _counter:
0803076C            8166          ds.b      4
                    8167          section   heap
08030770            8168                   align
          0803 0770 8169   bssEnd          equ *                   end of storage space for unitialised variables
                    8170   *                                       we have to copy all initialised variable from rom to here at startup
          0803 0770 8171   heap   equ       *
08030770            8172                    align
          0000 0000

Assembly errors: 0
